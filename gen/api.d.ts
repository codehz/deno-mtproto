// Generated by scripts/generate-code.ts
import type {
  BaseSerializer,
  BaseDeserializer,
  ToUnderscore,
  TLMethod,
  TLApiMethod,
  TLConstructor,
  TLConstructorEmpty,
} from "mtproto/tl/types.ts";

// #region "constructors"

export namespace mt {
  export type ResPQ<
    K extends keyof _ResPQ = keyof _ResPQ
  > = ToUnderscore<_ResPQ, K>;
  export type _ResPQ = {
    "mt.resPQ": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      pq: BufferSource;                       // bytes
      server_public_key_fingerprints: bigint[]; // Vector<long>
    },
  };

  export const resPQ: TLConstructor<_ResPQ, "mt.resPQ">;
  export type P_Q_inner_data<
    K extends keyof _P_Q_inner_data = keyof _P_Q_inner_data
  > = ToUnderscore<_P_Q_inner_data, K>;
  export type _P_Q_inner_data = {
    "mt.p_q_inner_data": {
      pq: BufferSource;                       // bytes
      p: BufferSource;                        // bytes
      q: BufferSource;                        // bytes
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce: Uint8Array;                  // int256
    },
    "mt.p_q_inner_data_dc": {
      pq: BufferSource;                       // bytes
      p: BufferSource;                        // bytes
      q: BufferSource;                        // bytes
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce: Uint8Array;                  // int256
      dc: number;                             // int
    },
    "mt.p_q_inner_data_temp": {
      pq: BufferSource;                       // bytes
      p: BufferSource;                        // bytes
      q: BufferSource;                        // bytes
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce: Uint8Array;                  // int256
      expires_in: number;                     // int
    },
  };

  export const p_q_inner_data: TLConstructor<_P_Q_inner_data, "mt.p_q_inner_data">;
  export const p_q_inner_data_dc: TLConstructor<_P_Q_inner_data, "mt.p_q_inner_data_dc">;
  export const p_q_inner_data_temp: TLConstructor<_P_Q_inner_data, "mt.p_q_inner_data_temp">;
  export type P_Q_inner_d<
    K extends keyof _P_Q_inner_d = keyof _P_Q_inner_d
  > = ToUnderscore<_P_Q_inner_d, K>;
  export type _P_Q_inner_d = {
    "mt.p_q_inner_data_temp_dc": {
      pq: BufferSource;                       // bytes
      p: BufferSource;                        // bytes
      q: BufferSource;                        // bytes
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce: Uint8Array;                  // int256
      dc: number;                             // int
      expires_in: number;                     // int
    },
  };

  export const p_q_inner_data_temp_dc: TLConstructor<_P_Q_inner_d, "mt.p_q_inner_data_temp_dc">;
  export type Server_DH_Params<
    K extends keyof _Server_DH_Params = keyof _Server_DH_Params
  > = ToUnderscore<_Server_DH_Params, K>;
  export type _Server_DH_Params = {
    "mt.server_DH_params_fail": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce_hash: Uint8Array;             // int128
    },
    "mt.server_DH_params_ok": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      encrypted_answer: BufferSource;         // bytes
    },
  };

  export const server_DH_params_fail: TLConstructor<_Server_DH_Params, "mt.server_DH_params_fail">;
  export const server_DH_params_ok: TLConstructor<_Server_DH_Params, "mt.server_DH_params_ok">;
  export type Server_DH_inner_data<
    K extends keyof _Server_DH_inner_data = keyof _Server_DH_inner_data
  > = ToUnderscore<_Server_DH_inner_data, K>;
  export type _Server_DH_inner_data = {
    "mt.server_DH_inner_data": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      g: number;                              // int
      dh_prime: BufferSource;                 // bytes
      g_a: BufferSource;                      // bytes
      server_time: number;                    // int
    },
  };

  export const server_DH_inner_data: TLConstructor<_Server_DH_inner_data, "mt.server_DH_inner_data">;
  export type Client_DH_Inner_Data<
    K extends keyof _Client_DH_Inner_Data = keyof _Client_DH_Inner_Data
  > = ToUnderscore<_Client_DH_Inner_Data, K>;
  export type _Client_DH_Inner_Data = {
    "mt.client_DH_inner_data": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      retry_id: bigint;                       // long
      g_b: BufferSource;                      // bytes
    },
  };

  export const client_DH_inner_data: TLConstructor<_Client_DH_Inner_Data, "mt.client_DH_inner_data">;
  export type Set_client_DH_params_answer<
    K extends keyof _Set_client_DH_params_answer = keyof _Set_client_DH_params_answer
  > = ToUnderscore<_Set_client_DH_params_answer, K>;
  export type _Set_client_DH_params_answer = {
    "mt.dh_gen_ok": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce_hash1: Uint8Array;            // int128
    },
    "mt.dh_gen_retry": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce_hash2: Uint8Array;            // int128
    },
    "mt.dh_gen_fail": {
      nonce: Uint8Array;                      // int128
      server_nonce: Uint8Array;               // int128
      new_nonce_hash3: Uint8Array;            // int128
    },
  };

  export const dh_gen_ok: TLConstructor<_Set_client_DH_params_answer, "mt.dh_gen_ok">;
  export const dh_gen_retry: TLConstructor<_Set_client_DH_params_answer, "mt.dh_gen_retry">;
  export const dh_gen_fail: TLConstructor<_Set_client_DH_params_answer, "mt.dh_gen_fail">;
  export type RpcResult<
    K extends keyof _RpcResult = keyof _RpcResult
  > = ToUnderscore<_RpcResult, K>;
  export type _RpcResult = {
    "mt.rpc_result": {
      req_msg_id: bigint;                     // long
      result: AnyObject;                      // mt.Object
    },
  };

  export const rpc_result: TLConstructor<_RpcResult, "mt.rpc_result">;
  export type RpcError<
    K extends keyof _RpcError = keyof _RpcError
  > = ToUnderscore<_RpcError, K>;
  export type _RpcError = {
    "mt.rpc_error": {
      error_code: number;                     // int
      error_message: string;                  // string
    },
  };

  export const rpc_error: TLConstructor<_RpcError, "mt.rpc_error">;
  export type RpcDropAnswer<
    K extends keyof _RpcDropAnswer = keyof _RpcDropAnswer
  > = ToUnderscore<_RpcDropAnswer, K>;
  export type _RpcDropAnswer = {
    "mt.rpc_answer_unknown": {}
    "mt.rpc_answer_dropped_running": {}
    "mt.rpc_answer_dropped": {
      msg_id: bigint;                         // long
      seq_no: number;                         // int
      bytes: number;                          // int
    },
  };

  export const rpc_answer_unknown: TLConstructorEmpty<"mt.rpc_answer_unknown">;
  export const rpc_answer_dropped_running: TLConstructorEmpty<"mt.rpc_answer_dropped_running">;
  export const rpc_answer_dropped: TLConstructor<_RpcDropAnswer, "mt.rpc_answer_dropped">;
  export type FutureSalt<
    K extends keyof _FutureSalt = keyof _FutureSalt
  > = ToUnderscore<_FutureSalt, K>;
  export type _FutureSalt = {
    "mt.future_salt": {
      valid_since: number;                    // int
      valid_until: number;                    // int
      salt: bigint;                           // long
    },
  };

  export const future_salt: TLConstructor<_FutureSalt, "mt.future_salt">;
  export type FutureSalts<
    K extends keyof _FutureSalts = keyof _FutureSalts
  > = ToUnderscore<_FutureSalts, K>;
  export type _FutureSalts = {
    "mt.future_salts": {
      req_msg_id: bigint;                     // long
      now: number;                            // int
      salts: mt.FutureSalt[];                 // vector<mt.FutureSalt>
    },
  };

  export const future_salts: TLConstructor<_FutureSalts, "mt.future_salts">;
  export type Pong<
    K extends keyof _Pong = keyof _Pong
  > = ToUnderscore<_Pong, K>;
  export type _Pong = {
    "mt.pong": {
      msg_id: bigint;                         // long
      ping_id: bigint;                        // long
    },
  };

  export const pong: TLConstructor<_Pong, "mt.pong">;
  export type NewSession<
    K extends keyof _NewSession = keyof _NewSession
  > = ToUnderscore<_NewSession, K>;
  export type _NewSession = {
    "mt.new_session_created": {
      first_msg_id: bigint;                   // long
      unique_id: bigint;                      // long
      server_salt: bigint;                    // long
    },
  };

  export const new_session_created: TLConstructor<_NewSession, "mt.new_session_created">;
  export type MessageContainer<
    K extends keyof _MessageContainer = keyof _MessageContainer
  > = ToUnderscore<_MessageContainer, K>;
  export type _MessageContainer = {
    "mt.msg_container": {
      messages: mt.Message[];                 // vector<%mt.Message>
    },
  };

  export const msg_container: TLConstructor<_MessageContainer, "mt.msg_container">;
  export type Message<
    K extends keyof _Message = keyof _Message
  > = ToUnderscore<_Message, K>;
  export type _Message = {
    "mt.message": {
      msg_id: bigint;                         // long
      seqno: number;                          // int
      bytes: number;                          // int
      body: AnyObject;                        // mt.Object
    },
  };

  export const message: TLConstructor<_Message, "mt.message">;
  export type MessageCopy<
    K extends keyof _MessageCopy = keyof _MessageCopy
  > = ToUnderscore<_MessageCopy, K>;
  export type _MessageCopy = {
    "mt.msg_copy": {
      orig_message: mt.Message;               // mt.Message
    },
  };

  export const msg_copy: TLConstructor<_MessageCopy, "mt.msg_copy">;
  export type Object<
    K extends keyof _Object = keyof _Object
  > = ToUnderscore<_Object, K>;
  export type _Object = {
    "mt.gzip_packed": {
      packed_data: BufferSource;              // bytes
    },
  };

  export const gzip_packed: TLConstructor<_Object, "mt.gzip_packed">;
  export type MsgsAck<
    K extends keyof _MsgsAck = keyof _MsgsAck
  > = ToUnderscore<_MsgsAck, K>;
  export type _MsgsAck = {
    "mt.msgs_ack": {
      msg_ids: bigint[];                      // Vector<long>
    },
  };

  export const msgs_ack: TLConstructor<_MsgsAck, "mt.msgs_ack">;
  export type BadMsgNotification<
    K extends keyof _BadMsgNotification = keyof _BadMsgNotification
  > = ToUnderscore<_BadMsgNotification, K>;
  export type _BadMsgNotification = {
    "mt.bad_msg_notification": {
      bad_msg_id: bigint;                     // long
      bad_msg_seqno: number;                  // int
      error_code: number;                     // int
    },
    "mt.bad_server_salt": {
      bad_msg_id: bigint;                     // long
      bad_msg_seqno: number;                  // int
      error_code: number;                     // int
      new_server_salt: bigint;                // long
    },
  };

  export const bad_msg_notification: TLConstructor<_BadMsgNotification, "mt.bad_msg_notification">;
  export const bad_server_salt: TLConstructor<_BadMsgNotification, "mt.bad_server_salt">;
  export type MsgResendReq<
    K extends keyof _MsgResendReq = keyof _MsgResendReq
  > = ToUnderscore<_MsgResendReq, K>;
  export type _MsgResendReq = {
    "mt.msg_resend_req": {
      msg_ids: bigint[];                      // Vector<long>
    },
    "mt.msg_resend_ans_req": {
      msg_ids: bigint[];                      // Vector<long>
    },
  };

  export const msg_resend_req: TLConstructor<_MsgResendReq, "mt.msg_resend_req">;
  export const msg_resend_ans_req: TLConstructor<_MsgResendReq, "mt.msg_resend_ans_req">;
  export type MsgsStateReq<
    K extends keyof _MsgsStateReq = keyof _MsgsStateReq
  > = ToUnderscore<_MsgsStateReq, K>;
  export type _MsgsStateReq = {
    "mt.msgs_state_req": {
      msg_ids: bigint[];                      // Vector<long>
    },
  };

  export const msgs_state_req: TLConstructor<_MsgsStateReq, "mt.msgs_state_req">;
  export type MsgsStateInfo<
    K extends keyof _MsgsStateInfo = keyof _MsgsStateInfo
  > = ToUnderscore<_MsgsStateInfo, K>;
  export type _MsgsStateInfo = {
    "mt.msgs_state_info": {
      req_msg_id: bigint;                     // long
      info: BufferSource;                     // bytes
    },
  };

  export const msgs_state_info: TLConstructor<_MsgsStateInfo, "mt.msgs_state_info">;
  export type MsgsAllInfo<
    K extends keyof _MsgsAllInfo = keyof _MsgsAllInfo
  > = ToUnderscore<_MsgsAllInfo, K>;
  export type _MsgsAllInfo = {
    "mt.msgs_all_info": {
      msg_ids: bigint[];                      // Vector<long>
      info: BufferSource;                     // bytes
    },
  };

  export const msgs_all_info: TLConstructor<_MsgsAllInfo, "mt.msgs_all_info">;
  export type MsgDetailedInfo<
    K extends keyof _MsgDetailedInfo = keyof _MsgDetailedInfo
  > = ToUnderscore<_MsgDetailedInfo, K>;
  export type _MsgDetailedInfo = {
    "mt.msg_detailed_info": {
      msg_id: bigint;                         // long
      answer_msg_id: bigint;                  // long
      bytes: number;                          // int
      status: number;                         // int
    },
    "mt.msg_new_detailed_info": {
      answer_msg_id: bigint;                  // long
      bytes: number;                          // int
      status: number;                         // int
    },
  };

  export const msg_detailed_info: TLConstructor<_MsgDetailedInfo, "mt.msg_detailed_info">;
  export const msg_new_detailed_info: TLConstructor<_MsgDetailedInfo, "mt.msg_new_detailed_info">;
  export type BindAuthKeyInner<
    K extends keyof _BindAuthKeyInner = keyof _BindAuthKeyInner
  > = ToUnderscore<_BindAuthKeyInner, K>;
  export type _BindAuthKeyInner = {
    "mt.bind_auth_key_inner": {
      nonce: bigint;                          // long
      temp_auth_key_id: bigint;               // long
      perm_auth_key_id: bigint;               // long
      temp_session_id: bigint;                // long
      expires_at: number;                     // int
    },
  };

  export const bind_auth_key_inner: TLConstructor<_BindAuthKeyInner, "mt.bind_auth_key_inner">;
  export type DestroyAuthKeyRes<
    K extends keyof _DestroyAuthKeyRes = keyof _DestroyAuthKeyRes
  > = ToUnderscore<_DestroyAuthKeyRes, K>;
  export type _DestroyAuthKeyRes = {
    "mt.destroy_auth_key_ok": {}
    "mt.destroy_auth_key_none": {}
    "mt.destroy_auth_key_fail": {}
  };

  export const destroy_auth_key_ok: TLConstructorEmpty<"mt.destroy_auth_key_ok">;
  export const destroy_auth_key_none: TLConstructorEmpty<"mt.destroy_auth_key_none">;
  export const destroy_auth_key_fail: TLConstructorEmpty<"mt.destroy_auth_key_fail">;
  export type DestroySessionRes<
    K extends keyof _DestroySessionRes = keyof _DestroySessionRes
  > = ToUnderscore<_DestroySessionRes, K>;
  export type _DestroySessionRes = {
    "mt.destroy_session_ok": {
      session_id: bigint;                     // long
    },
    "mt.destroy_session_none": {
      session_id: bigint;                     // long
    },
  };

  export const destroy_session_ok: TLConstructor<_DestroySessionRes, "mt.destroy_session_ok">;
  export const destroy_session_none: TLConstructor<_DestroySessionRes, "mt.destroy_session_none">;
}

declare namespace global {
  export type InputPeer<
    K extends keyof _InputPeer = keyof _InputPeer
  > = ToUnderscore<_InputPeer, K>;
  export type _InputPeer = {
    "inputPeerEmpty": {}
    "inputPeerSelf": {}
    "inputPeerChat": {
      chat_id: bigint;                        // long
    },
    "inputPeerUser": {
      user_id: bigint;                        // long
      access_hash: bigint;                    // long
    },
    "inputPeerChannel": {
      channel_id: bigint;                     // long
      access_hash: bigint;                    // long
    },
    "inputPeerUserFromMessage": {
      peer: global.InputPeer;                 // InputPeer
      msg_id: number;                         // int
      user_id: bigint;                        // long
    },
    "inputPeerChannelFromMessage": {
      peer: global.InputPeer;                 // InputPeer
      msg_id: number;                         // int
      channel_id: bigint;                     // long
    },
  };

  export const inputPeerEmpty: TLConstructorEmpty<"inputPeerEmpty">;
  export const inputPeerSelf: TLConstructorEmpty<"inputPeerSelf">;
  export const inputPeerChat: TLConstructor<_InputPeer, "inputPeerChat">;
  export const inputPeerUser: TLConstructor<_InputPeer, "inputPeerUser">;
  export const inputPeerChannel: TLConstructor<_InputPeer, "inputPeerChannel">;
  export const inputPeerUserFromMessage: TLConstructor<_InputPeer, "inputPeerUserFromMessage">;
  export const inputPeerChannelFromMessage: TLConstructor<_InputPeer, "inputPeerChannelFromMessage">;
  export type InputUser<
    K extends keyof _InputUser = keyof _InputUser
  > = ToUnderscore<_InputUser, K>;
  export type _InputUser = {
    "inputUserEmpty": {}
    "inputUserSelf": {}
    "inputUser": {
      user_id: bigint;                        // long
      access_hash: bigint;                    // long
    },
    "inputUserFromMessage": {
      peer: global.InputPeer;                 // InputPeer
      msg_id: number;                         // int
      user_id: bigint;                        // long
    },
  };

  export const inputUserEmpty: TLConstructorEmpty<"inputUserEmpty">;
  export const inputUserSelf: TLConstructorEmpty<"inputUserSelf">;
  export const inputUser: TLConstructor<_InputUser, "inputUser">;
  export const inputUserFromMessage: TLConstructor<_InputUser, "inputUserFromMessage">;
  export type InputContact<
    K extends keyof _InputContact = keyof _InputContact
  > = ToUnderscore<_InputContact, K>;
  export type _InputContact = {
    "inputPhoneContact": {
      client_id: bigint;                      // long
      phone: string;                          // string
      first_name: string;                     // string
      last_name: string;                      // string
    },
  };

  export const inputPhoneContact: TLConstructor<_InputContact, "inputPhoneContact">;
  export type InputFile<
    K extends keyof _InputFile = keyof _InputFile
  > = ToUnderscore<_InputFile, K>;
  export type _InputFile = {
    "inputFile": {
      id: bigint;                             // long
      parts: number;                          // int
      name: string;                           // string
      md5_checksum: string;                   // string
    },
    "inputFileBig": {
      id: bigint;                             // long
      parts: number;                          // int
      name: string;                           // string
    },
  };

  export const inputFile: TLConstructor<_InputFile, "inputFile">;
  export const inputFileBig: TLConstructor<_InputFile, "inputFileBig">;
  export type InputMedia<
    K extends keyof _InputMedia = keyof _InputMedia
  > = ToUnderscore<_InputMedia, K>;
  export type _InputMedia = {
    "inputMediaEmpty": {}
    "inputMediaUploadedPhoto": {
      file: global.InputFile;                 // InputFile
      stickers?: global.InputDocument[];      // flags.0?Vector<InputDocument>
      ttl_seconds?: number;                   // flags.1?int
    },
    "inputMediaPhoto": {
      id: global.InputPhoto;                  // InputPhoto
      ttl_seconds?: number;                   // flags.0?int
    },
    "inputMediaGeoPoint": {
      geo_point: global.InputGeoPoint;        // InputGeoPoint
    },
    "inputMediaContact": {
      phone_number: string;                   // string
      first_name: string;                     // string
      last_name: string;                      // string
      vcard: string;                          // string
    },
    "inputMediaUploadedDocument": {
      nosound_video?: true;                   // flags.3?true
      force_file?: true;                      // flags.4?true
      file: global.InputFile;                 // InputFile
      thumb?: global.InputFile;               // flags.2?InputFile
      mime_type: string;                      // string
      attributes: global.DocumentAttribute[]; // Vector<DocumentAttribute>
      stickers?: global.InputDocument[];      // flags.0?Vector<InputDocument>
      ttl_seconds?: number;                   // flags.1?int
    },
    "inputMediaDocument": {
      id: global.InputDocument;               // InputDocument
      ttl_seconds?: number;                   // flags.0?int
      query?: string;                         // flags.1?string
    },
    "inputMediaVenue": {
      geo_point: global.InputGeoPoint;        // InputGeoPoint
      title: string;                          // string
      address: string;                        // string
      provider: string;                       // string
      venue_id: string;                       // string
      venue_type: string;                     // string
    },
    "inputMediaPhotoExternal": {
      url: string;                            // string
      ttl_seconds?: number;                   // flags.0?int
    },
    "inputMediaDocumentExternal": {
      url: string;                            // string
      ttl_seconds?: number;                   // flags.0?int
    },
    "inputMediaGame": {
      id: global.InputGame;                   // InputGame
    },
    "inputMediaInvoice": {
      title: string;                          // string
      description: string;                    // string
      photo?: global.InputWebDocument;        // flags.0?InputWebDocument
      invoice: global.Invoice;                // Invoice
      payload: BufferSource;                  // bytes
      provider: string;                       // string
      provider_data: global.DataJSON;         // DataJSON
      start_param?: string;                   // flags.1?string
    },
    "inputMediaGeoLive": {
      stopped?: true;                         // flags.0?true
      geo_point: global.InputGeoPoint;        // InputGeoPoint
      heading?: number;                       // flags.2?int
      period?: number;                        // flags.1?int
      proximity_notification_radius?: number; // flags.3?int
    },
    "inputMediaPoll": {
      poll: global.Poll;                      // Poll
      correct_answers?: BufferSource[];       // flags.0?Vector<bytes>
      solution?: string;                      // flags.1?string
      solution_entities?: global.MessageEntity[]; // flags.1?Vector<MessageEntity>
    },
    "inputMediaDice": {
      emoticon: string;                       // string
    },
  };

  export const inputMediaEmpty: TLConstructorEmpty<"inputMediaEmpty">;
  export const inputMediaUploadedPhoto: TLConstructor<_InputMedia, "inputMediaUploadedPhoto">;
  export const inputMediaPhoto: TLConstructor<_InputMedia, "inputMediaPhoto">;
  export const inputMediaGeoPoint: TLConstructor<_InputMedia, "inputMediaGeoPoint">;
  export const inputMediaContact: TLConstructor<_InputMedia, "inputMediaContact">;
  export const inputMediaUploadedDocument: TLConstructor<_InputMedia, "inputMediaUploadedDocument">;
  export const inputMediaDocument: TLConstructor<_InputMedia, "inputMediaDocument">;
  export const inputMediaVenue: TLConstructor<_InputMedia, "inputMediaVenue">;
  export const inputMediaPhotoExternal: TLConstructor<_InputMedia, "inputMediaPhotoExternal">;
  export const inputMediaDocumentExternal: TLConstructor<_InputMedia, "inputMediaDocumentExternal">;
  export const inputMediaGame: TLConstructor<_InputMedia, "inputMediaGame">;
  export const inputMediaInvoice: TLConstructor<_InputMedia, "inputMediaInvoice">;
  export const inputMediaGeoLive: TLConstructor<_InputMedia, "inputMediaGeoLive">;
  export const inputMediaPoll: TLConstructor<_InputMedia, "inputMediaPoll">;
  export const inputMediaDice: TLConstructor<_InputMedia, "inputMediaDice">;
  export type InputChatPhoto<
    K extends keyof _InputChatPhoto = keyof _InputChatPhoto
  > = ToUnderscore<_InputChatPhoto, K>;
  export type _InputChatPhoto = {
    "inputChatPhotoEmpty": {}
    "inputChatUploadedPhoto": {
      file?: global.InputFile;                // flags.0?InputFile
      video?: global.InputFile;               // flags.1?InputFile
      video_start_ts?: number;                // flags.2?double
    },
    "inputChatPhoto": {
      id: global.InputPhoto;                  // InputPhoto
    },
  };

  export const inputChatPhotoEmpty: TLConstructorEmpty<"inputChatPhotoEmpty">;
  export const inputChatUploadedPhoto: TLConstructor<_InputChatPhoto, "inputChatUploadedPhoto">;
  export const inputChatPhoto: TLConstructor<_InputChatPhoto, "inputChatPhoto">;
  export type InputGeoPoint<
    K extends keyof _InputGeoPoint = keyof _InputGeoPoint
  > = ToUnderscore<_InputGeoPoint, K>;
  export type _InputGeoPoint = {
    "inputGeoPointEmpty": {}
    "inputGeoPoint": {
      lat: number;                            // double
      long: number;                           // double
      accuracy_radius?: number;               // flags.0?int
    },
  };

  export const inputGeoPointEmpty: TLConstructorEmpty<"inputGeoPointEmpty">;
  export const inputGeoPoint: TLConstructor<_InputGeoPoint, "inputGeoPoint">;
  export type InputPhoto<
    K extends keyof _InputPhoto = keyof _InputPhoto
  > = ToUnderscore<_InputPhoto, K>;
  export type _InputPhoto = {
    "inputPhotoEmpty": {}
    "inputPhoto": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      file_reference: BufferSource;           // bytes
    },
  };

  export const inputPhotoEmpty: TLConstructorEmpty<"inputPhotoEmpty">;
  export const inputPhoto: TLConstructor<_InputPhoto, "inputPhoto">;
  export type InputFileLocation<
    K extends keyof _InputFileLocation = keyof _InputFileLocation
  > = ToUnderscore<_InputFileLocation, K>;
  export type _InputFileLocation = {
    "inputFileLocation": {
      volume_id: bigint;                      // long
      local_id: number;                       // int
      secret: bigint;                         // long
      file_reference: BufferSource;           // bytes
    },
    "inputEncryptedFileLocation": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputDocumentFileLocation": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      file_reference: BufferSource;           // bytes
      thumb_size: string;                     // string
    },
    "inputSecureFileLocation": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputTakeoutFileLocation": {}
    "inputPhotoFileLocation": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      file_reference: BufferSource;           // bytes
      thumb_size: string;                     // string
    },
    "inputPhotoLegacyFileLocation": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      file_reference: BufferSource;           // bytes
      volume_id: bigint;                      // long
      local_id: number;                       // int
      secret: bigint;                         // long
    },
    "inputPeerPhotoFileLocation": {
      big?: true;                             // flags.0?true
      peer: global.InputPeer;                 // InputPeer
      photo_id: bigint;                       // long
    },
    "inputStickerSetThumb": {
      stickerset: global.InputStickerSet;     // InputStickerSet
      thumb_version: number;                  // int
    },
    "inputGroupCallStream": {
      call: global.InputGroupCall;            // InputGroupCall
      time_ms: bigint;                        // long
      scale: number;                          // int
      video_channel?: number;                 // flags.0?int
      video_quality?: number;                 // flags.0?int
    },
  };

  export const inputFileLocation: TLConstructor<_InputFileLocation, "inputFileLocation">;
  export const inputEncryptedFileLocation: TLConstructor<_InputFileLocation, "inputEncryptedFileLocation">;
  export const inputDocumentFileLocation: TLConstructor<_InputFileLocation, "inputDocumentFileLocation">;
  export const inputSecureFileLocation: TLConstructor<_InputFileLocation, "inputSecureFileLocation">;
  export const inputTakeoutFileLocation: TLConstructorEmpty<"inputTakeoutFileLocation">;
  export const inputPhotoFileLocation: TLConstructor<_InputFileLocation, "inputPhotoFileLocation">;
  export const inputPhotoLegacyFileLocation: TLConstructor<_InputFileLocation, "inputPhotoLegacyFileLocation">;
  export const inputPeerPhotoFileLocation: TLConstructor<_InputFileLocation, "inputPeerPhotoFileLocation">;
  export const inputStickerSetThumb: TLConstructor<_InputFileLocation, "inputStickerSetThumb">;
  export const inputGroupCallStream: TLConstructor<_InputFileLocation, "inputGroupCallStream">;
  export type Peer<
    K extends keyof _Peer = keyof _Peer
  > = ToUnderscore<_Peer, K>;
  export type _Peer = {
    "peerUser": {
      user_id: bigint;                        // long
    },
    "peerChat": {
      chat_id: bigint;                        // long
    },
    "peerChannel": {
      channel_id: bigint;                     // long
    },
  };

  export const peerUser: TLConstructor<_Peer, "peerUser">;
  export const peerChat: TLConstructor<_Peer, "peerChat">;
  export const peerChannel: TLConstructor<_Peer, "peerChannel">;
  export type User<
    K extends keyof _User = keyof _User
  > = ToUnderscore<_User, K>;
  export type _User = {
    "userEmpty": {
      id: bigint;                             // long
    },
    "user": {
      self?: true;                            // flags.10?true
      contact?: true;                         // flags.11?true
      mutual_contact?: true;                  // flags.12?true
      deleted?: true;                         // flags.13?true
      bot?: true;                             // flags.14?true
      bot_chat_history?: true;                // flags.15?true
      bot_nochats?: true;                     // flags.16?true
      verified?: true;                        // flags.17?true
      restricted?: true;                      // flags.18?true
      min?: true;                             // flags.20?true
      bot_inline_geo?: true;                  // flags.21?true
      support?: true;                         // flags.23?true
      scam?: true;                            // flags.24?true
      apply_min_photo?: true;                 // flags.25?true
      fake?: true;                            // flags.26?true
      id: bigint;                             // long
      access_hash?: bigint;                   // flags.0?long
      first_name?: string;                    // flags.1?string
      last_name?: string;                     // flags.2?string
      username?: string;                      // flags.3?string
      phone?: string;                         // flags.4?string
      photo?: global.UserProfilePhoto;        // flags.5?UserProfilePhoto
      status?: global.UserStatus;             // flags.6?UserStatus
      bot_info_version?: number;              // flags.14?int
      restriction_reason?: global.RestrictionReason[]; // flags.18?Vector<RestrictionReason>
      bot_inline_placeholder?: string;        // flags.19?string
      lang_code?: string;                     // flags.22?string
    },
  };

  export const userEmpty: TLConstructor<_User, "userEmpty">;
  export const user: TLConstructor<_User, "user">;
  export type UserProfilePhoto<
    K extends keyof _UserProfilePhoto = keyof _UserProfilePhoto
  > = ToUnderscore<_UserProfilePhoto, K>;
  export type _UserProfilePhoto = {
    "userProfilePhotoEmpty": {}
    "userProfilePhoto": {
      has_video?: true;                       // flags.0?true
      photo_id: bigint;                       // long
      stripped_thumb?: BufferSource;          // flags.1?bytes
      dc_id: number;                          // int
    },
  };

  export const userProfilePhotoEmpty: TLConstructorEmpty<"userProfilePhotoEmpty">;
  export const userProfilePhoto: TLConstructor<_UserProfilePhoto, "userProfilePhoto">;
  export type UserStatus<
    K extends keyof _UserStatus = keyof _UserStatus
  > = ToUnderscore<_UserStatus, K>;
  export type _UserStatus = {
    "userStatusEmpty": {}
    "userStatusOnline": {
      expires: number;                        // int
    },
    "userStatusOffline": {
      was_online: number;                     // int
    },
    "userStatusRecently": {}
    "userStatusLastWeek": {}
    "userStatusLastMonth": {}
  };

  export const userStatusEmpty: TLConstructorEmpty<"userStatusEmpty">;
  export const userStatusOnline: TLConstructor<_UserStatus, "userStatusOnline">;
  export const userStatusOffline: TLConstructor<_UserStatus, "userStatusOffline">;
  export const userStatusRecently: TLConstructorEmpty<"userStatusRecently">;
  export const userStatusLastWeek: TLConstructorEmpty<"userStatusLastWeek">;
  export const userStatusLastMonth: TLConstructorEmpty<"userStatusLastMonth">;
  export type Chat<
    K extends keyof _Chat = keyof _Chat
  > = ToUnderscore<_Chat, K>;
  export type _Chat = {
    "chatEmpty": {
      id: bigint;                             // long
    },
    "chat": {
      creator?: true;                         // flags.0?true
      left?: true;                            // flags.2?true
      deactivated?: true;                     // flags.5?true
      call_active?: true;                     // flags.23?true
      call_not_empty?: true;                  // flags.24?true
      noforwards?: true;                      // flags.25?true
      id: bigint;                             // long
      title: string;                          // string
      photo: global.ChatPhoto;                // ChatPhoto
      participants_count: number;             // int
      date: number;                           // int
      version: number;                        // int
      migrated_to?: global.InputChannel;      // flags.6?InputChannel
      admin_rights?: global.ChatAdminRights;  // flags.14?ChatAdminRights
      default_banned_rights?: global.ChatBannedRights; // flags.18?ChatBannedRights
    },
    "chatForbidden": {
      id: bigint;                             // long
      title: string;                          // string
    },
    "channel": {
      creator?: true;                         // flags.0?true
      left?: true;                            // flags.2?true
      broadcast?: true;                       // flags.5?true
      verified?: true;                        // flags.7?true
      megagroup?: true;                       // flags.8?true
      restricted?: true;                      // flags.9?true
      signatures?: true;                      // flags.11?true
      min?: true;                             // flags.12?true
      scam?: true;                            // flags.19?true
      has_link?: true;                        // flags.20?true
      has_geo?: true;                         // flags.21?true
      slowmode_enabled?: true;                // flags.22?true
      call_active?: true;                     // flags.23?true
      call_not_empty?: true;                  // flags.24?true
      fake?: true;                            // flags.25?true
      gigagroup?: true;                       // flags.26?true
      noforwards?: true;                      // flags.27?true
      join_to_send?: true;                    // flags.28?true
      join_request?: true;                    // flags.29?true
      id: bigint;                             // long
      access_hash?: bigint;                   // flags.13?long
      title: string;                          // string
      username?: string;                      // flags.6?string
      photo: global.ChatPhoto;                // ChatPhoto
      date: number;                           // int
      restriction_reason?: global.RestrictionReason[]; // flags.9?Vector<RestrictionReason>
      admin_rights?: global.ChatAdminRights;  // flags.14?ChatAdminRights
      banned_rights?: global.ChatBannedRights; // flags.15?ChatBannedRights
      default_banned_rights?: global.ChatBannedRights; // flags.18?ChatBannedRights
      participants_count?: number;            // flags.17?int
    },
    "channelForbidden": {
      broadcast?: true;                       // flags.5?true
      megagroup?: true;                       // flags.8?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      title: string;                          // string
      until_date?: number;                    // flags.16?int
    },
  };

  export const chatEmpty: TLConstructor<_Chat, "chatEmpty">;
  export const chat: TLConstructor<_Chat, "chat">;
  export const chatForbidden: TLConstructor<_Chat, "chatForbidden">;
  export const channel: TLConstructor<_Chat, "channel">;
  export const channelForbidden: TLConstructor<_Chat, "channelForbidden">;
  export type ChatFull<
    K extends keyof _ChatFull = keyof _ChatFull
  > = ToUnderscore<_ChatFull, K>;
  export type _ChatFull = {
    "chatFull": {
      can_set_username?: true;                // flags.7?true
      has_scheduled?: true;                   // flags.8?true
      id: bigint;                             // long
      about: string;                          // string
      participants: global.ChatParticipants;  // ChatParticipants
      chat_photo?: global.Photo;              // flags.2?Photo
      notify_settings: global.PeerNotifySettings; // PeerNotifySettings
      exported_invite?: global.ExportedChatInvite; // flags.13?ExportedChatInvite
      bot_info?: global.BotInfo[];            // flags.3?Vector<BotInfo>
      pinned_msg_id?: number;                 // flags.6?int
      folder_id?: number;                     // flags.11?int
      call?: global.InputGroupCall;           // flags.12?InputGroupCall
      ttl_period?: number;                    // flags.14?int
      groupcall_default_join_as?: global.Peer; // flags.15?Peer
      theme_emoticon?: string;                // flags.16?string
      requests_pending?: number;              // flags.17?int
      recent_requesters?: bigint[];           // flags.17?Vector<long>
      available_reactions?: string[];         // flags.18?Vector<string>
    },
    "channelFull": {
      can_view_participants?: true;           // flags.3?true
      can_set_username?: true;                // flags.6?true
      can_set_stickers?: true;                // flags.7?true
      hidden_prehistory?: true;               // flags.10?true
      can_set_location?: true;                // flags.16?true
      has_scheduled?: true;                   // flags.19?true
      can_view_stats?: true;                  // flags.20?true
      blocked?: true;                         // flags.22?true
      id: bigint;                             // long
      about: string;                          // string
      participants_count?: number;            // flags.0?int
      admins_count?: number;                  // flags.1?int
      kicked_count?: number;                  // flags.2?int
      banned_count?: number;                  // flags.2?int
      online_count?: number;                  // flags.13?int
      read_inbox_max_id: number;              // int
      read_outbox_max_id: number;             // int
      unread_count: number;                   // int
      chat_photo: global.Photo;               // Photo
      notify_settings: global.PeerNotifySettings; // PeerNotifySettings
      exported_invite?: global.ExportedChatInvite; // flags.23?ExportedChatInvite
      bot_info: global.BotInfo[];             // Vector<BotInfo>
      migrated_from_chat_id?: bigint;         // flags.4?long
      migrated_from_max_id?: number;          // flags.4?int
      pinned_msg_id?: number;                 // flags.5?int
      stickerset?: global.StickerSet;         // flags.8?StickerSet
      available_min_id?: number;              // flags.9?int
      folder_id?: number;                     // flags.11?int
      linked_chat_id?: bigint;                // flags.14?long
      location?: global.ChannelLocation;      // flags.15?ChannelLocation
      slowmode_seconds?: number;              // flags.17?int
      slowmode_next_send_date?: number;       // flags.18?int
      stats_dc?: number;                      // flags.12?int
      pts: number;                            // int
      call?: global.InputGroupCall;           // flags.21?InputGroupCall
      ttl_period?: number;                    // flags.24?int
      pending_suggestions?: string[];         // flags.25?Vector<string>
      groupcall_default_join_as?: global.Peer; // flags.26?Peer
      theme_emoticon?: string;                // flags.27?string
      requests_pending?: number;              // flags.28?int
      recent_requesters?: bigint[];           // flags.28?Vector<long>
      default_send_as?: global.Peer;          // flags.29?Peer
      available_reactions?: string[];         // flags.30?Vector<string>
    },
  };

  export const chatFull: TLConstructor<_ChatFull, "chatFull">;
  export const channelFull: TLConstructor<_ChatFull, "channelFull">;
  export type ChatParticipant<
    K extends keyof _ChatParticipant = keyof _ChatParticipant
  > = ToUnderscore<_ChatParticipant, K>;
  export type _ChatParticipant = {
    "chatParticipant": {
      user_id: bigint;                        // long
      inviter_id: bigint;                     // long
      date: number;                           // int
    },
    "chatParticipantCreator": {
      user_id: bigint;                        // long
    },
    "chatParticipantAdmin": {
      user_id: bigint;                        // long
      inviter_id: bigint;                     // long
      date: number;                           // int
    },
  };

  export const chatParticipant: TLConstructor<_ChatParticipant, "chatParticipant">;
  export const chatParticipantCreator: TLConstructor<_ChatParticipant, "chatParticipantCreator">;
  export const chatParticipantAdmin: TLConstructor<_ChatParticipant, "chatParticipantAdmin">;
  export type ChatParticipants<
    K extends keyof _ChatParticipants = keyof _ChatParticipants
  > = ToUnderscore<_ChatParticipants, K>;
  export type _ChatParticipants = {
    "chatParticipantsForbidden": {
      chat_id: bigint;                        // long
      self_participant?: global.ChatParticipant; // flags.0?ChatParticipant
    },
    "chatParticipants": {
      chat_id: bigint;                        // long
      participants: global.ChatParticipant[]; // Vector<ChatParticipant>
      version: number;                        // int
    },
  };

  export const chatParticipantsForbidden: TLConstructor<_ChatParticipants, "chatParticipantsForbidden">;
  export const chatParticipants: TLConstructor<_ChatParticipants, "chatParticipants">;
  export type ChatPhoto<
    K extends keyof _ChatPhoto = keyof _ChatPhoto
  > = ToUnderscore<_ChatPhoto, K>;
  export type _ChatPhoto = {
    "chatPhotoEmpty": {}
    "chatPhoto": {
      has_video?: true;                       // flags.0?true
      photo_id: bigint;                       // long
      stripped_thumb?: BufferSource;          // flags.1?bytes
      dc_id: number;                          // int
    },
  };

  export const chatPhotoEmpty: TLConstructorEmpty<"chatPhotoEmpty">;
  export const chatPhoto: TLConstructor<_ChatPhoto, "chatPhoto">;
  export type Message<
    K extends keyof _Message = keyof _Message
  > = ToUnderscore<_Message, K>;
  export type _Message = {
    "messageEmpty": {
      id: number;                             // int
      peer_id?: global.Peer;                  // flags.0?Peer
    },
    "message": {
      out?: true;                             // flags.1?true
      mentioned?: true;                       // flags.4?true
      media_unread?: true;                    // flags.5?true
      silent?: true;                          // flags.13?true
      post?: true;                            // flags.14?true
      from_scheduled?: true;                  // flags.18?true
      legacy?: true;                          // flags.19?true
      edit_hide?: true;                       // flags.21?true
      pinned?: true;                          // flags.24?true
      noforwards?: true;                      // flags.26?true
      id: number;                             // int
      from_id?: global.Peer;                  // flags.8?Peer
      peer_id: global.Peer;                   // Peer
      fwd_from?: global.MessageFwdHeader;     // flags.2?MessageFwdHeader
      via_bot_id?: bigint;                    // flags.11?long
      reply_to?: global.MessageReplyHeader;   // flags.3?MessageReplyHeader
      date: number;                           // int
      message: string;                        // string
      media?: global.MessageMedia;            // flags.9?MessageMedia
      reply_markup?: global.ReplyMarkup;      // flags.6?ReplyMarkup
      entities?: global.MessageEntity[];      // flags.7?Vector<MessageEntity>
      views?: number;                         // flags.10?int
      forwards?: number;                      // flags.10?int
      replies?: global.MessageReplies;        // flags.23?MessageReplies
      edit_date?: number;                     // flags.15?int
      post_author?: string;                   // flags.16?string
      grouped_id?: bigint;                    // flags.17?long
      reactions?: global.MessageReactions;    // flags.20?MessageReactions
      restriction_reason?: global.RestrictionReason[]; // flags.22?Vector<RestrictionReason>
      ttl_period?: number;                    // flags.25?int
    },
    "messageService": {
      out?: true;                             // flags.1?true
      mentioned?: true;                       // flags.4?true
      media_unread?: true;                    // flags.5?true
      silent?: true;                          // flags.13?true
      post?: true;                            // flags.14?true
      legacy?: true;                          // flags.19?true
      id: number;                             // int
      from_id?: global.Peer;                  // flags.8?Peer
      peer_id: global.Peer;                   // Peer
      reply_to?: global.MessageReplyHeader;   // flags.3?MessageReplyHeader
      date: number;                           // int
      action: global.MessageAction;           // MessageAction
      ttl_period?: number;                    // flags.25?int
    },
  };

  export const messageEmpty: TLConstructor<_Message, "messageEmpty">;
  export const message: TLConstructor<_Message, "message">;
  export const messageService: TLConstructor<_Message, "messageService">;
  export type MessageMedia<
    K extends keyof _MessageMedia = keyof _MessageMedia
  > = ToUnderscore<_MessageMedia, K>;
  export type _MessageMedia = {
    "messageMediaEmpty": {}
    "messageMediaPhoto": {
      photo?: global.Photo;                   // flags.0?Photo
      ttl_seconds?: number;                   // flags.2?int
    },
    "messageMediaGeo": {
      geo: global.GeoPoint;                   // GeoPoint
    },
    "messageMediaContact": {
      phone_number: string;                   // string
      first_name: string;                     // string
      last_name: string;                      // string
      vcard: string;                          // string
      user_id: bigint;                        // long
    },
    "messageMediaUnsupported": {}
    "messageMediaDocument": {
      document?: global.Document;             // flags.0?Document
      ttl_seconds?: number;                   // flags.2?int
    },
    "messageMediaWebPage": {
      webpage: global.WebPage;                // WebPage
    },
    "messageMediaVenue": {
      geo: global.GeoPoint;                   // GeoPoint
      title: string;                          // string
      address: string;                        // string
      provider: string;                       // string
      venue_id: string;                       // string
      venue_type: string;                     // string
    },
    "messageMediaGame": {
      game: global.Game;                      // Game
    },
    "messageMediaInvoice": {
      shipping_address_requested?: true;      // flags.1?true
      test?: true;                            // flags.3?true
      title: string;                          // string
      description: string;                    // string
      photo?: global.WebDocument;             // flags.0?WebDocument
      receipt_msg_id?: number;                // flags.2?int
      currency: string;                       // string
      total_amount: bigint;                   // long
      start_param: string;                    // string
    },
    "messageMediaGeoLive": {
      geo: global.GeoPoint;                   // GeoPoint
      heading?: number;                       // flags.0?int
      period: number;                         // int
      proximity_notification_radius?: number; // flags.1?int
    },
    "messageMediaPoll": {
      poll: global.Poll;                      // Poll
      results: global.PollResults;            // PollResults
    },
    "messageMediaDice": {
      value: number;                          // int
      emoticon: string;                       // string
    },
  };

  export const messageMediaEmpty: TLConstructorEmpty<"messageMediaEmpty">;
  export const messageMediaPhoto: TLConstructor<_MessageMedia, "messageMediaPhoto">;
  export const messageMediaGeo: TLConstructor<_MessageMedia, "messageMediaGeo">;
  export const messageMediaContact: TLConstructor<_MessageMedia, "messageMediaContact">;
  export const messageMediaUnsupported: TLConstructorEmpty<"messageMediaUnsupported">;
  export const messageMediaDocument: TLConstructor<_MessageMedia, "messageMediaDocument">;
  export const messageMediaWebPage: TLConstructor<_MessageMedia, "messageMediaWebPage">;
  export const messageMediaVenue: TLConstructor<_MessageMedia, "messageMediaVenue">;
  export const messageMediaGame: TLConstructor<_MessageMedia, "messageMediaGame">;
  export const messageMediaInvoice: TLConstructor<_MessageMedia, "messageMediaInvoice">;
  export const messageMediaGeoLive: TLConstructor<_MessageMedia, "messageMediaGeoLive">;
  export const messageMediaPoll: TLConstructor<_MessageMedia, "messageMediaPoll">;
  export const messageMediaDice: TLConstructor<_MessageMedia, "messageMediaDice">;
  export type MessageAction<
    K extends keyof _MessageAction = keyof _MessageAction
  > = ToUnderscore<_MessageAction, K>;
  export type _MessageAction = {
    "messageActionEmpty": {}
    "messageActionChatCreate": {
      title: string;                          // string
      users: bigint[];                        // Vector<long>
    },
    "messageActionChatEditTitle": {
      title: string;                          // string
    },
    "messageActionChatEditPhoto": {
      photo: global.Photo;                    // Photo
    },
    "messageActionChatDeletePhoto": {}
    "messageActionChatAddUser": {
      users: bigint[];                        // Vector<long>
    },
    "messageActionChatDeleteUser": {
      user_id: bigint;                        // long
    },
    "messageActionChatJoinedByLink": {
      inviter_id: bigint;                     // long
    },
    "messageActionChannelCreate": {
      title: string;                          // string
    },
    "messageActionChatMigrateTo": {
      channel_id: bigint;                     // long
    },
    "messageActionChannelMigrateFrom": {
      title: string;                          // string
      chat_id: bigint;                        // long
    },
    "messageActionPinMessage": {}
    "messageActionHistoryClear": {}
    "messageActionGameScore": {
      game_id: bigint;                        // long
      score: number;                          // int
    },
    "messageActionPaymentSentMe": {
      currency: string;                       // string
      total_amount: bigint;                   // long
      payload: BufferSource;                  // bytes
      info?: global.PaymentRequestedInfo;     // flags.0?PaymentRequestedInfo
      shipping_option_id?: string;            // flags.1?string
      charge: global.PaymentCharge;           // PaymentCharge
    },
    "messageActionPaymentSent": {
      currency: string;                       // string
      total_amount: bigint;                   // long
    },
    "messageActionPhoneCall": {
      video?: true;                           // flags.2?true
      call_id: bigint;                        // long
      reason?: global.PhoneCallDiscardReason; // flags.0?PhoneCallDiscardReason
      duration?: number;                      // flags.1?int
    },
    "messageActionScreenshotTaken": {}
    "messageActionCustomAction": {
      message: string;                        // string
    },
    "messageActionBotAllowed": {
      domain: string;                         // string
    },
    "messageActionSecureValuesSentMe": {
      values: global.SecureValue[];           // Vector<SecureValue>
      credentials: global.SecureCredentialsEncrypted; // SecureCredentialsEncrypted
    },
    "messageActionSecureValuesSent": {
      types: global.SecureValueType[];        // Vector<SecureValueType>
    },
    "messageActionContactSignUp": {}
    "messageActionGeoProximityReached": {
      from_id: global.Peer;                   // Peer
      to_id: global.Peer;                     // Peer
      distance: number;                       // int
    },
    "messageActionGroupCall": {
      call: global.InputGroupCall;            // InputGroupCall
      duration?: number;                      // flags.0?int
    },
    "messageActionInviteToGroupCall": {
      call: global.InputGroupCall;            // InputGroupCall
      users: bigint[];                        // Vector<long>
    },
    "messageActionSetMessagesTTL": {
      period: number;                         // int
    },
    "messageActionGroupCallScheduled": {
      call: global.InputGroupCall;            // InputGroupCall
      schedule_date: number;                  // int
    },
    "messageActionSetChatTheme": {
      emoticon: string;                       // string
    },
    "messageActionChatJoinedByRequest": {}
  };

  export const messageActionEmpty: TLConstructorEmpty<"messageActionEmpty">;
  export const messageActionChatCreate: TLConstructor<_MessageAction, "messageActionChatCreate">;
  export const messageActionChatEditTitle: TLConstructor<_MessageAction, "messageActionChatEditTitle">;
  export const messageActionChatEditPhoto: TLConstructor<_MessageAction, "messageActionChatEditPhoto">;
  export const messageActionChatDeletePhoto: TLConstructorEmpty<"messageActionChatDeletePhoto">;
  export const messageActionChatAddUser: TLConstructor<_MessageAction, "messageActionChatAddUser">;
  export const messageActionChatDeleteUser: TLConstructor<_MessageAction, "messageActionChatDeleteUser">;
  export const messageActionChatJoinedByLink: TLConstructor<_MessageAction, "messageActionChatJoinedByLink">;
  export const messageActionChannelCreate: TLConstructor<_MessageAction, "messageActionChannelCreate">;
  export const messageActionChatMigrateTo: TLConstructor<_MessageAction, "messageActionChatMigrateTo">;
  export const messageActionChannelMigrateFrom: TLConstructor<_MessageAction, "messageActionChannelMigrateFrom">;
  export const messageActionPinMessage: TLConstructorEmpty<"messageActionPinMessage">;
  export const messageActionHistoryClear: TLConstructorEmpty<"messageActionHistoryClear">;
  export const messageActionGameScore: TLConstructor<_MessageAction, "messageActionGameScore">;
  export const messageActionPaymentSentMe: TLConstructor<_MessageAction, "messageActionPaymentSentMe">;
  export const messageActionPaymentSent: TLConstructor<_MessageAction, "messageActionPaymentSent">;
  export const messageActionPhoneCall: TLConstructor<_MessageAction, "messageActionPhoneCall">;
  export const messageActionScreenshotTaken: TLConstructorEmpty<"messageActionScreenshotTaken">;
  export const messageActionCustomAction: TLConstructor<_MessageAction, "messageActionCustomAction">;
  export const messageActionBotAllowed: TLConstructor<_MessageAction, "messageActionBotAllowed">;
  export const messageActionSecureValuesSentMe: TLConstructor<_MessageAction, "messageActionSecureValuesSentMe">;
  export const messageActionSecureValuesSent: TLConstructor<_MessageAction, "messageActionSecureValuesSent">;
  export const messageActionContactSignUp: TLConstructorEmpty<"messageActionContactSignUp">;
  export const messageActionGeoProximityReached: TLConstructor<_MessageAction, "messageActionGeoProximityReached">;
  export const messageActionGroupCall: TLConstructor<_MessageAction, "messageActionGroupCall">;
  export const messageActionInviteToGroupCall: TLConstructor<_MessageAction, "messageActionInviteToGroupCall">;
  export const messageActionSetMessagesTTL: TLConstructor<_MessageAction, "messageActionSetMessagesTTL">;
  export const messageActionGroupCallScheduled: TLConstructor<_MessageAction, "messageActionGroupCallScheduled">;
  export const messageActionSetChatTheme: TLConstructor<_MessageAction, "messageActionSetChatTheme">;
  export const messageActionChatJoinedByRequest: TLConstructorEmpty<"messageActionChatJoinedByRequest">;
  export type Dialog<
    K extends keyof _Dialog = keyof _Dialog
  > = ToUnderscore<_Dialog, K>;
  export type _Dialog = {
    "dialog": {
      pinned?: true;                          // flags.2?true
      unread_mark?: true;                     // flags.3?true
      peer: global.Peer;                      // Peer
      top_message: number;                    // int
      read_inbox_max_id: number;              // int
      read_outbox_max_id: number;             // int
      unread_count: number;                   // int
      unread_mentions_count: number;          // int
      unread_reactions_count: number;         // int
      notify_settings: global.PeerNotifySettings; // PeerNotifySettings
      pts?: number;                           // flags.0?int
      draft?: global.DraftMessage;            // flags.1?DraftMessage
      folder_id?: number;                     // flags.4?int
    },
    "dialogFolder": {
      pinned?: true;                          // flags.2?true
      folder: global.Folder;                  // Folder
      peer: global.Peer;                      // Peer
      top_message: number;                    // int
      unread_muted_peers_count: number;       // int
      unread_unmuted_peers_count: number;     // int
      unread_muted_messages_count: number;    // int
      unread_unmuted_messages_count: number;  // int
    },
  };

  export const dialog: TLConstructor<_Dialog, "dialog">;
  export const dialogFolder: TLConstructor<_Dialog, "dialogFolder">;
  export type Photo<
    K extends keyof _Photo = keyof _Photo
  > = ToUnderscore<_Photo, K>;
  export type _Photo = {
    "photoEmpty": {
      id: bigint;                             // long
    },
    "photo": {
      has_stickers?: true;                    // flags.0?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      file_reference: BufferSource;           // bytes
      date: number;                           // int
      sizes: global.PhotoSize[];              // Vector<PhotoSize>
      video_sizes?: global.VideoSize[];       // flags.1?Vector<VideoSize>
      dc_id: number;                          // int
    },
  };

  export const photoEmpty: TLConstructor<_Photo, "photoEmpty">;
  export const photo: TLConstructor<_Photo, "photo">;
  export type PhotoSize<
    K extends keyof _PhotoSize = keyof _PhotoSize
  > = ToUnderscore<_PhotoSize, K>;
  export type _PhotoSize = {
    "photoSizeEmpty": {
      type: string;                           // string
    },
    "photoSize": {
      type: string;                           // string
      w: number;                              // int
      h: number;                              // int
      size: number;                           // int
    },
    "photoCachedSize": {
      type: string;                           // string
      w: number;                              // int
      h: number;                              // int
      bytes: BufferSource;                    // bytes
    },
    "photoStrippedSize": {
      type: string;                           // string
      bytes: BufferSource;                    // bytes
    },
    "photoSizeProgressive": {
      type: string;                           // string
      w: number;                              // int
      h: number;                              // int
      sizes: number[];                        // Vector<int>
    },
    "photoPathSize": {
      type: string;                           // string
      bytes: BufferSource;                    // bytes
    },
  };

  export const photoSizeEmpty: TLConstructor<_PhotoSize, "photoSizeEmpty">;
  export const photoSize: TLConstructor<_PhotoSize, "photoSize">;
  export const photoCachedSize: TLConstructor<_PhotoSize, "photoCachedSize">;
  export const photoStrippedSize: TLConstructor<_PhotoSize, "photoStrippedSize">;
  export const photoSizeProgressive: TLConstructor<_PhotoSize, "photoSizeProgressive">;
  export const photoPathSize: TLConstructor<_PhotoSize, "photoPathSize">;
  export type GeoPoint<
    K extends keyof _GeoPoint = keyof _GeoPoint
  > = ToUnderscore<_GeoPoint, K>;
  export type _GeoPoint = {
    "geoPointEmpty": {}
    "geoPoint": {
      long: number;                           // double
      lat: number;                            // double
      access_hash: bigint;                    // long
      accuracy_radius?: number;               // flags.0?int
    },
  };

  export const geoPointEmpty: TLConstructorEmpty<"geoPointEmpty">;
  export const geoPoint: TLConstructor<_GeoPoint, "geoPoint">;
  export type InputNotifyPeer<
    K extends keyof _InputNotifyPeer = keyof _InputNotifyPeer
  > = ToUnderscore<_InputNotifyPeer, K>;
  export type _InputNotifyPeer = {
    "inputNotifyPeer": {
      peer: global.InputPeer;                 // InputPeer
    },
    "inputNotifyUsers": {}
    "inputNotifyChats": {}
    "inputNotifyBroadcasts": {}
  };

  export const inputNotifyPeer: TLConstructor<_InputNotifyPeer, "inputNotifyPeer">;
  export const inputNotifyUsers: TLConstructorEmpty<"inputNotifyUsers">;
  export const inputNotifyChats: TLConstructorEmpty<"inputNotifyChats">;
  export const inputNotifyBroadcasts: TLConstructorEmpty<"inputNotifyBroadcasts">;
  export type InputPeerNotifySettings<
    K extends keyof _InputPeerNotifySettings = keyof _InputPeerNotifySettings
  > = ToUnderscore<_InputPeerNotifySettings, K>;
  export type _InputPeerNotifySettings = {
    "inputPeerNotifySettings": {
      show_previews?: boolean;                // flags.0?Bool
      silent?: boolean;                       // flags.1?Bool
      mute_until?: number;                    // flags.2?int
      sound?: string;                         // flags.3?string
    },
  };

  export const inputPeerNotifySettings: TLConstructor<_InputPeerNotifySettings, "inputPeerNotifySettings">;
  export type PeerNotifySettings<
    K extends keyof _PeerNotifySettings = keyof _PeerNotifySettings
  > = ToUnderscore<_PeerNotifySettings, K>;
  export type _PeerNotifySettings = {
    "peerNotifySettings": {
      show_previews?: boolean;                // flags.0?Bool
      silent?: boolean;                       // flags.1?Bool
      mute_until?: number;                    // flags.2?int
      sound?: string;                         // flags.3?string
    },
  };

  export const peerNotifySettings: TLConstructor<_PeerNotifySettings, "peerNotifySettings">;
  export type PeerSettings<
    K extends keyof _PeerSettings = keyof _PeerSettings
  > = ToUnderscore<_PeerSettings, K>;
  export type _PeerSettings = {
    "peerSettings": {
      report_spam?: true;                     // flags.0?true
      add_contact?: true;                     // flags.1?true
      block_contact?: true;                   // flags.2?true
      share_contact?: true;                   // flags.3?true
      need_contacts_exception?: true;         // flags.4?true
      report_geo?: true;                      // flags.5?true
      autoarchived?: true;                    // flags.7?true
      invite_members?: true;                  // flags.8?true
      request_chat_broadcast?: true;          // flags.10?true
      geo_distance?: number;                  // flags.6?int
      request_chat_title?: string;            // flags.9?string
      request_chat_date?: number;             // flags.9?int
    },
  };

  export const peerSettings: TLConstructor<_PeerSettings, "peerSettings">;
  export type WallPaper<
    K extends keyof _WallPaper = keyof _WallPaper
  > = ToUnderscore<_WallPaper, K>;
  export type _WallPaper = {
    "wallPaper": {
      id: bigint;                             // long
      creator?: true;                         // flags.0?true
      default?: true;                         // flags.1?true
      pattern?: true;                         // flags.3?true
      dark?: true;                            // flags.4?true
      access_hash: bigint;                    // long
      slug: string;                           // string
      document: global.Document;              // Document
      settings?: global.WallPaperSettings;    // flags.2?WallPaperSettings
    },
    "wallPaperNoFile": {
      id: bigint;                             // long
      default?: true;                         // flags.1?true
      dark?: true;                            // flags.4?true
      settings?: global.WallPaperSettings;    // flags.2?WallPaperSettings
    },
  };

  export const wallPaper: TLConstructor<_WallPaper, "wallPaper">;
  export const wallPaperNoFile: TLConstructor<_WallPaper, "wallPaperNoFile">;
  export type ReportReason<
    K extends keyof _ReportReason = keyof _ReportReason
  > = ToUnderscore<_ReportReason, K>;
  export type _ReportReason = {
    "inputReportReasonSpam": {}
    "inputReportReasonViolence": {}
    "inputReportReasonPornography": {}
    "inputReportReasonChildAbuse": {}
    "inputReportReasonOther": {}
    "inputReportReasonCopyright": {}
    "inputReportReasonGeoIrrelevant": {}
    "inputReportReasonFake": {}
    "inputReportReasonIllegalDrugs": {}
    "inputReportReasonPersonalDetails": {}
  };

  export const inputReportReasonSpam: TLConstructorEmpty<"inputReportReasonSpam">;
  export const inputReportReasonViolence: TLConstructorEmpty<"inputReportReasonViolence">;
  export const inputReportReasonPornography: TLConstructorEmpty<"inputReportReasonPornography">;
  export const inputReportReasonChildAbuse: TLConstructorEmpty<"inputReportReasonChildAbuse">;
  export const inputReportReasonOther: TLConstructorEmpty<"inputReportReasonOther">;
  export const inputReportReasonCopyright: TLConstructorEmpty<"inputReportReasonCopyright">;
  export const inputReportReasonGeoIrrelevant: TLConstructorEmpty<"inputReportReasonGeoIrrelevant">;
  export const inputReportReasonFake: TLConstructorEmpty<"inputReportReasonFake">;
  export const inputReportReasonIllegalDrugs: TLConstructorEmpty<"inputReportReasonIllegalDrugs">;
  export const inputReportReasonPersonalDetails: TLConstructorEmpty<"inputReportReasonPersonalDetails">;
  export type UserFull<
    K extends keyof _UserFull = keyof _UserFull
  > = ToUnderscore<_UserFull, K>;
  export type _UserFull = {
    "userFull": {
      blocked?: true;                         // flags.0?true
      phone_calls_available?: true;           // flags.4?true
      phone_calls_private?: true;             // flags.5?true
      can_pin_message?: true;                 // flags.7?true
      has_scheduled?: true;                   // flags.12?true
      video_calls_available?: true;           // flags.13?true
      id: bigint;                             // long
      about?: string;                         // flags.1?string
      settings: global.PeerSettings;          // PeerSettings
      profile_photo?: global.Photo;           // flags.2?Photo
      notify_settings: global.PeerNotifySettings; // PeerNotifySettings
      bot_info?: global.BotInfo;              // flags.3?BotInfo
      pinned_msg_id?: number;                 // flags.6?int
      common_chats_count: number;             // int
      folder_id?: number;                     // flags.11?int
      ttl_period?: number;                    // flags.14?int
      theme_emoticon?: string;                // flags.15?string
      private_forward_name?: string;          // flags.16?string
    },
  };

  export const userFull: TLConstructor<_UserFull, "userFull">;
  export type Contact<
    K extends keyof _Contact = keyof _Contact
  > = ToUnderscore<_Contact, K>;
  export type _Contact = {
    "contact": {
      user_id: bigint;                        // long
      mutual: boolean;                        // Bool
    },
  };

  export const contact: TLConstructor<_Contact, "contact">;
  export type ImportedContact<
    K extends keyof _ImportedContact = keyof _ImportedContact
  > = ToUnderscore<_ImportedContact, K>;
  export type _ImportedContact = {
    "importedContact": {
      user_id: bigint;                        // long
      client_id: bigint;                      // long
    },
  };

  export const importedContact: TLConstructor<_ImportedContact, "importedContact">;
  export type ContactStatus<
    K extends keyof _ContactStatus = keyof _ContactStatus
  > = ToUnderscore<_ContactStatus, K>;
  export type _ContactStatus = {
    "contactStatus": {
      user_id: bigint;                        // long
      status: global.UserStatus;              // UserStatus
    },
  };

  export const contactStatus: TLConstructor<_ContactStatus, "contactStatus">;
  export type MessagesFilter<
    K extends keyof _MessagesFilter = keyof _MessagesFilter
  > = ToUnderscore<_MessagesFilter, K>;
  export type _MessagesFilter = {
    "inputMessagesFilterEmpty": {}
    "inputMessagesFilterPhotos": {}
    "inputMessagesFilterVideo": {}
    "inputMessagesFilterPhotoVideo": {}
    "inputMessagesFilterDocument": {}
    "inputMessagesFilterUrl": {}
    "inputMessagesFilterGif": {}
    "inputMessagesFilterVoice": {}
    "inputMessagesFilterMusic": {}
    "inputMessagesFilterChatPhotos": {}
    "inputMessagesFilterPhoneCalls": {
      missed?: true;                          // flags.0?true
    },
    "inputMessagesFilterRoundVoice": {}
    "inputMessagesFilterRoundVideo": {}
    "inputMessagesFilterMyMentions": {}
    "inputMessagesFilterGeo": {}
    "inputMessagesFilterContacts": {}
    "inputMessagesFilterPinned": {}
  };

  export const inputMessagesFilterEmpty: TLConstructorEmpty<"inputMessagesFilterEmpty">;
  export const inputMessagesFilterPhotos: TLConstructorEmpty<"inputMessagesFilterPhotos">;
  export const inputMessagesFilterVideo: TLConstructorEmpty<"inputMessagesFilterVideo">;
  export const inputMessagesFilterPhotoVideo: TLConstructorEmpty<"inputMessagesFilterPhotoVideo">;
  export const inputMessagesFilterDocument: TLConstructorEmpty<"inputMessagesFilterDocument">;
  export const inputMessagesFilterUrl: TLConstructorEmpty<"inputMessagesFilterUrl">;
  export const inputMessagesFilterGif: TLConstructorEmpty<"inputMessagesFilterGif">;
  export const inputMessagesFilterVoice: TLConstructorEmpty<"inputMessagesFilterVoice">;
  export const inputMessagesFilterMusic: TLConstructorEmpty<"inputMessagesFilterMusic">;
  export const inputMessagesFilterChatPhotos: TLConstructorEmpty<"inputMessagesFilterChatPhotos">;
  export const inputMessagesFilterPhoneCalls: TLConstructor<_MessagesFilter, "inputMessagesFilterPhoneCalls">;
  export const inputMessagesFilterRoundVoice: TLConstructorEmpty<"inputMessagesFilterRoundVoice">;
  export const inputMessagesFilterRoundVideo: TLConstructorEmpty<"inputMessagesFilterRoundVideo">;
  export const inputMessagesFilterMyMentions: TLConstructorEmpty<"inputMessagesFilterMyMentions">;
  export const inputMessagesFilterGeo: TLConstructorEmpty<"inputMessagesFilterGeo">;
  export const inputMessagesFilterContacts: TLConstructorEmpty<"inputMessagesFilterContacts">;
  export const inputMessagesFilterPinned: TLConstructorEmpty<"inputMessagesFilterPinned">;
  export type Update<
    K extends keyof _Update = keyof _Update
  > = ToUnderscore<_Update, K>;
  export type _Update = {
    "updateNewMessage": {
      message: global.Message;                // Message
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateMessageID": {
      id: number;                             // int
      random_id: bigint;                      // long
    },
    "updateDeleteMessages": {
      messages: number[];                     // Vector<int>
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateUserTyping": {
      user_id: bigint;                        // long
      action: global.SendMessageAction;       // SendMessageAction
    },
    "updateChatUserTyping": {
      chat_id: bigint;                        // long
      from_id: global.Peer;                   // Peer
      action: global.SendMessageAction;       // SendMessageAction
    },
    "updateChatParticipants": {
      participants: global.ChatParticipants;  // ChatParticipants
    },
    "updateUserStatus": {
      user_id: bigint;                        // long
      status: global.UserStatus;              // UserStatus
    },
    "updateUserName": {
      user_id: bigint;                        // long
      first_name: string;                     // string
      last_name: string;                      // string
      username: string;                       // string
    },
    "updateUserPhoto": {
      user_id: bigint;                        // long
      date: number;                           // int
      photo: global.UserProfilePhoto;         // UserProfilePhoto
      previous: boolean;                      // Bool
    },
    "updateNewEncryptedMessage": {
      message: global.EncryptedMessage;       // EncryptedMessage
      qts: number;                            // int
    },
    "updateEncryptedChatTyping": {
      chat_id: number;                        // int
    },
    "updateEncryption": {
      chat: global.EncryptedChat;             // EncryptedChat
      date: number;                           // int
    },
    "updateEncryptedMessagesRead": {
      chat_id: number;                        // int
      max_date: number;                       // int
      date: number;                           // int
    },
    "updateChatParticipantAdd": {
      chat_id: bigint;                        // long
      user_id: bigint;                        // long
      inviter_id: bigint;                     // long
      date: number;                           // int
      version: number;                        // int
    },
    "updateChatParticipantDelete": {
      chat_id: bigint;                        // long
      user_id: bigint;                        // long
      version: number;                        // int
    },
    "updateDcOptions": {
      dc_options: global.DcOption[];          // Vector<DcOption>
    },
    "updateNotifySettings": {
      peer: global.NotifyPeer;                // NotifyPeer
      notify_settings: global.PeerNotifySettings; // PeerNotifySettings
    },
    "updateServiceNotification": {
      popup?: true;                           // flags.0?true
      inbox_date?: number;                    // flags.1?int
      type: string;                           // string
      message: string;                        // string
      media: global.MessageMedia;             // MessageMedia
      entities: global.MessageEntity[];       // Vector<MessageEntity>
    },
    "updatePrivacy": {
      key: global.PrivacyKey;                 // PrivacyKey
      rules: global.PrivacyRule[];            // Vector<PrivacyRule>
    },
    "updateUserPhone": {
      user_id: bigint;                        // long
      phone: string;                          // string
    },
    "updateReadHistoryInbox": {
      folder_id?: number;                     // flags.0?int
      peer: global.Peer;                      // Peer
      max_id: number;                         // int
      still_unread_count: number;             // int
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateReadHistoryOutbox": {
      peer: global.Peer;                      // Peer
      max_id: number;                         // int
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateWebPage": {
      webpage: global.WebPage;                // WebPage
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateReadMessagesContents": {
      messages: number[];                     // Vector<int>
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateChannelTooLong": {
      channel_id: bigint;                     // long
      pts?: number;                           // flags.0?int
    },
    "updateChannel": {
      channel_id: bigint;                     // long
    },
    "updateNewChannelMessage": {
      message: global.Message;                // Message
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateReadChannelInbox": {
      folder_id?: number;                     // flags.0?int
      channel_id: bigint;                     // long
      max_id: number;                         // int
      still_unread_count: number;             // int
      pts: number;                            // int
    },
    "updateDeleteChannelMessages": {
      channel_id: bigint;                     // long
      messages: number[];                     // Vector<int>
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateChannelMessageViews": {
      channel_id: bigint;                     // long
      id: number;                             // int
      views: number;                          // int
    },
    "updateChatParticipantAdmin": {
      chat_id: bigint;                        // long
      user_id: bigint;                        // long
      is_admin: boolean;                      // Bool
      version: number;                        // int
    },
    "updateNewStickerSet": {
      stickerset: messages.StickerSet;        // messages.StickerSet
    },
    "updateStickerSetsOrder": {
      masks?: true;                           // flags.0?true
      order: bigint[];                        // Vector<long>
    },
    "updateStickerSets": {}
    "updateSavedGifs": {}
    "updateBotInlineQuery": {
      query_id: bigint;                       // long
      user_id: bigint;                        // long
      query: string;                          // string
      geo?: global.GeoPoint;                  // flags.0?GeoPoint
      peer_type?: global.InlineQueryPeerType; // flags.1?InlineQueryPeerType
      offset: string;                         // string
    },
    "updateBotInlineSend": {
      user_id: bigint;                        // long
      query: string;                          // string
      geo?: global.GeoPoint;                  // flags.0?GeoPoint
      id: string;                             // string
      msg_id?: global.InputBotInlineMessageID; // flags.1?InputBotInlineMessageID
    },
    "updateEditChannelMessage": {
      message: global.Message;                // Message
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateBotCallbackQuery": {
      query_id: bigint;                       // long
      user_id: bigint;                        // long
      peer: global.Peer;                      // Peer
      msg_id: number;                         // int
      chat_instance: bigint;                  // long
      data?: BufferSource;                    // flags.0?bytes
      game_short_name?: string;               // flags.1?string
    },
    "updateEditMessage": {
      message: global.Message;                // Message
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateInlineBotCallbackQuery": {
      query_id: bigint;                       // long
      user_id: bigint;                        // long
      msg_id: global.InputBotInlineMessageID; // InputBotInlineMessageID
      chat_instance: bigint;                  // long
      data?: BufferSource;                    // flags.0?bytes
      game_short_name?: string;               // flags.1?string
    },
    "updateReadChannelOutbox": {
      channel_id: bigint;                     // long
      max_id: number;                         // int
    },
    "updateDraftMessage": {
      peer: global.Peer;                      // Peer
      draft: global.DraftMessage;             // DraftMessage
    },
    "updateReadFeaturedStickers": {}
    "updateRecentStickers": {}
    "updateConfig": {}
    "updatePtsChanged": {}
    "updateChannelWebPage": {
      channel_id: bigint;                     // long
      webpage: global.WebPage;                // WebPage
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateDialogPinned": {
      pinned?: true;                          // flags.0?true
      folder_id?: number;                     // flags.1?int
      peer: global.DialogPeer;                // DialogPeer
    },
    "updatePinnedDialogs": {
      folder_id?: number;                     // flags.1?int
      order?: global.DialogPeer[];            // flags.0?Vector<DialogPeer>
    },
    "updateBotWebhookJSON": {
      data: global.DataJSON;                  // DataJSON
    },
    "updateBotWebhookJSONQuery": {
      query_id: bigint;                       // long
      data: global.DataJSON;                  // DataJSON
      timeout: number;                        // int
    },
    "updateBotShippingQuery": {
      query_id: bigint;                       // long
      user_id: bigint;                        // long
      payload: BufferSource;                  // bytes
      shipping_address: global.PostAddress;   // PostAddress
    },
    "updateBotPrecheckoutQuery": {
      query_id: bigint;                       // long
      user_id: bigint;                        // long
      payload: BufferSource;                  // bytes
      info?: global.PaymentRequestedInfo;     // flags.0?PaymentRequestedInfo
      shipping_option_id?: string;            // flags.1?string
      currency: string;                       // string
      total_amount: bigint;                   // long
    },
    "updatePhoneCall": {
      phone_call: global.PhoneCall;           // PhoneCall
    },
    "updateLangPackTooLong": {
      lang_code: string;                      // string
    },
    "updateLangPack": {
      difference: global.LangPackDifference;  // LangPackDifference
    },
    "updateFavedStickers": {}
    "updateChannelReadMessagesContents": {
      channel_id: bigint;                     // long
      messages: number[];                     // Vector<int>
    },
    "updateContactsReset": {}
    "updateChannelAvailableMessages": {
      channel_id: bigint;                     // long
      available_min_id: number;               // int
    },
    "updateDialogUnreadMark": {
      unread?: true;                          // flags.0?true
      peer: global.DialogPeer;                // DialogPeer
    },
    "updateMessagePoll": {
      poll_id: bigint;                        // long
      poll?: global.Poll;                     // flags.0?Poll
      results: global.PollResults;            // PollResults
    },
    "updateChatDefaultBannedRights": {
      peer: global.Peer;                      // Peer
      default_banned_rights: global.ChatBannedRights; // ChatBannedRights
      version: number;                        // int
    },
    "updateFolderPeers": {
      folder_peers: global.FolderPeer[];      // Vector<FolderPeer>
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updatePeerSettings": {
      peer: global.Peer;                      // Peer
      settings: global.PeerSettings;          // PeerSettings
    },
    "updatePeerLocated": {
      peers: global.PeerLocated[];            // Vector<PeerLocated>
    },
    "updateNewScheduledMessage": {
      message: global.Message;                // Message
    },
    "updateDeleteScheduledMessages": {
      peer: global.Peer;                      // Peer
      messages: number[];                     // Vector<int>
    },
    "updateTheme": {
      theme: global.Theme;                    // Theme
    },
    "updateGeoLiveViewed": {
      peer: global.Peer;                      // Peer
      msg_id: number;                         // int
    },
    "updateLoginToken": {}
    "updateMessagePollVote": {
      poll_id: bigint;                        // long
      user_id: bigint;                        // long
      options: BufferSource[];                // Vector<bytes>
      qts: number;                            // int
    },
    "updateDialogFilter": {
      id: number;                             // int
      filter?: global.DialogFilter;           // flags.0?DialogFilter
    },
    "updateDialogFilterOrder": {
      order: number[];                        // Vector<int>
    },
    "updateDialogFilters": {}
    "updatePhoneCallSignalingData": {
      phone_call_id: bigint;                  // long
      data: BufferSource;                     // bytes
    },
    "updateChannelMessageForwards": {
      channel_id: bigint;                     // long
      id: number;                             // int
      forwards: number;                       // int
    },
    "updateReadChannelDiscussionInbox": {
      channel_id: bigint;                     // long
      top_msg_id: number;                     // int
      read_max_id: number;                    // int
      broadcast_id?: bigint;                  // flags.0?long
      broadcast_post?: number;                // flags.0?int
    },
    "updateReadChannelDiscussionOutbox": {
      channel_id: bigint;                     // long
      top_msg_id: number;                     // int
      read_max_id: number;                    // int
    },
    "updatePeerBlocked": {
      peer_id: global.Peer;                   // Peer
      blocked: boolean;                       // Bool
    },
    "updateChannelUserTyping": {
      channel_id: bigint;                     // long
      top_msg_id?: number;                    // flags.0?int
      from_id: global.Peer;                   // Peer
      action: global.SendMessageAction;       // SendMessageAction
    },
    "updatePinnedMessages": {
      pinned?: true;                          // flags.0?true
      peer: global.Peer;                      // Peer
      messages: number[];                     // Vector<int>
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updatePinnedChannelMessages": {
      pinned?: true;                          // flags.0?true
      channel_id: bigint;                     // long
      messages: number[];                     // Vector<int>
      pts: number;                            // int
      pts_count: number;                      // int
    },
    "updateChat": {
      chat_id: bigint;                        // long
    },
    "updateGroupCallParticipants": {
      call: global.InputGroupCall;            // InputGroupCall
      participants: global.GroupCallParticipant[]; // Vector<GroupCallParticipant>
      version: number;                        // int
    },
    "updateGroupCall": {
      chat_id: bigint;                        // long
      call: global.GroupCall;                 // GroupCall
    },
    "updatePeerHistoryTTL": {
      peer: global.Peer;                      // Peer
      ttl_period?: number;                    // flags.0?int
    },
    "updateChatParticipant": {
      chat_id: bigint;                        // long
      date: number;                           // int
      actor_id: bigint;                       // long
      user_id: bigint;                        // long
      prev_participant?: global.ChatParticipant; // flags.0?ChatParticipant
      new_participant?: global.ChatParticipant; // flags.1?ChatParticipant
      invite?: global.ExportedChatInvite;     // flags.2?ExportedChatInvite
      qts: number;                            // int
    },
    "updateChannelParticipant": {
      channel_id: bigint;                     // long
      date: number;                           // int
      actor_id: bigint;                       // long
      user_id: bigint;                        // long
      prev_participant?: global.ChannelParticipant; // flags.0?ChannelParticipant
      new_participant?: global.ChannelParticipant; // flags.1?ChannelParticipant
      invite?: global.ExportedChatInvite;     // flags.2?ExportedChatInvite
      qts: number;                            // int
    },
    "updateBotStopped": {
      user_id: bigint;                        // long
      date: number;                           // int
      stopped: boolean;                       // Bool
      qts: number;                            // int
    },
    "updateGroupCallConnection": {
      presentation?: true;                    // flags.0?true
      params: global.DataJSON;                // DataJSON
    },
    "updateBotCommands": {
      peer: global.Peer;                      // Peer
      bot_id: bigint;                         // long
      commands: global.BotCommand[];          // Vector<BotCommand>
    },
    "updatePendingJoinRequests": {
      peer: global.Peer;                      // Peer
      requests_pending: number;               // int
      recent_requesters: bigint[];            // Vector<long>
    },
    "updateBotChatInviteRequester": {
      peer: global.Peer;                      // Peer
      date: number;                           // int
      user_id: bigint;                        // long
      about: string;                          // string
      invite: global.ExportedChatInvite;      // ExportedChatInvite
      qts: number;                            // int
    },
    "updateMessageReactions": {
      peer: global.Peer;                      // Peer
      msg_id: number;                         // int
      reactions: global.MessageReactions;     // MessageReactions
    },
  };

  export const updateNewMessage: TLConstructor<_Update, "updateNewMessage">;
  export const updateMessageID: TLConstructor<_Update, "updateMessageID">;
  export const updateDeleteMessages: TLConstructor<_Update, "updateDeleteMessages">;
  export const updateUserTyping: TLConstructor<_Update, "updateUserTyping">;
  export const updateChatUserTyping: TLConstructor<_Update, "updateChatUserTyping">;
  export const updateChatParticipants: TLConstructor<_Update, "updateChatParticipants">;
  export const updateUserStatus: TLConstructor<_Update, "updateUserStatus">;
  export const updateUserName: TLConstructor<_Update, "updateUserName">;
  export const updateUserPhoto: TLConstructor<_Update, "updateUserPhoto">;
  export const updateNewEncryptedMessage: TLConstructor<_Update, "updateNewEncryptedMessage">;
  export const updateEncryptedChatTyping: TLConstructor<_Update, "updateEncryptedChatTyping">;
  export const updateEncryption: TLConstructor<_Update, "updateEncryption">;
  export const updateEncryptedMessagesRead: TLConstructor<_Update, "updateEncryptedMessagesRead">;
  export const updateChatParticipantAdd: TLConstructor<_Update, "updateChatParticipantAdd">;
  export const updateChatParticipantDelete: TLConstructor<_Update, "updateChatParticipantDelete">;
  export const updateDcOptions: TLConstructor<_Update, "updateDcOptions">;
  export const updateNotifySettings: TLConstructor<_Update, "updateNotifySettings">;
  export const updateServiceNotification: TLConstructor<_Update, "updateServiceNotification">;
  export const updatePrivacy: TLConstructor<_Update, "updatePrivacy">;
  export const updateUserPhone: TLConstructor<_Update, "updateUserPhone">;
  export const updateReadHistoryInbox: TLConstructor<_Update, "updateReadHistoryInbox">;
  export const updateReadHistoryOutbox: TLConstructor<_Update, "updateReadHistoryOutbox">;
  export const updateWebPage: TLConstructor<_Update, "updateWebPage">;
  export const updateReadMessagesContents: TLConstructor<_Update, "updateReadMessagesContents">;
  export const updateChannelTooLong: TLConstructor<_Update, "updateChannelTooLong">;
  export const updateChannel: TLConstructor<_Update, "updateChannel">;
  export const updateNewChannelMessage: TLConstructor<_Update, "updateNewChannelMessage">;
  export const updateReadChannelInbox: TLConstructor<_Update, "updateReadChannelInbox">;
  export const updateDeleteChannelMessages: TLConstructor<_Update, "updateDeleteChannelMessages">;
  export const updateChannelMessageViews: TLConstructor<_Update, "updateChannelMessageViews">;
  export const updateChatParticipantAdmin: TLConstructor<_Update, "updateChatParticipantAdmin">;
  export const updateNewStickerSet: TLConstructor<_Update, "updateNewStickerSet">;
  export const updateStickerSetsOrder: TLConstructor<_Update, "updateStickerSetsOrder">;
  export const updateStickerSets: TLConstructorEmpty<"updateStickerSets">;
  export const updateSavedGifs: TLConstructorEmpty<"updateSavedGifs">;
  export const updateBotInlineQuery: TLConstructor<_Update, "updateBotInlineQuery">;
  export const updateBotInlineSend: TLConstructor<_Update, "updateBotInlineSend">;
  export const updateEditChannelMessage: TLConstructor<_Update, "updateEditChannelMessage">;
  export const updateBotCallbackQuery: TLConstructor<_Update, "updateBotCallbackQuery">;
  export const updateEditMessage: TLConstructor<_Update, "updateEditMessage">;
  export const updateInlineBotCallbackQuery: TLConstructor<_Update, "updateInlineBotCallbackQuery">;
  export const updateReadChannelOutbox: TLConstructor<_Update, "updateReadChannelOutbox">;
  export const updateDraftMessage: TLConstructor<_Update, "updateDraftMessage">;
  export const updateReadFeaturedStickers: TLConstructorEmpty<"updateReadFeaturedStickers">;
  export const updateRecentStickers: TLConstructorEmpty<"updateRecentStickers">;
  export const updateConfig: TLConstructorEmpty<"updateConfig">;
  export const updatePtsChanged: TLConstructorEmpty<"updatePtsChanged">;
  export const updateChannelWebPage: TLConstructor<_Update, "updateChannelWebPage">;
  export const updateDialogPinned: TLConstructor<_Update, "updateDialogPinned">;
  export const updatePinnedDialogs: TLConstructor<_Update, "updatePinnedDialogs">;
  export const updateBotWebhookJSON: TLConstructor<_Update, "updateBotWebhookJSON">;
  export const updateBotWebhookJSONQuery: TLConstructor<_Update, "updateBotWebhookJSONQuery">;
  export const updateBotShippingQuery: TLConstructor<_Update, "updateBotShippingQuery">;
  export const updateBotPrecheckoutQuery: TLConstructor<_Update, "updateBotPrecheckoutQuery">;
  export const updatePhoneCall: TLConstructor<_Update, "updatePhoneCall">;
  export const updateLangPackTooLong: TLConstructor<_Update, "updateLangPackTooLong">;
  export const updateLangPack: TLConstructor<_Update, "updateLangPack">;
  export const updateFavedStickers: TLConstructorEmpty<"updateFavedStickers">;
  export const updateChannelReadMessagesContents: TLConstructor<_Update, "updateChannelReadMessagesContents">;
  export const updateContactsReset: TLConstructorEmpty<"updateContactsReset">;
  export const updateChannelAvailableMessages: TLConstructor<_Update, "updateChannelAvailableMessages">;
  export const updateDialogUnreadMark: TLConstructor<_Update, "updateDialogUnreadMark">;
  export const updateMessagePoll: TLConstructor<_Update, "updateMessagePoll">;
  export const updateChatDefaultBannedRights: TLConstructor<_Update, "updateChatDefaultBannedRights">;
  export const updateFolderPeers: TLConstructor<_Update, "updateFolderPeers">;
  export const updatePeerSettings: TLConstructor<_Update, "updatePeerSettings">;
  export const updatePeerLocated: TLConstructor<_Update, "updatePeerLocated">;
  export const updateNewScheduledMessage: TLConstructor<_Update, "updateNewScheduledMessage">;
  export const updateDeleteScheduledMessages: TLConstructor<_Update, "updateDeleteScheduledMessages">;
  export const updateTheme: TLConstructor<_Update, "updateTheme">;
  export const updateGeoLiveViewed: TLConstructor<_Update, "updateGeoLiveViewed">;
  export const updateLoginToken: TLConstructorEmpty<"updateLoginToken">;
  export const updateMessagePollVote: TLConstructor<_Update, "updateMessagePollVote">;
  export const updateDialogFilter: TLConstructor<_Update, "updateDialogFilter">;
  export const updateDialogFilterOrder: TLConstructor<_Update, "updateDialogFilterOrder">;
  export const updateDialogFilters: TLConstructorEmpty<"updateDialogFilters">;
  export const updatePhoneCallSignalingData: TLConstructor<_Update, "updatePhoneCallSignalingData">;
  export const updateChannelMessageForwards: TLConstructor<_Update, "updateChannelMessageForwards">;
  export const updateReadChannelDiscussionInbox: TLConstructor<_Update, "updateReadChannelDiscussionInbox">;
  export const updateReadChannelDiscussionOutbox: TLConstructor<_Update, "updateReadChannelDiscussionOutbox">;
  export const updatePeerBlocked: TLConstructor<_Update, "updatePeerBlocked">;
  export const updateChannelUserTyping: TLConstructor<_Update, "updateChannelUserTyping">;
  export const updatePinnedMessages: TLConstructor<_Update, "updatePinnedMessages">;
  export const updatePinnedChannelMessages: TLConstructor<_Update, "updatePinnedChannelMessages">;
  export const updateChat: TLConstructor<_Update, "updateChat">;
  export const updateGroupCallParticipants: TLConstructor<_Update, "updateGroupCallParticipants">;
  export const updateGroupCall: TLConstructor<_Update, "updateGroupCall">;
  export const updatePeerHistoryTTL: TLConstructor<_Update, "updatePeerHistoryTTL">;
  export const updateChatParticipant: TLConstructor<_Update, "updateChatParticipant">;
  export const updateChannelParticipant: TLConstructor<_Update, "updateChannelParticipant">;
  export const updateBotStopped: TLConstructor<_Update, "updateBotStopped">;
  export const updateGroupCallConnection: TLConstructor<_Update, "updateGroupCallConnection">;
  export const updateBotCommands: TLConstructor<_Update, "updateBotCommands">;
  export const updatePendingJoinRequests: TLConstructor<_Update, "updatePendingJoinRequests">;
  export const updateBotChatInviteRequester: TLConstructor<_Update, "updateBotChatInviteRequester">;
  export const updateMessageReactions: TLConstructor<_Update, "updateMessageReactions">;
  export type Updates<
    K extends keyof _Updates = keyof _Updates
  > = ToUnderscore<_Updates, K>;
  export type _Updates = {
    "updatesTooLong": {}
    "updateShortMessage": {
      out?: true;                             // flags.1?true
      mentioned?: true;                       // flags.4?true
      media_unread?: true;                    // flags.5?true
      silent?: true;                          // flags.13?true
      id: number;                             // int
      user_id: bigint;                        // long
      message: string;                        // string
      pts: number;                            // int
      pts_count: number;                      // int
      date: number;                           // int
      fwd_from?: global.MessageFwdHeader;     // flags.2?MessageFwdHeader
      via_bot_id?: bigint;                    // flags.11?long
      reply_to?: global.MessageReplyHeader;   // flags.3?MessageReplyHeader
      entities?: global.MessageEntity[];      // flags.7?Vector<MessageEntity>
      ttl_period?: number;                    // flags.25?int
    },
    "updateShortChatMessage": {
      out?: true;                             // flags.1?true
      mentioned?: true;                       // flags.4?true
      media_unread?: true;                    // flags.5?true
      silent?: true;                          // flags.13?true
      id: number;                             // int
      from_id: bigint;                        // long
      chat_id: bigint;                        // long
      message: string;                        // string
      pts: number;                            // int
      pts_count: number;                      // int
      date: number;                           // int
      fwd_from?: global.MessageFwdHeader;     // flags.2?MessageFwdHeader
      via_bot_id?: bigint;                    // flags.11?long
      reply_to?: global.MessageReplyHeader;   // flags.3?MessageReplyHeader
      entities?: global.MessageEntity[];      // flags.7?Vector<MessageEntity>
      ttl_period?: number;                    // flags.25?int
    },
    "updateShort": {
      update: global.Update;                  // Update
      date: number;                           // int
    },
    "updatesCombined": {
      updates: global.Update[];               // Vector<Update>
      users: global.User[];                   // Vector<User>
      chats: global.Chat[];                   // Vector<Chat>
      date: number;                           // int
      seq_start: number;                      // int
      seq: number;                            // int
    },
    "updates": {
      updates: global.Update[];               // Vector<Update>
      users: global.User[];                   // Vector<User>
      chats: global.Chat[];                   // Vector<Chat>
      date: number;                           // int
      seq: number;                            // int
    },
    "updateShortSentMessage": {
      out?: true;                             // flags.1?true
      id: number;                             // int
      pts: number;                            // int
      pts_count: number;                      // int
      date: number;                           // int
      media?: global.MessageMedia;            // flags.9?MessageMedia
      entities?: global.MessageEntity[];      // flags.7?Vector<MessageEntity>
      ttl_period?: number;                    // flags.25?int
    },
  };

  export const updatesTooLong: TLConstructorEmpty<"updatesTooLong">;
  export const updateShortMessage: TLConstructor<_Updates, "updateShortMessage">;
  export const updateShortChatMessage: TLConstructor<_Updates, "updateShortChatMessage">;
  export const updateShort: TLConstructor<_Updates, "updateShort">;
  export const updatesCombined: TLConstructor<_Updates, "updatesCombined">;
  export const updates: TLConstructor<_Updates, "updates">;
  export const updateShortSentMessage: TLConstructor<_Updates, "updateShortSentMessage">;
  export type DcOption<
    K extends keyof _DcOption = keyof _DcOption
  > = ToUnderscore<_DcOption, K>;
  export type _DcOption = {
    "dcOption": {
      ipv6?: true;                            // flags.0?true
      media_only?: true;                      // flags.1?true
      tcpo_only?: true;                       // flags.2?true
      cdn?: true;                             // flags.3?true
      static?: true;                          // flags.4?true
      id: number;                             // int
      ip_address: string;                     // string
      port: number;                           // int
      secret?: BufferSource;                  // flags.10?bytes
    },
  };

  export const dcOption: TLConstructor<_DcOption, "dcOption">;
  export type Config<
    K extends keyof _Config = keyof _Config
  > = ToUnderscore<_Config, K>;
  export type _Config = {
    "config": {
      phonecalls_enabled?: true;              // flags.1?true
      default_p2p_contacts?: true;            // flags.3?true
      preload_featured_stickers?: true;       // flags.4?true
      ignore_phone_entities?: true;           // flags.5?true
      revoke_pm_inbox?: true;                 // flags.6?true
      blocked_mode?: true;                    // flags.8?true
      pfs_enabled?: true;                     // flags.13?true
      date: number;                           // int
      expires: number;                        // int
      test_mode: boolean;                     // Bool
      this_dc: number;                        // int
      dc_options: global.DcOption[];          // Vector<DcOption>
      dc_txt_domain_name: string;             // string
      chat_size_max: number;                  // int
      megagroup_size_max: number;             // int
      forwarded_count_max: number;            // int
      online_update_period_ms: number;        // int
      offline_blur_timeout_ms: number;        // int
      offline_idle_timeout_ms: number;        // int
      online_cloud_timeout_ms: number;        // int
      notify_cloud_delay_ms: number;          // int
      notify_default_delay_ms: number;        // int
      push_chat_period_ms: number;            // int
      push_chat_limit: number;                // int
      saved_gifs_limit: number;               // int
      edit_time_limit: number;                // int
      revoke_time_limit: number;              // int
      revoke_pm_time_limit: number;           // int
      rating_e_decay: number;                 // int
      stickers_recent_limit: number;          // int
      stickers_faved_limit: number;           // int
      channels_read_media_period: number;     // int
      tmp_sessions?: number;                  // flags.0?int
      pinned_dialogs_count_max: number;       // int
      pinned_infolder_count_max: number;      // int
      call_receive_timeout_ms: number;        // int
      call_ring_timeout_ms: number;           // int
      call_connect_timeout_ms: number;        // int
      call_packet_timeout_ms: number;         // int
      me_url_prefix: string;                  // string
      autoupdate_url_prefix?: string;         // flags.7?string
      gif_search_username?: string;           // flags.9?string
      venue_search_username?: string;         // flags.10?string
      img_search_username?: string;           // flags.11?string
      static_maps_provider?: string;          // flags.12?string
      caption_length_max: number;             // int
      message_length_max: number;             // int
      webfile_dc_id: number;                  // int
      suggested_lang_code?: string;           // flags.2?string
      lang_pack_version?: number;             // flags.2?int
      base_lang_pack_version?: number;        // flags.2?int
    },
  };

  export const config: TLConstructor<_Config, "config">;
  export type NearestDc<
    K extends keyof _NearestDc = keyof _NearestDc
  > = ToUnderscore<_NearestDc, K>;
  export type _NearestDc = {
    "nearestDc": {
      country: string;                        // string
      this_dc: number;                        // int
      nearest_dc: number;                     // int
    },
  };

  export const nearestDc: TLConstructor<_NearestDc, "nearestDc">;
  export type EncryptedChat<
    K extends keyof _EncryptedChat = keyof _EncryptedChat
  > = ToUnderscore<_EncryptedChat, K>;
  export type _EncryptedChat = {
    "encryptedChatEmpty": {
      id: number;                             // int
    },
    "encryptedChatWaiting": {
      id: number;                             // int
      access_hash: bigint;                    // long
      date: number;                           // int
      admin_id: bigint;                       // long
      participant_id: bigint;                 // long
    },
    "encryptedChatRequested": {
      folder_id?: number;                     // flags.0?int
      id: number;                             // int
      access_hash: bigint;                    // long
      date: number;                           // int
      admin_id: bigint;                       // long
      participant_id: bigint;                 // long
      g_a: BufferSource;                      // bytes
    },
    "encryptedChat": {
      id: number;                             // int
      access_hash: bigint;                    // long
      date: number;                           // int
      admin_id: bigint;                       // long
      participant_id: bigint;                 // long
      g_a_or_b: BufferSource;                 // bytes
      key_fingerprint: bigint;                // long
    },
    "encryptedChatDiscarded": {
      history_deleted?: true;                 // flags.0?true
      id: number;                             // int
    },
  };

  export const encryptedChatEmpty: TLConstructor<_EncryptedChat, "encryptedChatEmpty">;
  export const encryptedChatWaiting: TLConstructor<_EncryptedChat, "encryptedChatWaiting">;
  export const encryptedChatRequested: TLConstructor<_EncryptedChat, "encryptedChatRequested">;
  export const encryptedChat: TLConstructor<_EncryptedChat, "encryptedChat">;
  export const encryptedChatDiscarded: TLConstructor<_EncryptedChat, "encryptedChatDiscarded">;
  export type InputEncryptedChat<
    K extends keyof _InputEncryptedChat = keyof _InputEncryptedChat
  > = ToUnderscore<_InputEncryptedChat, K>;
  export type _InputEncryptedChat = {
    "inputEncryptedChat": {
      chat_id: number;                        // int
      access_hash: bigint;                    // long
    },
  };

  export const inputEncryptedChat: TLConstructor<_InputEncryptedChat, "inputEncryptedChat">;
  export type EncryptedFile<
    K extends keyof _EncryptedFile = keyof _EncryptedFile
  > = ToUnderscore<_EncryptedFile, K>;
  export type _EncryptedFile = {
    "encryptedFileEmpty": {}
    "encryptedFile": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      size: number;                           // int
      dc_id: number;                          // int
      key_fingerprint: number;                // int
    },
  };

  export const encryptedFileEmpty: TLConstructorEmpty<"encryptedFileEmpty">;
  export const encryptedFile: TLConstructor<_EncryptedFile, "encryptedFile">;
  export type InputEncryptedFile<
    K extends keyof _InputEncryptedFile = keyof _InputEncryptedFile
  > = ToUnderscore<_InputEncryptedFile, K>;
  export type _InputEncryptedFile = {
    "inputEncryptedFileEmpty": {}
    "inputEncryptedFileUploaded": {
      id: bigint;                             // long
      parts: number;                          // int
      md5_checksum: string;                   // string
      key_fingerprint: number;                // int
    },
    "inputEncryptedFile": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputEncryptedFileBigUploaded": {
      id: bigint;                             // long
      parts: number;                          // int
      key_fingerprint: number;                // int
    },
  };

  export const inputEncryptedFileEmpty: TLConstructorEmpty<"inputEncryptedFileEmpty">;
  export const inputEncryptedFileUploaded: TLConstructor<_InputEncryptedFile, "inputEncryptedFileUploaded">;
  export const inputEncryptedFile: TLConstructor<_InputEncryptedFile, "inputEncryptedFile">;
  export const inputEncryptedFileBigUploaded: TLConstructor<_InputEncryptedFile, "inputEncryptedFileBigUploaded">;
  export type EncryptedMessage<
    K extends keyof _EncryptedMessage = keyof _EncryptedMessage
  > = ToUnderscore<_EncryptedMessage, K>;
  export type _EncryptedMessage = {
    "encryptedMessage": {
      random_id: bigint;                      // long
      chat_id: number;                        // int
      date: number;                           // int
      bytes: BufferSource;                    // bytes
      file: global.EncryptedFile;             // EncryptedFile
    },
    "encryptedMessageService": {
      random_id: bigint;                      // long
      chat_id: number;                        // int
      date: number;                           // int
      bytes: BufferSource;                    // bytes
    },
  };

  export const encryptedMessage: TLConstructor<_EncryptedMessage, "encryptedMessage">;
  export const encryptedMessageService: TLConstructor<_EncryptedMessage, "encryptedMessageService">;
  export type InputDocument<
    K extends keyof _InputDocument = keyof _InputDocument
  > = ToUnderscore<_InputDocument, K>;
  export type _InputDocument = {
    "inputDocumentEmpty": {}
    "inputDocument": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      file_reference: BufferSource;           // bytes
    },
  };

  export const inputDocumentEmpty: TLConstructorEmpty<"inputDocumentEmpty">;
  export const inputDocument: TLConstructor<_InputDocument, "inputDocument">;
  export type Document<
    K extends keyof _Document = keyof _Document
  > = ToUnderscore<_Document, K>;
  export type _Document = {
    "documentEmpty": {
      id: bigint;                             // long
    },
    "document": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      file_reference: BufferSource;           // bytes
      date: number;                           // int
      mime_type: string;                      // string
      size: number;                           // int
      thumbs?: global.PhotoSize[];            // flags.0?Vector<PhotoSize>
      video_thumbs?: global.VideoSize[];      // flags.1?Vector<VideoSize>
      dc_id: number;                          // int
      attributes: global.DocumentAttribute[]; // Vector<DocumentAttribute>
    },
  };

  export const documentEmpty: TLConstructor<_Document, "documentEmpty">;
  export const document: TLConstructor<_Document, "document">;
  export type NotifyPeer<
    K extends keyof _NotifyPeer = keyof _NotifyPeer
  > = ToUnderscore<_NotifyPeer, K>;
  export type _NotifyPeer = {
    "notifyPeer": {
      peer: global.Peer;                      // Peer
    },
    "notifyUsers": {}
    "notifyChats": {}
    "notifyBroadcasts": {}
  };

  export const notifyPeer: TLConstructor<_NotifyPeer, "notifyPeer">;
  export const notifyUsers: TLConstructorEmpty<"notifyUsers">;
  export const notifyChats: TLConstructorEmpty<"notifyChats">;
  export const notifyBroadcasts: TLConstructorEmpty<"notifyBroadcasts">;
  export type SendMessageAction<
    K extends keyof _SendMessageAction = keyof _SendMessageAction
  > = ToUnderscore<_SendMessageAction, K>;
  export type _SendMessageAction = {
    "sendMessageTypingAction": {}
    "sendMessageCancelAction": {}
    "sendMessageRecordVideoAction": {}
    "sendMessageUploadVideoAction": {
      progress: number;                       // int
    },
    "sendMessageRecordAudioAction": {}
    "sendMessageUploadAudioAction": {
      progress: number;                       // int
    },
    "sendMessageUploadPhotoAction": {
      progress: number;                       // int
    },
    "sendMessageUploadDocumentAction": {
      progress: number;                       // int
    },
    "sendMessageGeoLocationAction": {}
    "sendMessageChooseContactAction": {}
    "sendMessageGamePlayAction": {}
    "sendMessageRecordRoundAction": {}
    "sendMessageUploadRoundAction": {
      progress: number;                       // int
    },
    "speakingInGroupCallAction": {}
    "sendMessageHistoryImportAction": {
      progress: number;                       // int
    },
    "sendMessageChooseStickerAction": {}
    "sendMessageEmojiInteraction": {
      emoticon: string;                       // string
      msg_id: number;                         // int
      interaction: global.DataJSON;           // DataJSON
    },
    "sendMessageEmojiInteractionSeen": {
      emoticon: string;                       // string
    },
  };

  export const sendMessageTypingAction: TLConstructorEmpty<"sendMessageTypingAction">;
  export const sendMessageCancelAction: TLConstructorEmpty<"sendMessageCancelAction">;
  export const sendMessageRecordVideoAction: TLConstructorEmpty<"sendMessageRecordVideoAction">;
  export const sendMessageUploadVideoAction: TLConstructor<_SendMessageAction, "sendMessageUploadVideoAction">;
  export const sendMessageRecordAudioAction: TLConstructorEmpty<"sendMessageRecordAudioAction">;
  export const sendMessageUploadAudioAction: TLConstructor<_SendMessageAction, "sendMessageUploadAudioAction">;
  export const sendMessageUploadPhotoAction: TLConstructor<_SendMessageAction, "sendMessageUploadPhotoAction">;
  export const sendMessageUploadDocumentAction: TLConstructor<_SendMessageAction, "sendMessageUploadDocumentAction">;
  export const sendMessageGeoLocationAction: TLConstructorEmpty<"sendMessageGeoLocationAction">;
  export const sendMessageChooseContactAction: TLConstructorEmpty<"sendMessageChooseContactAction">;
  export const sendMessageGamePlayAction: TLConstructorEmpty<"sendMessageGamePlayAction">;
  export const sendMessageRecordRoundAction: TLConstructorEmpty<"sendMessageRecordRoundAction">;
  export const sendMessageUploadRoundAction: TLConstructor<_SendMessageAction, "sendMessageUploadRoundAction">;
  export const speakingInGroupCallAction: TLConstructorEmpty<"speakingInGroupCallAction">;
  export const sendMessageHistoryImportAction: TLConstructor<_SendMessageAction, "sendMessageHistoryImportAction">;
  export const sendMessageChooseStickerAction: TLConstructorEmpty<"sendMessageChooseStickerAction">;
  export const sendMessageEmojiInteraction: TLConstructor<_SendMessageAction, "sendMessageEmojiInteraction">;
  export const sendMessageEmojiInteractionSeen: TLConstructor<_SendMessageAction, "sendMessageEmojiInteractionSeen">;
  export type InputPrivacyKey<
    K extends keyof _InputPrivacyKey = keyof _InputPrivacyKey
  > = ToUnderscore<_InputPrivacyKey, K>;
  export type _InputPrivacyKey = {
    "inputPrivacyKeyStatusTimestamp": {}
    "inputPrivacyKeyChatInvite": {}
    "inputPrivacyKeyPhoneCall": {}
    "inputPrivacyKeyPhoneP2P": {}
    "inputPrivacyKeyForwards": {}
    "inputPrivacyKeyProfilePhoto": {}
    "inputPrivacyKeyPhoneNumber": {}
    "inputPrivacyKeyAddedByPhone": {}
  };

  export const inputPrivacyKeyStatusTimestamp: TLConstructorEmpty<"inputPrivacyKeyStatusTimestamp">;
  export const inputPrivacyKeyChatInvite: TLConstructorEmpty<"inputPrivacyKeyChatInvite">;
  export const inputPrivacyKeyPhoneCall: TLConstructorEmpty<"inputPrivacyKeyPhoneCall">;
  export const inputPrivacyKeyPhoneP2P: TLConstructorEmpty<"inputPrivacyKeyPhoneP2P">;
  export const inputPrivacyKeyForwards: TLConstructorEmpty<"inputPrivacyKeyForwards">;
  export const inputPrivacyKeyProfilePhoto: TLConstructorEmpty<"inputPrivacyKeyProfilePhoto">;
  export const inputPrivacyKeyPhoneNumber: TLConstructorEmpty<"inputPrivacyKeyPhoneNumber">;
  export const inputPrivacyKeyAddedByPhone: TLConstructorEmpty<"inputPrivacyKeyAddedByPhone">;
  export type PrivacyKey<
    K extends keyof _PrivacyKey = keyof _PrivacyKey
  > = ToUnderscore<_PrivacyKey, K>;
  export type _PrivacyKey = {
    "privacyKeyStatusTimestamp": {}
    "privacyKeyChatInvite": {}
    "privacyKeyPhoneCall": {}
    "privacyKeyPhoneP2P": {}
    "privacyKeyForwards": {}
    "privacyKeyProfilePhoto": {}
    "privacyKeyPhoneNumber": {}
    "privacyKeyAddedByPhone": {}
  };

  export const privacyKeyStatusTimestamp: TLConstructorEmpty<"privacyKeyStatusTimestamp">;
  export const privacyKeyChatInvite: TLConstructorEmpty<"privacyKeyChatInvite">;
  export const privacyKeyPhoneCall: TLConstructorEmpty<"privacyKeyPhoneCall">;
  export const privacyKeyPhoneP2P: TLConstructorEmpty<"privacyKeyPhoneP2P">;
  export const privacyKeyForwards: TLConstructorEmpty<"privacyKeyForwards">;
  export const privacyKeyProfilePhoto: TLConstructorEmpty<"privacyKeyProfilePhoto">;
  export const privacyKeyPhoneNumber: TLConstructorEmpty<"privacyKeyPhoneNumber">;
  export const privacyKeyAddedByPhone: TLConstructorEmpty<"privacyKeyAddedByPhone">;
  export type InputPrivacyRule<
    K extends keyof _InputPrivacyRule = keyof _InputPrivacyRule
  > = ToUnderscore<_InputPrivacyRule, K>;
  export type _InputPrivacyRule = {
    "inputPrivacyValueAllowContacts": {}
    "inputPrivacyValueAllowAll": {}
    "inputPrivacyValueAllowUsers": {
      users: global.InputUser[];              // Vector<InputUser>
    },
    "inputPrivacyValueDisallowContacts": {}
    "inputPrivacyValueDisallowAll": {}
    "inputPrivacyValueDisallowUsers": {
      users: global.InputUser[];              // Vector<InputUser>
    },
    "inputPrivacyValueAllowChatParticipants": {
      chats: bigint[];                        // Vector<long>
    },
    "inputPrivacyValueDisallowChatParticipants": {
      chats: bigint[];                        // Vector<long>
    },
  };

  export const inputPrivacyValueAllowContacts: TLConstructorEmpty<"inputPrivacyValueAllowContacts">;
  export const inputPrivacyValueAllowAll: TLConstructorEmpty<"inputPrivacyValueAllowAll">;
  export const inputPrivacyValueAllowUsers: TLConstructor<_InputPrivacyRule, "inputPrivacyValueAllowUsers">;
  export const inputPrivacyValueDisallowContacts: TLConstructorEmpty<"inputPrivacyValueDisallowContacts">;
  export const inputPrivacyValueDisallowAll: TLConstructorEmpty<"inputPrivacyValueDisallowAll">;
  export const inputPrivacyValueDisallowUsers: TLConstructor<_InputPrivacyRule, "inputPrivacyValueDisallowUsers">;
  export const inputPrivacyValueAllowChatParticipants: TLConstructor<_InputPrivacyRule, "inputPrivacyValueAllowChatParticipants">;
  export const inputPrivacyValueDisallowChatParticipants: TLConstructor<_InputPrivacyRule, "inputPrivacyValueDisallowChatParticipants">;
  export type PrivacyRule<
    K extends keyof _PrivacyRule = keyof _PrivacyRule
  > = ToUnderscore<_PrivacyRule, K>;
  export type _PrivacyRule = {
    "privacyValueAllowContacts": {}
    "privacyValueAllowAll": {}
    "privacyValueAllowUsers": {
      users: bigint[];                        // Vector<long>
    },
    "privacyValueDisallowContacts": {}
    "privacyValueDisallowAll": {}
    "privacyValueDisallowUsers": {
      users: bigint[];                        // Vector<long>
    },
    "privacyValueAllowChatParticipants": {
      chats: bigint[];                        // Vector<long>
    },
    "privacyValueDisallowChatParticipants": {
      chats: bigint[];                        // Vector<long>
    },
  };

  export const privacyValueAllowContacts: TLConstructorEmpty<"privacyValueAllowContacts">;
  export const privacyValueAllowAll: TLConstructorEmpty<"privacyValueAllowAll">;
  export const privacyValueAllowUsers: TLConstructor<_PrivacyRule, "privacyValueAllowUsers">;
  export const privacyValueDisallowContacts: TLConstructorEmpty<"privacyValueDisallowContacts">;
  export const privacyValueDisallowAll: TLConstructorEmpty<"privacyValueDisallowAll">;
  export const privacyValueDisallowUsers: TLConstructor<_PrivacyRule, "privacyValueDisallowUsers">;
  export const privacyValueAllowChatParticipants: TLConstructor<_PrivacyRule, "privacyValueAllowChatParticipants">;
  export const privacyValueDisallowChatParticipants: TLConstructor<_PrivacyRule, "privacyValueDisallowChatParticipants">;
  export type AccountDaysTTL<
    K extends keyof _AccountDaysTTL = keyof _AccountDaysTTL
  > = ToUnderscore<_AccountDaysTTL, K>;
  export type _AccountDaysTTL = {
    "accountDaysTTL": {
      days: number;                           // int
    },
  };

  export const accountDaysTTL: TLConstructor<_AccountDaysTTL, "accountDaysTTL">;
  export type DocumentAttribute<
    K extends keyof _DocumentAttribute = keyof _DocumentAttribute
  > = ToUnderscore<_DocumentAttribute, K>;
  export type _DocumentAttribute = {
    "documentAttributeImageSize": {
      w: number;                              // int
      h: number;                              // int
    },
    "documentAttributeAnimated": {}
    "documentAttributeSticker": {
      mask?: true;                            // flags.1?true
      alt: string;                            // string
      stickerset: global.InputStickerSet;     // InputStickerSet
      mask_coords?: global.MaskCoords;        // flags.0?MaskCoords
    },
    "documentAttributeVideo": {
      round_message?: true;                   // flags.0?true
      supports_streaming?: true;              // flags.1?true
      duration: number;                       // int
      w: number;                              // int
      h: number;                              // int
    },
    "documentAttributeAudio": {
      voice?: true;                           // flags.10?true
      duration: number;                       // int
      title?: string;                         // flags.0?string
      performer?: string;                     // flags.1?string
      waveform?: BufferSource;                // flags.2?bytes
    },
    "documentAttributeFilename": {
      file_name: string;                      // string
    },
    "documentAttributeHasStickers": {}
  };

  export const documentAttributeImageSize: TLConstructor<_DocumentAttribute, "documentAttributeImageSize">;
  export const documentAttributeAnimated: TLConstructorEmpty<"documentAttributeAnimated">;
  export const documentAttributeSticker: TLConstructor<_DocumentAttribute, "documentAttributeSticker">;
  export const documentAttributeVideo: TLConstructor<_DocumentAttribute, "documentAttributeVideo">;
  export const documentAttributeAudio: TLConstructor<_DocumentAttribute, "documentAttributeAudio">;
  export const documentAttributeFilename: TLConstructor<_DocumentAttribute, "documentAttributeFilename">;
  export const documentAttributeHasStickers: TLConstructorEmpty<"documentAttributeHasStickers">;
  export type StickerPack<
    K extends keyof _StickerPack = keyof _StickerPack
  > = ToUnderscore<_StickerPack, K>;
  export type _StickerPack = {
    "stickerPack": {
      emoticon: string;                       // string
      documents: bigint[];                    // Vector<long>
    },
  };

  export const stickerPack: TLConstructor<_StickerPack, "stickerPack">;
  export type WebPage<
    K extends keyof _WebPage = keyof _WebPage
  > = ToUnderscore<_WebPage, K>;
  export type _WebPage = {
    "webPageEmpty": {
      id: bigint;                             // long
    },
    "webPagePending": {
      id: bigint;                             // long
      date: number;                           // int
    },
    "webPage": {
      id: bigint;                             // long
      url: string;                            // string
      display_url: string;                    // string
      hash: number;                           // int
      type?: string;                          // flags.0?string
      site_name?: string;                     // flags.1?string
      title?: string;                         // flags.2?string
      description?: string;                   // flags.3?string
      photo?: global.Photo;                   // flags.4?Photo
      embed_url?: string;                     // flags.5?string
      embed_type?: string;                    // flags.5?string
      embed_width?: number;                   // flags.6?int
      embed_height?: number;                  // flags.6?int
      duration?: number;                      // flags.7?int
      author?: string;                        // flags.8?string
      document?: global.Document;             // flags.9?Document
      cached_page?: global.Page;              // flags.10?Page
      attributes?: global.WebPageAttribute[]; // flags.12?Vector<WebPageAttribute>
    },
    "webPageNotModified": {
      cached_page_views?: number;             // flags.0?int
    },
  };

  export const webPageEmpty: TLConstructor<_WebPage, "webPageEmpty">;
  export const webPagePending: TLConstructor<_WebPage, "webPagePending">;
  export const webPage: TLConstructor<_WebPage, "webPage">;
  export const webPageNotModified: TLConstructor<_WebPage, "webPageNotModified">;
  export type Authorization<
    K extends keyof _Authorization = keyof _Authorization
  > = ToUnderscore<_Authorization, K>;
  export type _Authorization = {
    "authorization": {
      current?: true;                         // flags.0?true
      official_app?: true;                    // flags.1?true
      password_pending?: true;                // flags.2?true
      encrypted_requests_disabled?: true;     // flags.3?true
      call_requests_disabled?: true;          // flags.4?true
      hash: bigint;                           // long
      device_model: string;                   // string
      platform: string;                       // string
      system_version: string;                 // string
      api_id: number;                         // int
      app_name: string;                       // string
      app_version: string;                    // string
      date_created: number;                   // int
      date_active: number;                    // int
      ip: string;                             // string
      country: string;                        // string
      region: string;                         // string
    },
  };

  export const authorization: TLConstructor<_Authorization, "authorization">;
  export type ReceivedNotifyMessage<
    K extends keyof _ReceivedNotifyMessage = keyof _ReceivedNotifyMessage
  > = ToUnderscore<_ReceivedNotifyMessage, K>;
  export type _ReceivedNotifyMessage = {
    "receivedNotifyMessage": {
      id: number;                             // int
      flags: number;                          // int
    },
  };

  export const receivedNotifyMessage: TLConstructor<_ReceivedNotifyMessage, "receivedNotifyMessage">;
  export type ExportedChatInvite<
    K extends keyof _ExportedChatInvite = keyof _ExportedChatInvite
  > = ToUnderscore<_ExportedChatInvite, K>;
  export type _ExportedChatInvite = {
    "chatInviteExported": {
      revoked?: true;                         // flags.0?true
      permanent?: true;                       // flags.5?true
      request_needed?: true;                  // flags.6?true
      link: string;                           // string
      admin_id: bigint;                       // long
      date: number;                           // int
      start_date?: number;                    // flags.4?int
      expire_date?: number;                   // flags.1?int
      usage_limit?: number;                   // flags.2?int
      usage?: number;                         // flags.3?int
      requested?: number;                     // flags.7?int
      title?: string;                         // flags.8?string
    },
  };

  export const chatInviteExported: TLConstructor<_ExportedChatInvite, "chatInviteExported">;
  export type ChatInvite<
    K extends keyof _ChatInvite = keyof _ChatInvite
  > = ToUnderscore<_ChatInvite, K>;
  export type _ChatInvite = {
    "chatInviteAlready": {
      chat: global.Chat;                      // Chat
    },
    "chatInvite": {
      channel?: true;                         // flags.0?true
      broadcast?: true;                       // flags.1?true
      public?: true;                          // flags.2?true
      megagroup?: true;                       // flags.3?true
      request_needed?: true;                  // flags.6?true
      title: string;                          // string
      about?: string;                         // flags.5?string
      photo: global.Photo;                    // Photo
      participants_count: number;             // int
      participants?: global.User[];           // flags.4?Vector<User>
    },
    "chatInvitePeek": {
      chat: global.Chat;                      // Chat
      expires: number;                        // int
    },
  };

  export const chatInviteAlready: TLConstructor<_ChatInvite, "chatInviteAlready">;
  export const chatInvite: TLConstructor<_ChatInvite, "chatInvite">;
  export const chatInvitePeek: TLConstructor<_ChatInvite, "chatInvitePeek">;
  export type InputStickerSet<
    K extends keyof _InputStickerSet = keyof _InputStickerSet
  > = ToUnderscore<_InputStickerSet, K>;
  export type _InputStickerSet = {
    "inputStickerSetEmpty": {}
    "inputStickerSetID": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputStickerSetShortName": {
      short_name: string;                     // string
    },
    "inputStickerSetAnimatedEmoji": {}
    "inputStickerSetDice": {
      emoticon: string;                       // string
    },
    "inputStickerSetAnimatedEmojiAnimations": {}
  };

  export const inputStickerSetEmpty: TLConstructorEmpty<"inputStickerSetEmpty">;
  export const inputStickerSetID: TLConstructor<_InputStickerSet, "inputStickerSetID">;
  export const inputStickerSetShortName: TLConstructor<_InputStickerSet, "inputStickerSetShortName">;
  export const inputStickerSetAnimatedEmoji: TLConstructorEmpty<"inputStickerSetAnimatedEmoji">;
  export const inputStickerSetDice: TLConstructor<_InputStickerSet, "inputStickerSetDice">;
  export const inputStickerSetAnimatedEmojiAnimations: TLConstructorEmpty<"inputStickerSetAnimatedEmojiAnimations">;
  export type StickerSet<
    K extends keyof _StickerSet = keyof _StickerSet
  > = ToUnderscore<_StickerSet, K>;
  export type _StickerSet = {
    "stickerSet": {
      archived?: true;                        // flags.1?true
      official?: true;                        // flags.2?true
      masks?: true;                           // flags.3?true
      animated?: true;                        // flags.5?true
      videos?: true;                          // flags.6?true
      installed_date?: number;                // flags.0?int
      id: bigint;                             // long
      access_hash: bigint;                    // long
      title: string;                          // string
      short_name: string;                     // string
      thumbs?: global.PhotoSize[];            // flags.4?Vector<PhotoSize>
      thumb_dc_id?: number;                   // flags.4?int
      thumb_version?: number;                 // flags.4?int
      count: number;                          // int
      hash: number;                           // int
    },
  };

  export const stickerSet: TLConstructor<_StickerSet, "stickerSet">;
  export type BotCommand<
    K extends keyof _BotCommand = keyof _BotCommand
  > = ToUnderscore<_BotCommand, K>;
  export type _BotCommand = {
    "botCommand": {
      command: string;                        // string
      description: string;                    // string
    },
  };

  export const botCommand: TLConstructor<_BotCommand, "botCommand">;
  export type BotInfo<
    K extends keyof _BotInfo = keyof _BotInfo
  > = ToUnderscore<_BotInfo, K>;
  export type _BotInfo = {
    "botInfo": {
      user_id: bigint;                        // long
      description: string;                    // string
      commands: global.BotCommand[];          // Vector<BotCommand>
    },
  };

  export const botInfo: TLConstructor<_BotInfo, "botInfo">;
  export type KeyboardButton<
    K extends keyof _KeyboardButton = keyof _KeyboardButton
  > = ToUnderscore<_KeyboardButton, K>;
  export type _KeyboardButton = {
    "keyboardButton": {
      text: string;                           // string
    },
    "keyboardButtonUrl": {
      text: string;                           // string
      url: string;                            // string
    },
    "keyboardButtonCallback": {
      requires_password?: true;               // flags.0?true
      text: string;                           // string
      data: BufferSource;                     // bytes
    },
    "keyboardButtonRequestPhone": {
      text: string;                           // string
    },
    "keyboardButtonRequestGeoLocation": {
      text: string;                           // string
    },
    "keyboardButtonSwitchInline": {
      same_peer?: true;                       // flags.0?true
      text: string;                           // string
      query: string;                          // string
    },
    "keyboardButtonGame": {
      text: string;                           // string
    },
    "keyboardButtonBuy": {
      text: string;                           // string
    },
    "keyboardButtonUrlAuth": {
      text: string;                           // string
      fwd_text?: string;                      // flags.0?string
      url: string;                            // string
      button_id: number;                      // int
    },
    "inputKeyboardButtonUrlAuth": {
      request_write_access?: true;            // flags.0?true
      text: string;                           // string
      fwd_text?: string;                      // flags.1?string
      url: string;                            // string
      bot: global.InputUser;                  // InputUser
    },
    "keyboardButtonRequestPoll": {
      quiz?: boolean;                         // flags.0?Bool
      text: string;                           // string
    },
    "inputKeyboardButtonUserProfile": {
      text: string;                           // string
      user_id: global.InputUser;              // InputUser
    },
    "keyboardButtonUserProfile": {
      text: string;                           // string
      user_id: bigint;                        // long
    },
  };

  export const keyboardButton: TLConstructor<_KeyboardButton, "keyboardButton">;
  export const keyboardButtonUrl: TLConstructor<_KeyboardButton, "keyboardButtonUrl">;
  export const keyboardButtonCallback: TLConstructor<_KeyboardButton, "keyboardButtonCallback">;
  export const keyboardButtonRequestPhone: TLConstructor<_KeyboardButton, "keyboardButtonRequestPhone">;
  export const keyboardButtonRequestGeoLocation: TLConstructor<_KeyboardButton, "keyboardButtonRequestGeoLocation">;
  export const keyboardButtonSwitchInline: TLConstructor<_KeyboardButton, "keyboardButtonSwitchInline">;
  export const keyboardButtonGame: TLConstructor<_KeyboardButton, "keyboardButtonGame">;
  export const keyboardButtonBuy: TLConstructor<_KeyboardButton, "keyboardButtonBuy">;
  export const keyboardButtonUrlAuth: TLConstructor<_KeyboardButton, "keyboardButtonUrlAuth">;
  export const inputKeyboardButtonUrlAuth: TLConstructor<_KeyboardButton, "inputKeyboardButtonUrlAuth">;
  export const keyboardButtonRequestPoll: TLConstructor<_KeyboardButton, "keyboardButtonRequestPoll">;
  export const inputKeyboardButtonUserProfile: TLConstructor<_KeyboardButton, "inputKeyboardButtonUserProfile">;
  export const keyboardButtonUserProfile: TLConstructor<_KeyboardButton, "keyboardButtonUserProfile">;
  export type KeyboardButtonRow<
    K extends keyof _KeyboardButtonRow = keyof _KeyboardButtonRow
  > = ToUnderscore<_KeyboardButtonRow, K>;
  export type _KeyboardButtonRow = {
    "keyboardButtonRow": {
      buttons: global.KeyboardButton[];       // Vector<KeyboardButton>
    },
  };

  export const keyboardButtonRow: TLConstructor<_KeyboardButtonRow, "keyboardButtonRow">;
  export type ReplyMarkup<
    K extends keyof _ReplyMarkup = keyof _ReplyMarkup
  > = ToUnderscore<_ReplyMarkup, K>;
  export type _ReplyMarkup = {
    "replyKeyboardHide": {
      selective?: true;                       // flags.2?true
    },
    "replyKeyboardForceReply": {
      single_use?: true;                      // flags.1?true
      selective?: true;                       // flags.2?true
      placeholder?: string;                   // flags.3?string
    },
    "replyKeyboardMarkup": {
      resize?: true;                          // flags.0?true
      single_use?: true;                      // flags.1?true
      selective?: true;                       // flags.2?true
      rows: global.KeyboardButtonRow[];       // Vector<KeyboardButtonRow>
      placeholder?: string;                   // flags.3?string
    },
    "replyInlineMarkup": {
      rows: global.KeyboardButtonRow[];       // Vector<KeyboardButtonRow>
    },
  };

  export const replyKeyboardHide: TLConstructor<_ReplyMarkup, "replyKeyboardHide">;
  export const replyKeyboardForceReply: TLConstructor<_ReplyMarkup, "replyKeyboardForceReply">;
  export const replyKeyboardMarkup: TLConstructor<_ReplyMarkup, "replyKeyboardMarkup">;
  export const replyInlineMarkup: TLConstructor<_ReplyMarkup, "replyInlineMarkup">;
  export type MessageEntity<
    K extends keyof _MessageEntity = keyof _MessageEntity
  > = ToUnderscore<_MessageEntity, K>;
  export type _MessageEntity = {
    "messageEntityUnknown": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityMention": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityHashtag": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityBotCommand": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityUrl": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityEmail": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityBold": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityItalic": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityCode": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityPre": {
      offset: number;                         // int
      length: number;                         // int
      language: string;                       // string
    },
    "messageEntityTextUrl": {
      offset: number;                         // int
      length: number;                         // int
      url: string;                            // string
    },
    "messageEntityMentionName": {
      offset: number;                         // int
      length: number;                         // int
      user_id: bigint;                        // long
    },
    "inputMessageEntityMentionName": {
      offset: number;                         // int
      length: number;                         // int
      user_id: global.InputUser;              // InputUser
    },
    "messageEntityPhone": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityCashtag": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityUnderline": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityStrike": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityBlockquote": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntityBankCard": {
      offset: number;                         // int
      length: number;                         // int
    },
    "messageEntitySpoiler": {
      offset: number;                         // int
      length: number;                         // int
    },
  };

  export const messageEntityUnknown: TLConstructor<_MessageEntity, "messageEntityUnknown">;
  export const messageEntityMention: TLConstructor<_MessageEntity, "messageEntityMention">;
  export const messageEntityHashtag: TLConstructor<_MessageEntity, "messageEntityHashtag">;
  export const messageEntityBotCommand: TLConstructor<_MessageEntity, "messageEntityBotCommand">;
  export const messageEntityUrl: TLConstructor<_MessageEntity, "messageEntityUrl">;
  export const messageEntityEmail: TLConstructor<_MessageEntity, "messageEntityEmail">;
  export const messageEntityBold: TLConstructor<_MessageEntity, "messageEntityBold">;
  export const messageEntityItalic: TLConstructor<_MessageEntity, "messageEntityItalic">;
  export const messageEntityCode: TLConstructor<_MessageEntity, "messageEntityCode">;
  export const messageEntityPre: TLConstructor<_MessageEntity, "messageEntityPre">;
  export const messageEntityTextUrl: TLConstructor<_MessageEntity, "messageEntityTextUrl">;
  export const messageEntityMentionName: TLConstructor<_MessageEntity, "messageEntityMentionName">;
  export const inputMessageEntityMentionName: TLConstructor<_MessageEntity, "inputMessageEntityMentionName">;
  export const messageEntityPhone: TLConstructor<_MessageEntity, "messageEntityPhone">;
  export const messageEntityCashtag: TLConstructor<_MessageEntity, "messageEntityCashtag">;
  export const messageEntityUnderline: TLConstructor<_MessageEntity, "messageEntityUnderline">;
  export const messageEntityStrike: TLConstructor<_MessageEntity, "messageEntityStrike">;
  export const messageEntityBlockquote: TLConstructor<_MessageEntity, "messageEntityBlockquote">;
  export const messageEntityBankCard: TLConstructor<_MessageEntity, "messageEntityBankCard">;
  export const messageEntitySpoiler: TLConstructor<_MessageEntity, "messageEntitySpoiler">;
  export type InputChannel<
    K extends keyof _InputChannel = keyof _InputChannel
  > = ToUnderscore<_InputChannel, K>;
  export type _InputChannel = {
    "inputChannelEmpty": {}
    "inputChannel": {
      channel_id: bigint;                     // long
      access_hash: bigint;                    // long
    },
    "inputChannelFromMessage": {
      peer: global.InputPeer;                 // InputPeer
      msg_id: number;                         // int
      channel_id: bigint;                     // long
    },
  };

  export const inputChannelEmpty: TLConstructorEmpty<"inputChannelEmpty">;
  export const inputChannel: TLConstructor<_InputChannel, "inputChannel">;
  export const inputChannelFromMessage: TLConstructor<_InputChannel, "inputChannelFromMessage">;
  export type MessageRange<
    K extends keyof _MessageRange = keyof _MessageRange
  > = ToUnderscore<_MessageRange, K>;
  export type _MessageRange = {
    "messageRange": {
      min_id: number;                         // int
      max_id: number;                         // int
    },
  };

  export const messageRange: TLConstructor<_MessageRange, "messageRange">;
  export type ChannelMessagesFilter<
    K extends keyof _ChannelMessagesFilter = keyof _ChannelMessagesFilter
  > = ToUnderscore<_ChannelMessagesFilter, K>;
  export type _ChannelMessagesFilter = {
    "channelMessagesFilterEmpty": {}
    "channelMessagesFilter": {
      exclude_new_messages?: true;            // flags.1?true
      ranges: global.MessageRange[];          // Vector<MessageRange>
    },
  };

  export const channelMessagesFilterEmpty: TLConstructorEmpty<"channelMessagesFilterEmpty">;
  export const channelMessagesFilter: TLConstructor<_ChannelMessagesFilter, "channelMessagesFilter">;
  export type ChannelParticipant<
    K extends keyof _ChannelParticipant = keyof _ChannelParticipant
  > = ToUnderscore<_ChannelParticipant, K>;
  export type _ChannelParticipant = {
    "channelParticipant": {
      user_id: bigint;                        // long
      date: number;                           // int
    },
    "channelParticipantSelf": {
      via_request?: true;                     // flags.0?true
      user_id: bigint;                        // long
      inviter_id: bigint;                     // long
      date: number;                           // int
    },
    "channelParticipantCreator": {
      user_id: bigint;                        // long
      admin_rights: global.ChatAdminRights;   // ChatAdminRights
      rank?: string;                          // flags.0?string
    },
    "channelParticipantAdmin": {
      can_edit?: true;                        // flags.0?true
      self?: true;                            // flags.1?true
      user_id: bigint;                        // long
      inviter_id?: bigint;                    // flags.1?long
      promoted_by: bigint;                    // long
      date: number;                           // int
      admin_rights: global.ChatAdminRights;   // ChatAdminRights
      rank?: string;                          // flags.2?string
    },
    "channelParticipantBanned": {
      left?: true;                            // flags.0?true
      peer: global.Peer;                      // Peer
      kicked_by: bigint;                      // long
      date: number;                           // int
      banned_rights: global.ChatBannedRights; // ChatBannedRights
    },
    "channelParticipantLeft": {
      peer: global.Peer;                      // Peer
    },
  };

  export const channelParticipant: TLConstructor<_ChannelParticipant, "channelParticipant">;
  export const channelParticipantSelf: TLConstructor<_ChannelParticipant, "channelParticipantSelf">;
  export const channelParticipantCreator: TLConstructor<_ChannelParticipant, "channelParticipantCreator">;
  export const channelParticipantAdmin: TLConstructor<_ChannelParticipant, "channelParticipantAdmin">;
  export const channelParticipantBanned: TLConstructor<_ChannelParticipant, "channelParticipantBanned">;
  export const channelParticipantLeft: TLConstructor<_ChannelParticipant, "channelParticipantLeft">;
  export type ChannelParticipantsFilter<
    K extends keyof _ChannelParticipantsFilter = keyof _ChannelParticipantsFilter
  > = ToUnderscore<_ChannelParticipantsFilter, K>;
  export type _ChannelParticipantsFilter = {
    "channelParticipantsRecent": {}
    "channelParticipantsAdmins": {}
    "channelParticipantsKicked": {
      q: string;                              // string
    },
    "channelParticipantsBots": {}
    "channelParticipantsBanned": {
      q: string;                              // string
    },
    "channelParticipantsSearch": {
      q: string;                              // string
    },
    "channelParticipantsContacts": {
      q: string;                              // string
    },
    "channelParticipantsMentions": {
      q?: string;                             // flags.0?string
      top_msg_id?: number;                    // flags.1?int
    },
  };

  export const channelParticipantsRecent: TLConstructorEmpty<"channelParticipantsRecent">;
  export const channelParticipantsAdmins: TLConstructorEmpty<"channelParticipantsAdmins">;
  export const channelParticipantsKicked: TLConstructor<_ChannelParticipantsFilter, "channelParticipantsKicked">;
  export const channelParticipantsBots: TLConstructorEmpty<"channelParticipantsBots">;
  export const channelParticipantsBanned: TLConstructor<_ChannelParticipantsFilter, "channelParticipantsBanned">;
  export const channelParticipantsSearch: TLConstructor<_ChannelParticipantsFilter, "channelParticipantsSearch">;
  export const channelParticipantsContacts: TLConstructor<_ChannelParticipantsFilter, "channelParticipantsContacts">;
  export const channelParticipantsMentions: TLConstructor<_ChannelParticipantsFilter, "channelParticipantsMentions">;
  export type InputBotInlineMessage<
    K extends keyof _InputBotInlineMessage = keyof _InputBotInlineMessage
  > = ToUnderscore<_InputBotInlineMessage, K>;
  export type _InputBotInlineMessage = {
    "inputBotInlineMessageMediaAuto": {
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.1?Vector<MessageEntity>
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "inputBotInlineMessageText": {
      no_webpage?: true;                      // flags.0?true
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.1?Vector<MessageEntity>
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "inputBotInlineMessageMediaGeo": {
      geo_point: global.InputGeoPoint;        // InputGeoPoint
      heading?: number;                       // flags.0?int
      period?: number;                        // flags.1?int
      proximity_notification_radius?: number; // flags.3?int
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "inputBotInlineMessageMediaVenue": {
      geo_point: global.InputGeoPoint;        // InputGeoPoint
      title: string;                          // string
      address: string;                        // string
      provider: string;                       // string
      venue_id: string;                       // string
      venue_type: string;                     // string
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "inputBotInlineMessageMediaContact": {
      phone_number: string;                   // string
      first_name: string;                     // string
      last_name: string;                      // string
      vcard: string;                          // string
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "inputBotInlineMessageGame": {
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "inputBotInlineMessageMediaInvoice": {
      title: string;                          // string
      description: string;                    // string
      photo?: global.InputWebDocument;        // flags.0?InputWebDocument
      invoice: global.Invoice;                // Invoice
      payload: BufferSource;                  // bytes
      provider: string;                       // string
      provider_data: global.DataJSON;         // DataJSON
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
  };

  export const inputBotInlineMessageMediaAuto: TLConstructor<_InputBotInlineMessage, "inputBotInlineMessageMediaAuto">;
  export const inputBotInlineMessageText: TLConstructor<_InputBotInlineMessage, "inputBotInlineMessageText">;
  export const inputBotInlineMessageMediaGeo: TLConstructor<_InputBotInlineMessage, "inputBotInlineMessageMediaGeo">;
  export const inputBotInlineMessageMediaVenue: TLConstructor<_InputBotInlineMessage, "inputBotInlineMessageMediaVenue">;
  export const inputBotInlineMessageMediaContact: TLConstructor<_InputBotInlineMessage, "inputBotInlineMessageMediaContact">;
  export const inputBotInlineMessageGame: TLConstructor<_InputBotInlineMessage, "inputBotInlineMessageGame">;
  export const inputBotInlineMessageMediaInvoice: TLConstructor<_InputBotInlineMessage, "inputBotInlineMessageMediaInvoice">;
  export type InputBotInlineResult<
    K extends keyof _InputBotInlineResult = keyof _InputBotInlineResult
  > = ToUnderscore<_InputBotInlineResult, K>;
  export type _InputBotInlineResult = {
    "inputBotInlineResult": {
      id: string;                             // string
      type: string;                           // string
      title?: string;                         // flags.1?string
      description?: string;                   // flags.2?string
      url?: string;                           // flags.3?string
      thumb?: global.InputWebDocument;        // flags.4?InputWebDocument
      content?: global.InputWebDocument;      // flags.5?InputWebDocument
      send_message: global.InputBotInlineMessage; // InputBotInlineMessage
    },
    "inputBotInlineResultPhoto": {
      id: string;                             // string
      type: string;                           // string
      photo: global.InputPhoto;               // InputPhoto
      send_message: global.InputBotInlineMessage; // InputBotInlineMessage
    },
    "inputBotInlineResultDocument": {
      id: string;                             // string
      type: string;                           // string
      title?: string;                         // flags.1?string
      description?: string;                   // flags.2?string
      document: global.InputDocument;         // InputDocument
      send_message: global.InputBotInlineMessage; // InputBotInlineMessage
    },
    "inputBotInlineResultGame": {
      id: string;                             // string
      short_name: string;                     // string
      send_message: global.InputBotInlineMessage; // InputBotInlineMessage
    },
  };

  export const inputBotInlineResult: TLConstructor<_InputBotInlineResult, "inputBotInlineResult">;
  export const inputBotInlineResultPhoto: TLConstructor<_InputBotInlineResult, "inputBotInlineResultPhoto">;
  export const inputBotInlineResultDocument: TLConstructor<_InputBotInlineResult, "inputBotInlineResultDocument">;
  export const inputBotInlineResultGame: TLConstructor<_InputBotInlineResult, "inputBotInlineResultGame">;
  export type BotInlineMessage<
    K extends keyof _BotInlineMessage = keyof _BotInlineMessage
  > = ToUnderscore<_BotInlineMessage, K>;
  export type _BotInlineMessage = {
    "botInlineMessageMediaAuto": {
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.1?Vector<MessageEntity>
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "botInlineMessageText": {
      no_webpage?: true;                      // flags.0?true
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.1?Vector<MessageEntity>
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "botInlineMessageMediaGeo": {
      geo: global.GeoPoint;                   // GeoPoint
      heading?: number;                       // flags.0?int
      period?: number;                        // flags.1?int
      proximity_notification_radius?: number; // flags.3?int
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "botInlineMessageMediaVenue": {
      geo: global.GeoPoint;                   // GeoPoint
      title: string;                          // string
      address: string;                        // string
      provider: string;                       // string
      venue_id: string;                       // string
      venue_type: string;                     // string
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "botInlineMessageMediaContact": {
      phone_number: string;                   // string
      first_name: string;                     // string
      last_name: string;                      // string
      vcard: string;                          // string
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
    "botInlineMessageMediaInvoice": {
      shipping_address_requested?: true;      // flags.1?true
      test?: true;                            // flags.3?true
      title: string;                          // string
      description: string;                    // string
      photo?: global.WebDocument;             // flags.0?WebDocument
      currency: string;                       // string
      total_amount: bigint;                   // long
      reply_markup?: global.ReplyMarkup;      // flags.2?ReplyMarkup
    },
  };

  export const botInlineMessageMediaAuto: TLConstructor<_BotInlineMessage, "botInlineMessageMediaAuto">;
  export const botInlineMessageText: TLConstructor<_BotInlineMessage, "botInlineMessageText">;
  export const botInlineMessageMediaGeo: TLConstructor<_BotInlineMessage, "botInlineMessageMediaGeo">;
  export const botInlineMessageMediaVenue: TLConstructor<_BotInlineMessage, "botInlineMessageMediaVenue">;
  export const botInlineMessageMediaContact: TLConstructor<_BotInlineMessage, "botInlineMessageMediaContact">;
  export const botInlineMessageMediaInvoice: TLConstructor<_BotInlineMessage, "botInlineMessageMediaInvoice">;
  export type BotInlineResult<
    K extends keyof _BotInlineResult = keyof _BotInlineResult
  > = ToUnderscore<_BotInlineResult, K>;
  export type _BotInlineResult = {
    "botInlineResult": {
      id: string;                             // string
      type: string;                           // string
      title?: string;                         // flags.1?string
      description?: string;                   // flags.2?string
      url?: string;                           // flags.3?string
      thumb?: global.WebDocument;             // flags.4?WebDocument
      content?: global.WebDocument;           // flags.5?WebDocument
      send_message: global.BotInlineMessage;  // BotInlineMessage
    },
    "botInlineMediaResult": {
      id: string;                             // string
      type: string;                           // string
      photo?: global.Photo;                   // flags.0?Photo
      document?: global.Document;             // flags.1?Document
      title?: string;                         // flags.2?string
      description?: string;                   // flags.3?string
      send_message: global.BotInlineMessage;  // BotInlineMessage
    },
  };

  export const botInlineResult: TLConstructor<_BotInlineResult, "botInlineResult">;
  export const botInlineMediaResult: TLConstructor<_BotInlineResult, "botInlineMediaResult">;
  export type ExportedMessageLink<
    K extends keyof _ExportedMessageLink = keyof _ExportedMessageLink
  > = ToUnderscore<_ExportedMessageLink, K>;
  export type _ExportedMessageLink = {
    "exportedMessageLink": {
      link: string;                           // string
      html: string;                           // string
    },
  };

  export const exportedMessageLink: TLConstructor<_ExportedMessageLink, "exportedMessageLink">;
  export type MessageFwdHeader<
    K extends keyof _MessageFwdHeader = keyof _MessageFwdHeader
  > = ToUnderscore<_MessageFwdHeader, K>;
  export type _MessageFwdHeader = {
    "messageFwdHeader": {
      imported?: true;                        // flags.7?true
      from_id?: global.Peer;                  // flags.0?Peer
      from_name?: string;                     // flags.5?string
      date: number;                           // int
      channel_post?: number;                  // flags.2?int
      post_author?: string;                   // flags.3?string
      saved_from_peer?: global.Peer;          // flags.4?Peer
      saved_from_msg_id?: number;             // flags.4?int
      psa_type?: string;                      // flags.6?string
    },
  };

  export const messageFwdHeader: TLConstructor<_MessageFwdHeader, "messageFwdHeader">;
  export type InputBotInlineMessageID<
    K extends keyof _InputBotInlineMessageID = keyof _InputBotInlineMessageID
  > = ToUnderscore<_InputBotInlineMessageID, K>;
  export type _InputBotInlineMessageID = {
    "inputBotInlineMessageID": {
      dc_id: number;                          // int
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputBotInlineMessageID64": {
      dc_id: number;                          // int
      owner_id: bigint;                       // long
      id: number;                             // int
      access_hash: bigint;                    // long
    },
  };

  export const inputBotInlineMessageID: TLConstructor<_InputBotInlineMessageID, "inputBotInlineMessageID">;
  export const inputBotInlineMessageID64: TLConstructor<_InputBotInlineMessageID, "inputBotInlineMessageID64">;
  export type InlineBotSwitchPM<
    K extends keyof _InlineBotSwitchPM = keyof _InlineBotSwitchPM
  > = ToUnderscore<_InlineBotSwitchPM, K>;
  export type _InlineBotSwitchPM = {
    "inlineBotSwitchPM": {
      text: string;                           // string
      start_param: string;                    // string
    },
  };

  export const inlineBotSwitchPM: TLConstructor<_InlineBotSwitchPM, "inlineBotSwitchPM">;
  export type TopPeer<
    K extends keyof _TopPeer = keyof _TopPeer
  > = ToUnderscore<_TopPeer, K>;
  export type _TopPeer = {
    "topPeer": {
      peer: global.Peer;                      // Peer
      rating: number;                         // double
    },
  };

  export const topPeer: TLConstructor<_TopPeer, "topPeer">;
  export type TopPeerCategory<
    K extends keyof _TopPeerCategory = keyof _TopPeerCategory
  > = ToUnderscore<_TopPeerCategory, K>;
  export type _TopPeerCategory = {
    "topPeerCategoryBotsPM": {}
    "topPeerCategoryBotsInline": {}
    "topPeerCategoryCorrespondents": {}
    "topPeerCategoryGroups": {}
    "topPeerCategoryChannels": {}
    "topPeerCategoryPhoneCalls": {}
    "topPeerCategoryForwardUsers": {}
    "topPeerCategoryForwardChats": {}
  };

  export const topPeerCategoryBotsPM: TLConstructorEmpty<"topPeerCategoryBotsPM">;
  export const topPeerCategoryBotsInline: TLConstructorEmpty<"topPeerCategoryBotsInline">;
  export const topPeerCategoryCorrespondents: TLConstructorEmpty<"topPeerCategoryCorrespondents">;
  export const topPeerCategoryGroups: TLConstructorEmpty<"topPeerCategoryGroups">;
  export const topPeerCategoryChannels: TLConstructorEmpty<"topPeerCategoryChannels">;
  export const topPeerCategoryPhoneCalls: TLConstructorEmpty<"topPeerCategoryPhoneCalls">;
  export const topPeerCategoryForwardUsers: TLConstructorEmpty<"topPeerCategoryForwardUsers">;
  export const topPeerCategoryForwardChats: TLConstructorEmpty<"topPeerCategoryForwardChats">;
  export type TopPeerCategoryPeers<
    K extends keyof _TopPeerCategoryPeers = keyof _TopPeerCategoryPeers
  > = ToUnderscore<_TopPeerCategoryPeers, K>;
  export type _TopPeerCategoryPeers = {
    "topPeerCategoryPeers": {
      category: global.TopPeerCategory;       // TopPeerCategory
      count: number;                          // int
      peers: global.TopPeer[];                // Vector<TopPeer>
    },
  };

  export const topPeerCategoryPeers: TLConstructor<_TopPeerCategoryPeers, "topPeerCategoryPeers">;
  export type DraftMessage<
    K extends keyof _DraftMessage = keyof _DraftMessage
  > = ToUnderscore<_DraftMessage, K>;
  export type _DraftMessage = {
    "draftMessageEmpty": {
      date?: number;                          // flags.0?int
    },
    "draftMessage": {
      no_webpage?: true;                      // flags.1?true
      reply_to_msg_id?: number;               // flags.0?int
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.3?Vector<MessageEntity>
      date: number;                           // int
    },
  };

  export const draftMessageEmpty: TLConstructor<_DraftMessage, "draftMessageEmpty">;
  export const draftMessage: TLConstructor<_DraftMessage, "draftMessage">;
  export type StickerSetCovered<
    K extends keyof _StickerSetCovered = keyof _StickerSetCovered
  > = ToUnderscore<_StickerSetCovered, K>;
  export type _StickerSetCovered = {
    "stickerSetCovered": {
      set: global.StickerSet;                 // StickerSet
      cover: global.Document;                 // Document
    },
    "stickerSetMultiCovered": {
      set: global.StickerSet;                 // StickerSet
      covers: global.Document[];              // Vector<Document>
    },
  };

  export const stickerSetCovered: TLConstructor<_StickerSetCovered, "stickerSetCovered">;
  export const stickerSetMultiCovered: TLConstructor<_StickerSetCovered, "stickerSetMultiCovered">;
  export type MaskCoords<
    K extends keyof _MaskCoords = keyof _MaskCoords
  > = ToUnderscore<_MaskCoords, K>;
  export type _MaskCoords = {
    "maskCoords": {
      n: number;                              // int
      x: number;                              // double
      y: number;                              // double
      zoom: number;                           // double
    },
  };

  export const maskCoords: TLConstructor<_MaskCoords, "maskCoords">;
  export type InputStickeredMedia<
    K extends keyof _InputStickeredMedia = keyof _InputStickeredMedia
  > = ToUnderscore<_InputStickeredMedia, K>;
  export type _InputStickeredMedia = {
    "inputStickeredMediaPhoto": {
      id: global.InputPhoto;                  // InputPhoto
    },
    "inputStickeredMediaDocument": {
      id: global.InputDocument;               // InputDocument
    },
  };

  export const inputStickeredMediaPhoto: TLConstructor<_InputStickeredMedia, "inputStickeredMediaPhoto">;
  export const inputStickeredMediaDocument: TLConstructor<_InputStickeredMedia, "inputStickeredMediaDocument">;
  export type Game<
    K extends keyof _Game = keyof _Game
  > = ToUnderscore<_Game, K>;
  export type _Game = {
    "game": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      short_name: string;                     // string
      title: string;                          // string
      description: string;                    // string
      photo: global.Photo;                    // Photo
      document?: global.Document;             // flags.0?Document
    },
  };

  export const game: TLConstructor<_Game, "game">;
  export type InputGame<
    K extends keyof _InputGame = keyof _InputGame
  > = ToUnderscore<_InputGame, K>;
  export type _InputGame = {
    "inputGameID": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputGameShortName": {
      bot_id: global.InputUser;               // InputUser
      short_name: string;                     // string
    },
  };

  export const inputGameID: TLConstructor<_InputGame, "inputGameID">;
  export const inputGameShortName: TLConstructor<_InputGame, "inputGameShortName">;
  export type HighScore<
    K extends keyof _HighScore = keyof _HighScore
  > = ToUnderscore<_HighScore, K>;
  export type _HighScore = {
    "highScore": {
      pos: number;                            // int
      user_id: bigint;                        // long
      score: number;                          // int
    },
  };

  export const highScore: TLConstructor<_HighScore, "highScore">;
  export type RichText<
    K extends keyof _RichText = keyof _RichText
  > = ToUnderscore<_RichText, K>;
  export type _RichText = {
    "textEmpty": {}
    "textPlain": {
      text: string;                           // string
    },
    "textBold": {
      text: global.RichText;                  // RichText
    },
    "textItalic": {
      text: global.RichText;                  // RichText
    },
    "textUnderline": {
      text: global.RichText;                  // RichText
    },
    "textStrike": {
      text: global.RichText;                  // RichText
    },
    "textFixed": {
      text: global.RichText;                  // RichText
    },
    "textUrl": {
      text: global.RichText;                  // RichText
      url: string;                            // string
      webpage_id: bigint;                     // long
    },
    "textEmail": {
      text: global.RichText;                  // RichText
      email: string;                          // string
    },
    "textConcat": {
      texts: global.RichText[];               // Vector<RichText>
    },
    "textSubscript": {
      text: global.RichText;                  // RichText
    },
    "textSuperscript": {
      text: global.RichText;                  // RichText
    },
    "textMarked": {
      text: global.RichText;                  // RichText
    },
    "textPhone": {
      text: global.RichText;                  // RichText
      phone: string;                          // string
    },
    "textImage": {
      document_id: bigint;                    // long
      w: number;                              // int
      h: number;                              // int
    },
    "textAnchor": {
      text: global.RichText;                  // RichText
      name: string;                           // string
    },
  };

  export const textEmpty: TLConstructorEmpty<"textEmpty">;
  export const textPlain: TLConstructor<_RichText, "textPlain">;
  export const textBold: TLConstructor<_RichText, "textBold">;
  export const textItalic: TLConstructor<_RichText, "textItalic">;
  export const textUnderline: TLConstructor<_RichText, "textUnderline">;
  export const textStrike: TLConstructor<_RichText, "textStrike">;
  export const textFixed: TLConstructor<_RichText, "textFixed">;
  export const textUrl: TLConstructor<_RichText, "textUrl">;
  export const textEmail: TLConstructor<_RichText, "textEmail">;
  export const textConcat: TLConstructor<_RichText, "textConcat">;
  export const textSubscript: TLConstructor<_RichText, "textSubscript">;
  export const textSuperscript: TLConstructor<_RichText, "textSuperscript">;
  export const textMarked: TLConstructor<_RichText, "textMarked">;
  export const textPhone: TLConstructor<_RichText, "textPhone">;
  export const textImage: TLConstructor<_RichText, "textImage">;
  export const textAnchor: TLConstructor<_RichText, "textAnchor">;
  export type PageBlock<
    K extends keyof _PageBlock = keyof _PageBlock
  > = ToUnderscore<_PageBlock, K>;
  export type _PageBlock = {
    "pageBlockUnsupported": {}
    "pageBlockTitle": {
      text: global.RichText;                  // RichText
    },
    "pageBlockSubtitle": {
      text: global.RichText;                  // RichText
    },
    "pageBlockAuthorDate": {
      author: global.RichText;                // RichText
      published_date: number;                 // int
    },
    "pageBlockHeader": {
      text: global.RichText;                  // RichText
    },
    "pageBlockSubheader": {
      text: global.RichText;                  // RichText
    },
    "pageBlockParagraph": {
      text: global.RichText;                  // RichText
    },
    "pageBlockPreformatted": {
      text: global.RichText;                  // RichText
      language: string;                       // string
    },
    "pageBlockFooter": {
      text: global.RichText;                  // RichText
    },
    "pageBlockDivider": {}
    "pageBlockAnchor": {
      name: string;                           // string
    },
    "pageBlockList": {
      items: global.PageListItem[];           // Vector<PageListItem>
    },
    "pageBlockBlockquote": {
      text: global.RichText;                  // RichText
      caption: global.RichText;               // RichText
    },
    "pageBlockPullquote": {
      text: global.RichText;                  // RichText
      caption: global.RichText;               // RichText
    },
    "pageBlockPhoto": {
      photo_id: bigint;                       // long
      caption: global.PageCaption;            // PageCaption
      url?: string;                           // flags.0?string
      webpage_id?: bigint;                    // flags.0?long
    },
    "pageBlockVideo": {
      autoplay?: true;                        // flags.0?true
      loop?: true;                            // flags.1?true
      video_id: bigint;                       // long
      caption: global.PageCaption;            // PageCaption
    },
    "pageBlockCover": {
      cover: global.PageBlock;                // PageBlock
    },
    "pageBlockEmbed": {
      full_width?: true;                      // flags.0?true
      allow_scrolling?: true;                 // flags.3?true
      url?: string;                           // flags.1?string
      html?: string;                          // flags.2?string
      poster_photo_id?: bigint;               // flags.4?long
      w?: number;                             // flags.5?int
      h?: number;                             // flags.5?int
      caption: global.PageCaption;            // PageCaption
    },
    "pageBlockEmbedPost": {
      url: string;                            // string
      webpage_id: bigint;                     // long
      author_photo_id: bigint;                // long
      author: string;                         // string
      date: number;                           // int
      blocks: global.PageBlock[];             // Vector<PageBlock>
      caption: global.PageCaption;            // PageCaption
    },
    "pageBlockCollage": {
      items: global.PageBlock[];              // Vector<PageBlock>
      caption: global.PageCaption;            // PageCaption
    },
    "pageBlockSlideshow": {
      items: global.PageBlock[];              // Vector<PageBlock>
      caption: global.PageCaption;            // PageCaption
    },
    "pageBlockChannel": {
      channel: global.Chat;                   // Chat
    },
    "pageBlockAudio": {
      audio_id: bigint;                       // long
      caption: global.PageCaption;            // PageCaption
    },
    "pageBlockKicker": {
      text: global.RichText;                  // RichText
    },
    "pageBlockTable": {
      bordered?: true;                        // flags.0?true
      striped?: true;                         // flags.1?true
      title: global.RichText;                 // RichText
      rows: global.PageTableRow[];            // Vector<PageTableRow>
    },
    "pageBlockOrderedList": {
      items: global.PageListOrderedItem[];    // Vector<PageListOrderedItem>
    },
    "pageBlockDetails": {
      open?: true;                            // flags.0?true
      blocks: global.PageBlock[];             // Vector<PageBlock>
      title: global.RichText;                 // RichText
    },
    "pageBlockRelatedArticles": {
      title: global.RichText;                 // RichText
      articles: global.PageRelatedArticle[];  // Vector<PageRelatedArticle>
    },
    "pageBlockMap": {
      geo: global.GeoPoint;                   // GeoPoint
      zoom: number;                           // int
      w: number;                              // int
      h: number;                              // int
      caption: global.PageCaption;            // PageCaption
    },
  };

  export const pageBlockUnsupported: TLConstructorEmpty<"pageBlockUnsupported">;
  export const pageBlockTitle: TLConstructor<_PageBlock, "pageBlockTitle">;
  export const pageBlockSubtitle: TLConstructor<_PageBlock, "pageBlockSubtitle">;
  export const pageBlockAuthorDate: TLConstructor<_PageBlock, "pageBlockAuthorDate">;
  export const pageBlockHeader: TLConstructor<_PageBlock, "pageBlockHeader">;
  export const pageBlockSubheader: TLConstructor<_PageBlock, "pageBlockSubheader">;
  export const pageBlockParagraph: TLConstructor<_PageBlock, "pageBlockParagraph">;
  export const pageBlockPreformatted: TLConstructor<_PageBlock, "pageBlockPreformatted">;
  export const pageBlockFooter: TLConstructor<_PageBlock, "pageBlockFooter">;
  export const pageBlockDivider: TLConstructorEmpty<"pageBlockDivider">;
  export const pageBlockAnchor: TLConstructor<_PageBlock, "pageBlockAnchor">;
  export const pageBlockList: TLConstructor<_PageBlock, "pageBlockList">;
  export const pageBlockBlockquote: TLConstructor<_PageBlock, "pageBlockBlockquote">;
  export const pageBlockPullquote: TLConstructor<_PageBlock, "pageBlockPullquote">;
  export const pageBlockPhoto: TLConstructor<_PageBlock, "pageBlockPhoto">;
  export const pageBlockVideo: TLConstructor<_PageBlock, "pageBlockVideo">;
  export const pageBlockCover: TLConstructor<_PageBlock, "pageBlockCover">;
  export const pageBlockEmbed: TLConstructor<_PageBlock, "pageBlockEmbed">;
  export const pageBlockEmbedPost: TLConstructor<_PageBlock, "pageBlockEmbedPost">;
  export const pageBlockCollage: TLConstructor<_PageBlock, "pageBlockCollage">;
  export const pageBlockSlideshow: TLConstructor<_PageBlock, "pageBlockSlideshow">;
  export const pageBlockChannel: TLConstructor<_PageBlock, "pageBlockChannel">;
  export const pageBlockAudio: TLConstructor<_PageBlock, "pageBlockAudio">;
  export const pageBlockKicker: TLConstructor<_PageBlock, "pageBlockKicker">;
  export const pageBlockTable: TLConstructor<_PageBlock, "pageBlockTable">;
  export const pageBlockOrderedList: TLConstructor<_PageBlock, "pageBlockOrderedList">;
  export const pageBlockDetails: TLConstructor<_PageBlock, "pageBlockDetails">;
  export const pageBlockRelatedArticles: TLConstructor<_PageBlock, "pageBlockRelatedArticles">;
  export const pageBlockMap: TLConstructor<_PageBlock, "pageBlockMap">;
  export type PhoneCallDiscardReason<
    K extends keyof _PhoneCallDiscardReason = keyof _PhoneCallDiscardReason
  > = ToUnderscore<_PhoneCallDiscardReason, K>;
  export type _PhoneCallDiscardReason = {
    "phoneCallDiscardReasonMissed": {}
    "phoneCallDiscardReasonDisconnect": {}
    "phoneCallDiscardReasonHangup": {}
    "phoneCallDiscardReasonBusy": {}
  };

  export const phoneCallDiscardReasonMissed: TLConstructorEmpty<"phoneCallDiscardReasonMissed">;
  export const phoneCallDiscardReasonDisconnect: TLConstructorEmpty<"phoneCallDiscardReasonDisconnect">;
  export const phoneCallDiscardReasonHangup: TLConstructorEmpty<"phoneCallDiscardReasonHangup">;
  export const phoneCallDiscardReasonBusy: TLConstructorEmpty<"phoneCallDiscardReasonBusy">;
  export type DataJSON<
    K extends keyof _DataJSON = keyof _DataJSON
  > = ToUnderscore<_DataJSON, K>;
  export type _DataJSON = {
    "dataJSON": {
      data: string;                           // string
    },
  };

  export const dataJSON: TLConstructor<_DataJSON, "dataJSON">;
  export type LabeledPrice<
    K extends keyof _LabeledPrice = keyof _LabeledPrice
  > = ToUnderscore<_LabeledPrice, K>;
  export type _LabeledPrice = {
    "labeledPrice": {
      label: string;                          // string
      amount: bigint;                         // long
    },
  };

  export const labeledPrice: TLConstructor<_LabeledPrice, "labeledPrice">;
  export type Invoice<
    K extends keyof _Invoice = keyof _Invoice
  > = ToUnderscore<_Invoice, K>;
  export type _Invoice = {
    "invoice": {
      test?: true;                            // flags.0?true
      name_requested?: true;                  // flags.1?true
      phone_requested?: true;                 // flags.2?true
      email_requested?: true;                 // flags.3?true
      shipping_address_requested?: true;      // flags.4?true
      flexible?: true;                        // flags.5?true
      phone_to_provider?: true;               // flags.6?true
      email_to_provider?: true;               // flags.7?true
      currency: string;                       // string
      prices: global.LabeledPrice[];          // Vector<LabeledPrice>
      max_tip_amount?: bigint;                // flags.8?long
      suggested_tip_amounts?: bigint[];       // flags.8?Vector<long>
    },
  };

  export const invoice: TLConstructor<_Invoice, "invoice">;
  export type PaymentCharge<
    K extends keyof _PaymentCharge = keyof _PaymentCharge
  > = ToUnderscore<_PaymentCharge, K>;
  export type _PaymentCharge = {
    "paymentCharge": {
      id: string;                             // string
      provider_charge_id: string;             // string
    },
  };

  export const paymentCharge: TLConstructor<_PaymentCharge, "paymentCharge">;
  export type PostAddress<
    K extends keyof _PostAddress = keyof _PostAddress
  > = ToUnderscore<_PostAddress, K>;
  export type _PostAddress = {
    "postAddress": {
      street_line1: string;                   // string
      street_line2: string;                   // string
      city: string;                           // string
      state: string;                          // string
      country_iso2: string;                   // string
      post_code: string;                      // string
    },
  };

  export const postAddress: TLConstructor<_PostAddress, "postAddress">;
  export type PaymentRequestedInfo<
    K extends keyof _PaymentRequestedInfo = keyof _PaymentRequestedInfo
  > = ToUnderscore<_PaymentRequestedInfo, K>;
  export type _PaymentRequestedInfo = {
    "paymentRequestedInfo": {
      name?: string;                          // flags.0?string
      phone?: string;                         // flags.1?string
      email?: string;                         // flags.2?string
      shipping_address?: global.PostAddress;  // flags.3?PostAddress
    },
  };

  export const paymentRequestedInfo: TLConstructor<_PaymentRequestedInfo, "paymentRequestedInfo">;
  export type PaymentSavedCredentials<
    K extends keyof _PaymentSavedCredentials = keyof _PaymentSavedCredentials
  > = ToUnderscore<_PaymentSavedCredentials, K>;
  export type _PaymentSavedCredentials = {
    "paymentSavedCredentialsCard": {
      id: string;                             // string
      title: string;                          // string
    },
  };

  export const paymentSavedCredentialsCard: TLConstructor<_PaymentSavedCredentials, "paymentSavedCredentialsCard">;
  export type WebDocument<
    K extends keyof _WebDocument = keyof _WebDocument
  > = ToUnderscore<_WebDocument, K>;
  export type _WebDocument = {
    "webDocument": {
      url: string;                            // string
      access_hash: bigint;                    // long
      size: number;                           // int
      mime_type: string;                      // string
      attributes: global.DocumentAttribute[]; // Vector<DocumentAttribute>
    },
    "webDocumentNoProxy": {
      url: string;                            // string
      size: number;                           // int
      mime_type: string;                      // string
      attributes: global.DocumentAttribute[]; // Vector<DocumentAttribute>
    },
  };

  export const webDocument: TLConstructor<_WebDocument, "webDocument">;
  export const webDocumentNoProxy: TLConstructor<_WebDocument, "webDocumentNoProxy">;
  export type InputWebDocument<
    K extends keyof _InputWebDocument = keyof _InputWebDocument
  > = ToUnderscore<_InputWebDocument, K>;
  export type _InputWebDocument = {
    "inputWebDocument": {
      url: string;                            // string
      size: number;                           // int
      mime_type: string;                      // string
      attributes: global.DocumentAttribute[]; // Vector<DocumentAttribute>
    },
  };

  export const inputWebDocument: TLConstructor<_InputWebDocument, "inputWebDocument">;
  export type InputWebFileLocation<
    K extends keyof _InputWebFileLocation = keyof _InputWebFileLocation
  > = ToUnderscore<_InputWebFileLocation, K>;
  export type _InputWebFileLocation = {
    "inputWebFileLocation": {
      url: string;                            // string
      access_hash: bigint;                    // long
    },
    "inputWebFileGeoPointLocation": {
      geo_point: global.InputGeoPoint;        // InputGeoPoint
      access_hash: bigint;                    // long
      w: number;                              // int
      h: number;                              // int
      zoom: number;                           // int
      scale: number;                          // int
    },
  };

  export const inputWebFileLocation: TLConstructor<_InputWebFileLocation, "inputWebFileLocation">;
  export const inputWebFileGeoPointLocation: TLConstructor<_InputWebFileLocation, "inputWebFileGeoPointLocation">;
  export type InputPaymentCredentials<
    K extends keyof _InputPaymentCredentials = keyof _InputPaymentCredentials
  > = ToUnderscore<_InputPaymentCredentials, K>;
  export type _InputPaymentCredentials = {
    "inputPaymentCredentialsSaved": {
      id: string;                             // string
      tmp_password: BufferSource;             // bytes
    },
    "inputPaymentCredentials": {
      save?: true;                            // flags.0?true
      data: global.DataJSON;                  // DataJSON
    },
    "inputPaymentCredentialsApplePay": {
      payment_data: global.DataJSON;          // DataJSON
    },
    "inputPaymentCredentialsGooglePay": {
      payment_token: global.DataJSON;         // DataJSON
    },
  };

  export const inputPaymentCredentialsSaved: TLConstructor<_InputPaymentCredentials, "inputPaymentCredentialsSaved">;
  export const inputPaymentCredentials: TLConstructor<_InputPaymentCredentials, "inputPaymentCredentials">;
  export const inputPaymentCredentialsApplePay: TLConstructor<_InputPaymentCredentials, "inputPaymentCredentialsApplePay">;
  export const inputPaymentCredentialsGooglePay: TLConstructor<_InputPaymentCredentials, "inputPaymentCredentialsGooglePay">;
  export type ShippingOption<
    K extends keyof _ShippingOption = keyof _ShippingOption
  > = ToUnderscore<_ShippingOption, K>;
  export type _ShippingOption = {
    "shippingOption": {
      id: string;                             // string
      title: string;                          // string
      prices: global.LabeledPrice[];          // Vector<LabeledPrice>
    },
  };

  export const shippingOption: TLConstructor<_ShippingOption, "shippingOption">;
  export type InputStickerSetItem<
    K extends keyof _InputStickerSetItem = keyof _InputStickerSetItem
  > = ToUnderscore<_InputStickerSetItem, K>;
  export type _InputStickerSetItem = {
    "inputStickerSetItem": {
      document: global.InputDocument;         // InputDocument
      emoji: string;                          // string
      mask_coords?: global.MaskCoords;        // flags.0?MaskCoords
    },
  };

  export const inputStickerSetItem: TLConstructor<_InputStickerSetItem, "inputStickerSetItem">;
  export type InputPhoneCall<
    K extends keyof _InputPhoneCall = keyof _InputPhoneCall
  > = ToUnderscore<_InputPhoneCall, K>;
  export type _InputPhoneCall = {
    "inputPhoneCall": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
  };

  export const inputPhoneCall: TLConstructor<_InputPhoneCall, "inputPhoneCall">;
  export type PhoneCall<
    K extends keyof _PhoneCall = keyof _PhoneCall
  > = ToUnderscore<_PhoneCall, K>;
  export type _PhoneCall = {
    "phoneCallEmpty": {
      id: bigint;                             // long
    },
    "phoneCallWaiting": {
      video?: true;                           // flags.6?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      date: number;                           // int
      admin_id: bigint;                       // long
      participant_id: bigint;                 // long
      protocol: global.PhoneCallProtocol;     // PhoneCallProtocol
      receive_date?: number;                  // flags.0?int
    },
    "phoneCallRequested": {
      video?: true;                           // flags.6?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      date: number;                           // int
      admin_id: bigint;                       // long
      participant_id: bigint;                 // long
      g_a_hash: BufferSource;                 // bytes
      protocol: global.PhoneCallProtocol;     // PhoneCallProtocol
    },
    "phoneCallAccepted": {
      video?: true;                           // flags.6?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      date: number;                           // int
      admin_id: bigint;                       // long
      participant_id: bigint;                 // long
      g_b: BufferSource;                      // bytes
      protocol: global.PhoneCallProtocol;     // PhoneCallProtocol
    },
    "phoneCall": {
      p2p_allowed?: true;                     // flags.5?true
      video?: true;                           // flags.6?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      date: number;                           // int
      admin_id: bigint;                       // long
      participant_id: bigint;                 // long
      g_a_or_b: BufferSource;                 // bytes
      key_fingerprint: bigint;                // long
      protocol: global.PhoneCallProtocol;     // PhoneCallProtocol
      connections: global.PhoneConnection[];  // Vector<PhoneConnection>
      start_date: number;                     // int
    },
    "phoneCallDiscarded": {
      need_rating?: true;                     // flags.2?true
      need_debug?: true;                      // flags.3?true
      video?: true;                           // flags.6?true
      id: bigint;                             // long
      reason?: global.PhoneCallDiscardReason; // flags.0?PhoneCallDiscardReason
      duration?: number;                      // flags.1?int
    },
  };

  export const phoneCallEmpty: TLConstructor<_PhoneCall, "phoneCallEmpty">;
  export const phoneCallWaiting: TLConstructor<_PhoneCall, "phoneCallWaiting">;
  export const phoneCallRequested: TLConstructor<_PhoneCall, "phoneCallRequested">;
  export const phoneCallAccepted: TLConstructor<_PhoneCall, "phoneCallAccepted">;
  export const phoneCall: TLConstructor<_PhoneCall, "phoneCall">;
  export const phoneCallDiscarded: TLConstructor<_PhoneCall, "phoneCallDiscarded">;
  export type PhoneConnection<
    K extends keyof _PhoneConnection = keyof _PhoneConnection
  > = ToUnderscore<_PhoneConnection, K>;
  export type _PhoneConnection = {
    "phoneConnection": {
      id: bigint;                             // long
      ip: string;                             // string
      ipv6: string;                           // string
      port: number;                           // int
      peer_tag: BufferSource;                 // bytes
    },
    "phoneConnectionWebrtc": {
      turn?: true;                            // flags.0?true
      stun?: true;                            // flags.1?true
      id: bigint;                             // long
      ip: string;                             // string
      ipv6: string;                           // string
      port: number;                           // int
      username: string;                       // string
      password: string;                       // string
    },
  };

  export const phoneConnection: TLConstructor<_PhoneConnection, "phoneConnection">;
  export const phoneConnectionWebrtc: TLConstructor<_PhoneConnection, "phoneConnectionWebrtc">;
  export type PhoneCallProtocol<
    K extends keyof _PhoneCallProtocol = keyof _PhoneCallProtocol
  > = ToUnderscore<_PhoneCallProtocol, K>;
  export type _PhoneCallProtocol = {
    "phoneCallProtocol": {
      udp_p2p?: true;                         // flags.0?true
      udp_reflector?: true;                   // flags.1?true
      min_layer: number;                      // int
      max_layer: number;                      // int
      library_versions: string[];             // Vector<string>
    },
  };

  export const phoneCallProtocol: TLConstructor<_PhoneCallProtocol, "phoneCallProtocol">;
  export type CdnPublicKey<
    K extends keyof _CdnPublicKey = keyof _CdnPublicKey
  > = ToUnderscore<_CdnPublicKey, K>;
  export type _CdnPublicKey = {
    "cdnPublicKey": {
      dc_id: number;                          // int
      public_key: string;                     // string
    },
  };

  export const cdnPublicKey: TLConstructor<_CdnPublicKey, "cdnPublicKey">;
  export type CdnConfig<
    K extends keyof _CdnConfig = keyof _CdnConfig
  > = ToUnderscore<_CdnConfig, K>;
  export type _CdnConfig = {
    "cdnConfig": {
      public_keys: global.CdnPublicKey[];     // Vector<CdnPublicKey>
    },
  };

  export const cdnConfig: TLConstructor<_CdnConfig, "cdnConfig">;
  export type LangPackString<
    K extends keyof _LangPackString = keyof _LangPackString
  > = ToUnderscore<_LangPackString, K>;
  export type _LangPackString = {
    "langPackString": {
      key: string;                            // string
      value: string;                          // string
    },
    "langPackStringPluralized": {
      key: string;                            // string
      zero_value?: string;                    // flags.0?string
      one_value?: string;                     // flags.1?string
      two_value?: string;                     // flags.2?string
      few_value?: string;                     // flags.3?string
      many_value?: string;                    // flags.4?string
      other_value: string;                    // string
    },
    "langPackStringDeleted": {
      key: string;                            // string
    },
  };

  export const langPackString: TLConstructor<_LangPackString, "langPackString">;
  export const langPackStringPluralized: TLConstructor<_LangPackString, "langPackStringPluralized">;
  export const langPackStringDeleted: TLConstructor<_LangPackString, "langPackStringDeleted">;
  export type LangPackDifference<
    K extends keyof _LangPackDifference = keyof _LangPackDifference
  > = ToUnderscore<_LangPackDifference, K>;
  export type _LangPackDifference = {
    "langPackDifference": {
      lang_code: string;                      // string
      from_version: number;                   // int
      version: number;                        // int
      strings: global.LangPackString[];       // Vector<LangPackString>
    },
  };

  export const langPackDifference: TLConstructor<_LangPackDifference, "langPackDifference">;
  export type LangPackLanguage<
    K extends keyof _LangPackLanguage = keyof _LangPackLanguage
  > = ToUnderscore<_LangPackLanguage, K>;
  export type _LangPackLanguage = {
    "langPackLanguage": {
      official?: true;                        // flags.0?true
      rtl?: true;                             // flags.2?true
      beta?: true;                            // flags.3?true
      name: string;                           // string
      native_name: string;                    // string
      lang_code: string;                      // string
      base_lang_code?: string;                // flags.1?string
      plural_code: string;                    // string
      strings_count: number;                  // int
      translated_count: number;               // int
      translations_url: string;               // string
    },
  };

  export const langPackLanguage: TLConstructor<_LangPackLanguage, "langPackLanguage">;
  export type ChannelAdminLogEventAction<
    K extends keyof _ChannelAdminLogEventAction = keyof _ChannelAdminLogEventAction
  > = ToUnderscore<_ChannelAdminLogEventAction, K>;
  export type _ChannelAdminLogEventAction = {
    "channelAdminLogEventActionChangeTitle": {
      prev_value: string;                     // string
      new_value: string;                      // string
    },
    "channelAdminLogEventActionChangeAbout": {
      prev_value: string;                     // string
      new_value: string;                      // string
    },
    "channelAdminLogEventActionChangeUsername": {
      prev_value: string;                     // string
      new_value: string;                      // string
    },
    "channelAdminLogEventActionChangePhoto": {
      prev_photo: global.Photo;               // Photo
      new_photo: global.Photo;                // Photo
    },
    "channelAdminLogEventActionToggleInvites": {
      new_value: boolean;                     // Bool
    },
    "channelAdminLogEventActionToggleSignatures": {
      new_value: boolean;                     // Bool
    },
    "channelAdminLogEventActionUpdatePinned": {
      message: global.Message;                // Message
    },
    "channelAdminLogEventActionEditMessage": {
      prev_message: global.Message;           // Message
      new_message: global.Message;            // Message
    },
    "channelAdminLogEventActionDeleteMessage": {
      message: global.Message;                // Message
    },
    "channelAdminLogEventActionParticipantJoin": {}
    "channelAdminLogEventActionParticipantLeave": {}
    "channelAdminLogEventActionParticipantInvite": {
      participant: global.ChannelParticipant; // ChannelParticipant
    },
    "channelAdminLogEventActionParticipantToggleBan": {
      prev_participant: global.ChannelParticipant; // ChannelParticipant
      new_participant: global.ChannelParticipant; // ChannelParticipant
    },
    "channelAdminLogEventActionParticipantToggleAdmin": {
      prev_participant: global.ChannelParticipant; // ChannelParticipant
      new_participant: global.ChannelParticipant; // ChannelParticipant
    },
    "channelAdminLogEventActionChangeStickerSet": {
      prev_stickerset: global.InputStickerSet; // InputStickerSet
      new_stickerset: global.InputStickerSet; // InputStickerSet
    },
    "channelAdminLogEventActionTogglePreHistoryHidden": {
      new_value: boolean;                     // Bool
    },
    "channelAdminLogEventActionDefaultBannedRights": {
      prev_banned_rights: global.ChatBannedRights; // ChatBannedRights
      new_banned_rights: global.ChatBannedRights; // ChatBannedRights
    },
    "channelAdminLogEventActionStopPoll": {
      message: global.Message;                // Message
    },
    "channelAdminLogEventActionChangeLinkedChat": {
      prev_value: bigint;                     // long
      new_value: bigint;                      // long
    },
    "channelAdminLogEventActionChangeLocation": {
      prev_value: global.ChannelLocation;     // ChannelLocation
      new_value: global.ChannelLocation;      // ChannelLocation
    },
    "channelAdminLogEventActionToggleSlowMode": {
      prev_value: number;                     // int
      new_value: number;                      // int
    },
    "channelAdminLogEventActionStartGroupCall": {
      call: global.InputGroupCall;            // InputGroupCall
    },
    "channelAdminLogEventActionDiscardGroupCall": {
      call: global.InputGroupCall;            // InputGroupCall
    },
    "channelAdminLogEventActionParticipantMute": {
      participant: global.GroupCallParticipant; // GroupCallParticipant
    },
    "channelAdminLogEventActionParticipantUnmute": {
      participant: global.GroupCallParticipant; // GroupCallParticipant
    },
    "channelAdminLogEventActionToggleGroupCallSetting": {
      join_muted: boolean;                    // Bool
    },
    "channelAdminLogEventActionParticipantJoinByInvite": {
      invite: global.ExportedChatInvite;      // ExportedChatInvite
    },
    "channelAdminLogEventActionExportedInviteDelete": {
      invite: global.ExportedChatInvite;      // ExportedChatInvite
    },
    "channelAdminLogEventActionExportedInviteRevoke": {
      invite: global.ExportedChatInvite;      // ExportedChatInvite
    },
    "channelAdminLogEventActionExportedInviteEdit": {
      prev_invite: global.ExportedChatInvite; // ExportedChatInvite
      new_invite: global.ExportedChatInvite;  // ExportedChatInvite
    },
    "channelAdminLogEventActionParticipantVolume": {
      participant: global.GroupCallParticipant; // GroupCallParticipant
    },
    "channelAdminLogEventActionChangeHistoryTTL": {
      prev_value: number;                     // int
      new_value: number;                      // int
    },
    "channelAdminLogEventActionParticipantJoinByRequest": {
      invite: global.ExportedChatInvite;      // ExportedChatInvite
      approved_by: bigint;                    // long
    },
    "channelAdminLogEventActionToggleNoForwards": {
      new_value: boolean;                     // Bool
    },
    "channelAdminLogEventActionSendMessage": {
      message: global.Message;                // Message
    },
    "channelAdminLogEventActionChangeAvailableReactions": {
      prev_value: string[];                   // Vector<string>
      new_value: string[];                    // Vector<string>
    },
  };

  export const channelAdminLogEventActionChangeTitle: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeTitle">;
  export const channelAdminLogEventActionChangeAbout: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeAbout">;
  export const channelAdminLogEventActionChangeUsername: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeUsername">;
  export const channelAdminLogEventActionChangePhoto: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangePhoto">;
  export const channelAdminLogEventActionToggleInvites: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionToggleInvites">;
  export const channelAdminLogEventActionToggleSignatures: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionToggleSignatures">;
  export const channelAdminLogEventActionUpdatePinned: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionUpdatePinned">;
  export const channelAdminLogEventActionEditMessage: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionEditMessage">;
  export const channelAdminLogEventActionDeleteMessage: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionDeleteMessage">;
  export const channelAdminLogEventActionParticipantJoin: TLConstructorEmpty<"channelAdminLogEventActionParticipantJoin">;
  export const channelAdminLogEventActionParticipantLeave: TLConstructorEmpty<"channelAdminLogEventActionParticipantLeave">;
  export const channelAdminLogEventActionParticipantInvite: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantInvite">;
  export const channelAdminLogEventActionParticipantToggleBan: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantToggleBan">;
  export const channelAdminLogEventActionParticipantToggleAdmin: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantToggleAdmin">;
  export const channelAdminLogEventActionChangeStickerSet: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeStickerSet">;
  export const channelAdminLogEventActionTogglePreHistoryHidden: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionTogglePreHistoryHidden">;
  export const channelAdminLogEventActionDefaultBannedRights: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionDefaultBannedRights">;
  export const channelAdminLogEventActionStopPoll: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionStopPoll">;
  export const channelAdminLogEventActionChangeLinkedChat: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeLinkedChat">;
  export const channelAdminLogEventActionChangeLocation: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeLocation">;
  export const channelAdminLogEventActionToggleSlowMode: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionToggleSlowMode">;
  export const channelAdminLogEventActionStartGroupCall: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionStartGroupCall">;
  export const channelAdminLogEventActionDiscardGroupCall: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionDiscardGroupCall">;
  export const channelAdminLogEventActionParticipantMute: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantMute">;
  export const channelAdminLogEventActionParticipantUnmute: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantUnmute">;
  export const channelAdminLogEventActionToggleGroupCallSetting: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionToggleGroupCallSetting">;
  export const channelAdminLogEventActionParticipantJoinByInvite: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantJoinByInvite">;
  export const channelAdminLogEventActionExportedInviteDelete: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionExportedInviteDelete">;
  export const channelAdminLogEventActionExportedInviteRevoke: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionExportedInviteRevoke">;
  export const channelAdminLogEventActionExportedInviteEdit: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionExportedInviteEdit">;
  export const channelAdminLogEventActionParticipantVolume: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantVolume">;
  export const channelAdminLogEventActionChangeHistoryTTL: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeHistoryTTL">;
  export const channelAdminLogEventActionParticipantJoinByRequest: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionParticipantJoinByRequest">;
  export const channelAdminLogEventActionToggleNoForwards: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionToggleNoForwards">;
  export const channelAdminLogEventActionSendMessage: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionSendMessage">;
  export const channelAdminLogEventActionChangeAvailableReactions: TLConstructor<_ChannelAdminLogEventAction, "channelAdminLogEventActionChangeAvailableReactions">;
  export type ChannelAdminLogEvent<
    K extends keyof _ChannelAdminLogEvent = keyof _ChannelAdminLogEvent
  > = ToUnderscore<_ChannelAdminLogEvent, K>;
  export type _ChannelAdminLogEvent = {
    "channelAdminLogEvent": {
      id: bigint;                             // long
      date: number;                           // int
      user_id: bigint;                        // long
      action: global.ChannelAdminLogEventAction; // ChannelAdminLogEventAction
    },
  };

  export const channelAdminLogEvent: TLConstructor<_ChannelAdminLogEvent, "channelAdminLogEvent">;
  export type ChannelAdminLogEventsFilter<
    K extends keyof _ChannelAdminLogEventsFilter = keyof _ChannelAdminLogEventsFilter
  > = ToUnderscore<_ChannelAdminLogEventsFilter, K>;
  export type _ChannelAdminLogEventsFilter = {
    "channelAdminLogEventsFilter": {
      join?: true;                            // flags.0?true
      leave?: true;                           // flags.1?true
      invite?: true;                          // flags.2?true
      ban?: true;                             // flags.3?true
      unban?: true;                           // flags.4?true
      kick?: true;                            // flags.5?true
      unkick?: true;                          // flags.6?true
      promote?: true;                         // flags.7?true
      demote?: true;                          // flags.8?true
      info?: true;                            // flags.9?true
      settings?: true;                        // flags.10?true
      pinned?: true;                          // flags.11?true
      edit?: true;                            // flags.12?true
      delete?: true;                          // flags.13?true
      group_call?: true;                      // flags.14?true
      invites?: true;                         // flags.15?true
      send?: true;                            // flags.16?true
    },
  };

  export const channelAdminLogEventsFilter: TLConstructor<_ChannelAdminLogEventsFilter, "channelAdminLogEventsFilter">;
  export type PopularContact<
    K extends keyof _PopularContact = keyof _PopularContact
  > = ToUnderscore<_PopularContact, K>;
  export type _PopularContact = {
    "popularContact": {
      client_id: bigint;                      // long
      importers: number;                      // int
    },
  };

  export const popularContact: TLConstructor<_PopularContact, "popularContact">;
  export type RecentMeUrl<
    K extends keyof _RecentMeUrl = keyof _RecentMeUrl
  > = ToUnderscore<_RecentMeUrl, K>;
  export type _RecentMeUrl = {
    "recentMeUrlUnknown": {
      url: string;                            // string
    },
    "recentMeUrlUser": {
      url: string;                            // string
      user_id: bigint;                        // long
    },
    "recentMeUrlChat": {
      url: string;                            // string
      chat_id: bigint;                        // long
    },
    "recentMeUrlChatInvite": {
      url: string;                            // string
      chat_invite: global.ChatInvite;         // ChatInvite
    },
    "recentMeUrlStickerSet": {
      url: string;                            // string
      set: global.StickerSetCovered;          // StickerSetCovered
    },
  };

  export const recentMeUrlUnknown: TLConstructor<_RecentMeUrl, "recentMeUrlUnknown">;
  export const recentMeUrlUser: TLConstructor<_RecentMeUrl, "recentMeUrlUser">;
  export const recentMeUrlChat: TLConstructor<_RecentMeUrl, "recentMeUrlChat">;
  export const recentMeUrlChatInvite: TLConstructor<_RecentMeUrl, "recentMeUrlChatInvite">;
  export const recentMeUrlStickerSet: TLConstructor<_RecentMeUrl, "recentMeUrlStickerSet">;
  export type InputSingleMedia<
    K extends keyof _InputSingleMedia = keyof _InputSingleMedia
  > = ToUnderscore<_InputSingleMedia, K>;
  export type _InputSingleMedia = {
    "inputSingleMedia": {
      media: global.InputMedia;               // InputMedia
      random_id: bigint;                      // long
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.0?Vector<MessageEntity>
    },
  };

  export const inputSingleMedia: TLConstructor<_InputSingleMedia, "inputSingleMedia">;
  export type WebAuthorization<
    K extends keyof _WebAuthorization = keyof _WebAuthorization
  > = ToUnderscore<_WebAuthorization, K>;
  export type _WebAuthorization = {
    "webAuthorization": {
      hash: bigint;                           // long
      bot_id: bigint;                         // long
      domain: string;                         // string
      browser: string;                        // string
      platform: string;                       // string
      date_created: number;                   // int
      date_active: number;                    // int
      ip: string;                             // string
      region: string;                         // string
    },
  };

  export const webAuthorization: TLConstructor<_WebAuthorization, "webAuthorization">;
  export type InputMessage<
    K extends keyof _InputMessage = keyof _InputMessage
  > = ToUnderscore<_InputMessage, K>;
  export type _InputMessage = {
    "inputMessageID": {
      id: number;                             // int
    },
    "inputMessageReplyTo": {
      id: number;                             // int
    },
    "inputMessagePinned": {}
    "inputMessageCallbackQuery": {
      id: number;                             // int
      query_id: bigint;                       // long
    },
  };

  export const inputMessageID: TLConstructor<_InputMessage, "inputMessageID">;
  export const inputMessageReplyTo: TLConstructor<_InputMessage, "inputMessageReplyTo">;
  export const inputMessagePinned: TLConstructorEmpty<"inputMessagePinned">;
  export const inputMessageCallbackQuery: TLConstructor<_InputMessage, "inputMessageCallbackQuery">;
  export type InputDialogPeer<
    K extends keyof _InputDialogPeer = keyof _InputDialogPeer
  > = ToUnderscore<_InputDialogPeer, K>;
  export type _InputDialogPeer = {
    "inputDialogPeer": {
      peer: global.InputPeer;                 // InputPeer
    },
    "inputDialogPeerFolder": {
      folder_id: number;                      // int
    },
  };

  export const inputDialogPeer: TLConstructor<_InputDialogPeer, "inputDialogPeer">;
  export const inputDialogPeerFolder: TLConstructor<_InputDialogPeer, "inputDialogPeerFolder">;
  export type DialogPeer<
    K extends keyof _DialogPeer = keyof _DialogPeer
  > = ToUnderscore<_DialogPeer, K>;
  export type _DialogPeer = {
    "dialogPeer": {
      peer: global.Peer;                      // Peer
    },
    "dialogPeerFolder": {
      folder_id: number;                      // int
    },
  };

  export const dialogPeer: TLConstructor<_DialogPeer, "dialogPeer">;
  export const dialogPeerFolder: TLConstructor<_DialogPeer, "dialogPeerFolder">;
  export type FileHash<
    K extends keyof _FileHash = keyof _FileHash
  > = ToUnderscore<_FileHash, K>;
  export type _FileHash = {
    "fileHash": {
      offset: number;                         // int
      limit: number;                          // int
      hash: BufferSource;                     // bytes
    },
  };

  export const fileHash: TLConstructor<_FileHash, "fileHash">;
  export type InputClientProxy<
    K extends keyof _InputClientProxy = keyof _InputClientProxy
  > = ToUnderscore<_InputClientProxy, K>;
  export type _InputClientProxy = {
    "inputClientProxy": {
      address: string;                        // string
      port: number;                           // int
    },
  };

  export const inputClientProxy: TLConstructor<_InputClientProxy, "inputClientProxy">;
  export type InputSecureFile<
    K extends keyof _InputSecureFile = keyof _InputSecureFile
  > = ToUnderscore<_InputSecureFile, K>;
  export type _InputSecureFile = {
    "inputSecureFileUploaded": {
      id: bigint;                             // long
      parts: number;                          // int
      md5_checksum: string;                   // string
      file_hash: BufferSource;                // bytes
      secret: BufferSource;                   // bytes
    },
    "inputSecureFile": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
  };

  export const inputSecureFileUploaded: TLConstructor<_InputSecureFile, "inputSecureFileUploaded">;
  export const inputSecureFile: TLConstructor<_InputSecureFile, "inputSecureFile">;
  export type SecureFile<
    K extends keyof _SecureFile = keyof _SecureFile
  > = ToUnderscore<_SecureFile, K>;
  export type _SecureFile = {
    "secureFileEmpty": {}
    "secureFile": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      size: number;                           // int
      dc_id: number;                          // int
      date: number;                           // int
      file_hash: BufferSource;                // bytes
      secret: BufferSource;                   // bytes
    },
  };

  export const secureFileEmpty: TLConstructorEmpty<"secureFileEmpty">;
  export const secureFile: TLConstructor<_SecureFile, "secureFile">;
  export type SecureData<
    K extends keyof _SecureData = keyof _SecureData
  > = ToUnderscore<_SecureData, K>;
  export type _SecureData = {
    "secureData": {
      data: BufferSource;                     // bytes
      data_hash: BufferSource;                // bytes
      secret: BufferSource;                   // bytes
    },
  };

  export const secureData: TLConstructor<_SecureData, "secureData">;
  export type SecurePlainData<
    K extends keyof _SecurePlainData = keyof _SecurePlainData
  > = ToUnderscore<_SecurePlainData, K>;
  export type _SecurePlainData = {
    "securePlainPhone": {
      phone: string;                          // string
    },
    "securePlainEmail": {
      email: string;                          // string
    },
  };

  export const securePlainPhone: TLConstructor<_SecurePlainData, "securePlainPhone">;
  export const securePlainEmail: TLConstructor<_SecurePlainData, "securePlainEmail">;
  export type SecureValueType<
    K extends keyof _SecureValueType = keyof _SecureValueType
  > = ToUnderscore<_SecureValueType, K>;
  export type _SecureValueType = {
    "secureValueTypePersonalDetails": {}
    "secureValueTypePassport": {}
    "secureValueTypeDriverLicense": {}
    "secureValueTypeIdentityCard": {}
    "secureValueTypeInternalPassport": {}
    "secureValueTypeAddress": {}
    "secureValueTypeUtilityBill": {}
    "secureValueTypeBankStatement": {}
    "secureValueTypeRentalAgreement": {}
    "secureValueTypePassportRegistration": {}
    "secureValueTypeTemporaryRegistration": {}
    "secureValueTypePhone": {}
    "secureValueTypeEmail": {}
  };

  export const secureValueTypePersonalDetails: TLConstructorEmpty<"secureValueTypePersonalDetails">;
  export const secureValueTypePassport: TLConstructorEmpty<"secureValueTypePassport">;
  export const secureValueTypeDriverLicense: TLConstructorEmpty<"secureValueTypeDriverLicense">;
  export const secureValueTypeIdentityCard: TLConstructorEmpty<"secureValueTypeIdentityCard">;
  export const secureValueTypeInternalPassport: TLConstructorEmpty<"secureValueTypeInternalPassport">;
  export const secureValueTypeAddress: TLConstructorEmpty<"secureValueTypeAddress">;
  export const secureValueTypeUtilityBill: TLConstructorEmpty<"secureValueTypeUtilityBill">;
  export const secureValueTypeBankStatement: TLConstructorEmpty<"secureValueTypeBankStatement">;
  export const secureValueTypeRentalAgreement: TLConstructorEmpty<"secureValueTypeRentalAgreement">;
  export const secureValueTypePassportRegistration: TLConstructorEmpty<"secureValueTypePassportRegistration">;
  export const secureValueTypeTemporaryRegistration: TLConstructorEmpty<"secureValueTypeTemporaryRegistration">;
  export const secureValueTypePhone: TLConstructorEmpty<"secureValueTypePhone">;
  export const secureValueTypeEmail: TLConstructorEmpty<"secureValueTypeEmail">;
  export type SecureValue<
    K extends keyof _SecureValue = keyof _SecureValue
  > = ToUnderscore<_SecureValue, K>;
  export type _SecureValue = {
    "secureValue": {
      type: global.SecureValueType;           // SecureValueType
      data?: global.SecureData;               // flags.0?SecureData
      front_side?: global.SecureFile;         // flags.1?SecureFile
      reverse_side?: global.SecureFile;       // flags.2?SecureFile
      selfie?: global.SecureFile;             // flags.3?SecureFile
      translation?: global.SecureFile[];      // flags.6?Vector<SecureFile>
      files?: global.SecureFile[];            // flags.4?Vector<SecureFile>
      plain_data?: global.SecurePlainData;    // flags.5?SecurePlainData
      hash: BufferSource;                     // bytes
    },
  };

  export const secureValue: TLConstructor<_SecureValue, "secureValue">;
  export type InputSecureValue<
    K extends keyof _InputSecureValue = keyof _InputSecureValue
  > = ToUnderscore<_InputSecureValue, K>;
  export type _InputSecureValue = {
    "inputSecureValue": {
      type: global.SecureValueType;           // SecureValueType
      data?: global.SecureData;               // flags.0?SecureData
      front_side?: global.InputSecureFile;    // flags.1?InputSecureFile
      reverse_side?: global.InputSecureFile;  // flags.2?InputSecureFile
      selfie?: global.InputSecureFile;        // flags.3?InputSecureFile
      translation?: global.InputSecureFile[]; // flags.6?Vector<InputSecureFile>
      files?: global.InputSecureFile[];       // flags.4?Vector<InputSecureFile>
      plain_data?: global.SecurePlainData;    // flags.5?SecurePlainData
    },
  };

  export const inputSecureValue: TLConstructor<_InputSecureValue, "inputSecureValue">;
  export type SecureValueHash<
    K extends keyof _SecureValueHash = keyof _SecureValueHash
  > = ToUnderscore<_SecureValueHash, K>;
  export type _SecureValueHash = {
    "secureValueHash": {
      type: global.SecureValueType;           // SecureValueType
      hash: BufferSource;                     // bytes
    },
  };

  export const secureValueHash: TLConstructor<_SecureValueHash, "secureValueHash">;
  export type SecureValueError<
    K extends keyof _SecureValueError = keyof _SecureValueError
  > = ToUnderscore<_SecureValueError, K>;
  export type _SecureValueError = {
    "secureValueErrorData": {
      type: global.SecureValueType;           // SecureValueType
      data_hash: BufferSource;                // bytes
      field: string;                          // string
      text: string;                           // string
    },
    "secureValueErrorFrontSide": {
      type: global.SecureValueType;           // SecureValueType
      file_hash: BufferSource;                // bytes
      text: string;                           // string
    },
    "secureValueErrorReverseSide": {
      type: global.SecureValueType;           // SecureValueType
      file_hash: BufferSource;                // bytes
      text: string;                           // string
    },
    "secureValueErrorSelfie": {
      type: global.SecureValueType;           // SecureValueType
      file_hash: BufferSource;                // bytes
      text: string;                           // string
    },
    "secureValueErrorFile": {
      type: global.SecureValueType;           // SecureValueType
      file_hash: BufferSource;                // bytes
      text: string;                           // string
    },
    "secureValueErrorFiles": {
      type: global.SecureValueType;           // SecureValueType
      file_hash: BufferSource[];              // Vector<bytes>
      text: string;                           // string
    },
    "secureValueError": {
      type: global.SecureValueType;           // SecureValueType
      hash: BufferSource;                     // bytes
      text: string;                           // string
    },
    "secureValueErrorTranslationFile": {
      type: global.SecureValueType;           // SecureValueType
      file_hash: BufferSource;                // bytes
      text: string;                           // string
    },
    "secureValueErrorTranslationFiles": {
      type: global.SecureValueType;           // SecureValueType
      file_hash: BufferSource[];              // Vector<bytes>
      text: string;                           // string
    },
  };

  export const secureValueErrorData: TLConstructor<_SecureValueError, "secureValueErrorData">;
  export const secureValueErrorFrontSide: TLConstructor<_SecureValueError, "secureValueErrorFrontSide">;
  export const secureValueErrorReverseSide: TLConstructor<_SecureValueError, "secureValueErrorReverseSide">;
  export const secureValueErrorSelfie: TLConstructor<_SecureValueError, "secureValueErrorSelfie">;
  export const secureValueErrorFile: TLConstructor<_SecureValueError, "secureValueErrorFile">;
  export const secureValueErrorFiles: TLConstructor<_SecureValueError, "secureValueErrorFiles">;
  export const secureValueError: TLConstructor<_SecureValueError, "secureValueError">;
  export const secureValueErrorTranslationFile: TLConstructor<_SecureValueError, "secureValueErrorTranslationFile">;
  export const secureValueErrorTranslationFiles: TLConstructor<_SecureValueError, "secureValueErrorTranslationFiles">;
  export type SecureCredentialsEncrypted<
    K extends keyof _SecureCredentialsEncrypted = keyof _SecureCredentialsEncrypted
  > = ToUnderscore<_SecureCredentialsEncrypted, K>;
  export type _SecureCredentialsEncrypted = {
    "secureCredentialsEncrypted": {
      data: BufferSource;                     // bytes
      hash: BufferSource;                     // bytes
      secret: BufferSource;                   // bytes
    },
  };

  export const secureCredentialsEncrypted: TLConstructor<_SecureCredentialsEncrypted, "secureCredentialsEncrypted">;
  export type SavedContact<
    K extends keyof _SavedContact = keyof _SavedContact
  > = ToUnderscore<_SavedContact, K>;
  export type _SavedContact = {
    "savedPhoneContact": {
      phone: string;                          // string
      first_name: string;                     // string
      last_name: string;                      // string
      date: number;                           // int
    },
  };

  export const savedPhoneContact: TLConstructor<_SavedContact, "savedPhoneContact">;
  export type PasswordKdfAlgo<
    K extends keyof _PasswordKdfAlgo = keyof _PasswordKdfAlgo
  > = ToUnderscore<_PasswordKdfAlgo, K>;
  export type _PasswordKdfAlgo = {
    "passwordKdfAlgoUnknown": {}
    "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow": {
      salt1: BufferSource;                    // bytes
      salt2: BufferSource;                    // bytes
      g: number;                              // int
      p: BufferSource;                        // bytes
    },
  };

  export const passwordKdfAlgoUnknown: TLConstructorEmpty<"passwordKdfAlgoUnknown">;
  export const passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow: TLConstructor<_PasswordKdfAlgo, "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow">;
  export type SecurePasswordKdfAlgo<
    K extends keyof _SecurePasswordKdfAlgo = keyof _SecurePasswordKdfAlgo
  > = ToUnderscore<_SecurePasswordKdfAlgo, K>;
  export type _SecurePasswordKdfAlgo = {
    "securePasswordKdfAlgoUnknown": {}
    "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000": {
      salt: BufferSource;                     // bytes
    },
    "securePasswordKdfAlgoSHA512": {
      salt: BufferSource;                     // bytes
    },
  };

  export const securePasswordKdfAlgoUnknown: TLConstructorEmpty<"securePasswordKdfAlgoUnknown">;
  export const securePasswordKdfAlgoPBKDF2HMACSHA512iter100000: TLConstructor<_SecurePasswordKdfAlgo, "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000">;
  export const securePasswordKdfAlgoSHA512: TLConstructor<_SecurePasswordKdfAlgo, "securePasswordKdfAlgoSHA512">;
  export type SecureSecretSettings<
    K extends keyof _SecureSecretSettings = keyof _SecureSecretSettings
  > = ToUnderscore<_SecureSecretSettings, K>;
  export type _SecureSecretSettings = {
    "secureSecretSettings": {
      secure_algo: global.SecurePasswordKdfAlgo; // SecurePasswordKdfAlgo
      secure_secret: BufferSource;            // bytes
      secure_secret_id: bigint;               // long
    },
  };

  export const secureSecretSettings: TLConstructor<_SecureSecretSettings, "secureSecretSettings">;
  export type InputCheckPasswordSRP<
    K extends keyof _InputCheckPasswordSRP = keyof _InputCheckPasswordSRP
  > = ToUnderscore<_InputCheckPasswordSRP, K>;
  export type _InputCheckPasswordSRP = {
    "inputCheckPasswordEmpty": {}
    "inputCheckPasswordSRP": {
      srp_id: bigint;                         // long
      A: BufferSource;                        // bytes
      M1: BufferSource;                       // bytes
    },
  };

  export const inputCheckPasswordEmpty: TLConstructorEmpty<"inputCheckPasswordEmpty">;
  export const inputCheckPasswordSRP: TLConstructor<_InputCheckPasswordSRP, "inputCheckPasswordSRP">;
  export type SecureRequiredType<
    K extends keyof _SecureRequiredType = keyof _SecureRequiredType
  > = ToUnderscore<_SecureRequiredType, K>;
  export type _SecureRequiredType = {
    "secureRequiredType": {
      native_names?: true;                    // flags.0?true
      selfie_required?: true;                 // flags.1?true
      translation_required?: true;            // flags.2?true
      type: global.SecureValueType;           // SecureValueType
    },
    "secureRequiredTypeOneOf": {
      types: global.SecureRequiredType[];     // Vector<SecureRequiredType>
    },
  };

  export const secureRequiredType: TLConstructor<_SecureRequiredType, "secureRequiredType">;
  export const secureRequiredTypeOneOf: TLConstructor<_SecureRequiredType, "secureRequiredTypeOneOf">;
  export type InputAppEvent<
    K extends keyof _InputAppEvent = keyof _InputAppEvent
  > = ToUnderscore<_InputAppEvent, K>;
  export type _InputAppEvent = {
    "inputAppEvent": {
      time: number;                           // double
      type: string;                           // string
      peer: bigint;                           // long
      data: global.JSONValue;                 // JSONValue
    },
  };

  export const inputAppEvent: TLConstructor<_InputAppEvent, "inputAppEvent">;
  export type JSONObjectValue<
    K extends keyof _JSONObjectValue = keyof _JSONObjectValue
  > = ToUnderscore<_JSONObjectValue, K>;
  export type _JSONObjectValue = {
    "jsonObjectValue": {
      key: string;                            // string
      value: global.JSONValue;                // JSONValue
    },
  };

  export const jsonObjectValue: TLConstructor<_JSONObjectValue, "jsonObjectValue">;
  export type JSONValue<
    K extends keyof _JSONValue = keyof _JSONValue
  > = ToUnderscore<_JSONValue, K>;
  export type _JSONValue = {
    "jsonNull": {}
    "jsonBool": {
      value: boolean;                         // Bool
    },
    "jsonNumber": {
      value: number;                          // double
    },
    "jsonString": {
      value: string;                          // string
    },
    "jsonArray": {
      value: global.JSONValue[];              // Vector<JSONValue>
    },
    "jsonObject": {
      value: global.JSONObjectValue[];        // Vector<JSONObjectValue>
    },
  };

  export const jsonNull: TLConstructorEmpty<"jsonNull">;
  export const jsonBool: TLConstructor<_JSONValue, "jsonBool">;
  export const jsonNumber: TLConstructor<_JSONValue, "jsonNumber">;
  export const jsonString: TLConstructor<_JSONValue, "jsonString">;
  export const jsonArray: TLConstructor<_JSONValue, "jsonArray">;
  export const jsonObject: TLConstructor<_JSONValue, "jsonObject">;
  export type PageTableCell<
    K extends keyof _PageTableCell = keyof _PageTableCell
  > = ToUnderscore<_PageTableCell, K>;
  export type _PageTableCell = {
    "pageTableCell": {
      header?: true;                          // flags.0?true
      align_center?: true;                    // flags.3?true
      align_right?: true;                     // flags.4?true
      valign_middle?: true;                   // flags.5?true
      valign_bottom?: true;                   // flags.6?true
      text?: global.RichText;                 // flags.7?RichText
      colspan?: number;                       // flags.1?int
      rowspan?: number;                       // flags.2?int
    },
  };

  export const pageTableCell: TLConstructor<_PageTableCell, "pageTableCell">;
  export type PageTableRow<
    K extends keyof _PageTableRow = keyof _PageTableRow
  > = ToUnderscore<_PageTableRow, K>;
  export type _PageTableRow = {
    "pageTableRow": {
      cells: global.PageTableCell[];          // Vector<PageTableCell>
    },
  };

  export const pageTableRow: TLConstructor<_PageTableRow, "pageTableRow">;
  export type PageCaption<
    K extends keyof _PageCaption = keyof _PageCaption
  > = ToUnderscore<_PageCaption, K>;
  export type _PageCaption = {
    "pageCaption": {
      text: global.RichText;                  // RichText
      credit: global.RichText;                // RichText
    },
  };

  export const pageCaption: TLConstructor<_PageCaption, "pageCaption">;
  export type PageListItem<
    K extends keyof _PageListItem = keyof _PageListItem
  > = ToUnderscore<_PageListItem, K>;
  export type _PageListItem = {
    "pageListItemText": {
      text: global.RichText;                  // RichText
    },
    "pageListItemBlocks": {
      blocks: global.PageBlock[];             // Vector<PageBlock>
    },
  };

  export const pageListItemText: TLConstructor<_PageListItem, "pageListItemText">;
  export const pageListItemBlocks: TLConstructor<_PageListItem, "pageListItemBlocks">;
  export type PageListOrderedItem<
    K extends keyof _PageListOrderedItem = keyof _PageListOrderedItem
  > = ToUnderscore<_PageListOrderedItem, K>;
  export type _PageListOrderedItem = {
    "pageListOrderedItemText": {
      num: string;                            // string
      text: global.RichText;                  // RichText
    },
    "pageListOrderedItemBlocks": {
      num: string;                            // string
      blocks: global.PageBlock[];             // Vector<PageBlock>
    },
  };

  export const pageListOrderedItemText: TLConstructor<_PageListOrderedItem, "pageListOrderedItemText">;
  export const pageListOrderedItemBlocks: TLConstructor<_PageListOrderedItem, "pageListOrderedItemBlocks">;
  export type PageRelatedArticle<
    K extends keyof _PageRelatedArticle = keyof _PageRelatedArticle
  > = ToUnderscore<_PageRelatedArticle, K>;
  export type _PageRelatedArticle = {
    "pageRelatedArticle": {
      url: string;                            // string
      webpage_id: bigint;                     // long
      title?: string;                         // flags.0?string
      description?: string;                   // flags.1?string
      photo_id?: bigint;                      // flags.2?long
      author?: string;                        // flags.3?string
      published_date?: number;                // flags.4?int
    },
  };

  export const pageRelatedArticle: TLConstructor<_PageRelatedArticle, "pageRelatedArticle">;
  export type Page<
    K extends keyof _Page = keyof _Page
  > = ToUnderscore<_Page, K>;
  export type _Page = {
    "page": {
      part?: true;                            // flags.0?true
      rtl?: true;                             // flags.1?true
      v2?: true;                              // flags.2?true
      url: string;                            // string
      blocks: global.PageBlock[];             // Vector<PageBlock>
      photos: global.Photo[];                 // Vector<Photo>
      documents: global.Document[];           // Vector<Document>
      views?: number;                         // flags.3?int
    },
  };

  export const page: TLConstructor<_Page, "page">;
  export type PollAnswer<
    K extends keyof _PollAnswer = keyof _PollAnswer
  > = ToUnderscore<_PollAnswer, K>;
  export type _PollAnswer = {
    "pollAnswer": {
      text: string;                           // string
      option: BufferSource;                   // bytes
    },
  };

  export const pollAnswer: TLConstructor<_PollAnswer, "pollAnswer">;
  export type Poll<
    K extends keyof _Poll = keyof _Poll
  > = ToUnderscore<_Poll, K>;
  export type _Poll = {
    "poll": {
      id: bigint;                             // long
      closed?: true;                          // flags.0?true
      public_voters?: true;                   // flags.1?true
      multiple_choice?: true;                 // flags.2?true
      quiz?: true;                            // flags.3?true
      question: string;                       // string
      answers: global.PollAnswer[];           // Vector<PollAnswer>
      close_period?: number;                  // flags.4?int
      close_date?: number;                    // flags.5?int
    },
  };

  export const poll: TLConstructor<_Poll, "poll">;
  export type PollAnswerVoters<
    K extends keyof _PollAnswerVoters = keyof _PollAnswerVoters
  > = ToUnderscore<_PollAnswerVoters, K>;
  export type _PollAnswerVoters = {
    "pollAnswerVoters": {
      chosen?: true;                          // flags.0?true
      correct?: true;                         // flags.1?true
      option: BufferSource;                   // bytes
      voters: number;                         // int
    },
  };

  export const pollAnswerVoters: TLConstructor<_PollAnswerVoters, "pollAnswerVoters">;
  export type PollResults<
    K extends keyof _PollResults = keyof _PollResults
  > = ToUnderscore<_PollResults, K>;
  export type _PollResults = {
    "pollResults": {
      min?: true;                             // flags.0?true
      results?: global.PollAnswerVoters[];    // flags.1?Vector<PollAnswerVoters>
      total_voters?: number;                  // flags.2?int
      recent_voters?: bigint[];               // flags.3?Vector<long>
      solution?: string;                      // flags.4?string
      solution_entities?: global.MessageEntity[]; // flags.4?Vector<MessageEntity>
    },
  };

  export const pollResults: TLConstructor<_PollResults, "pollResults">;
  export type ChatOnlines<
    K extends keyof _ChatOnlines = keyof _ChatOnlines
  > = ToUnderscore<_ChatOnlines, K>;
  export type _ChatOnlines = {
    "chatOnlines": {
      onlines: number;                        // int
    },
  };

  export const chatOnlines: TLConstructor<_ChatOnlines, "chatOnlines">;
  export type StatsURL<
    K extends keyof _StatsURL = keyof _StatsURL
  > = ToUnderscore<_StatsURL, K>;
  export type _StatsURL = {
    "statsURL": {
      url: string;                            // string
    },
  };

  export const statsURL: TLConstructor<_StatsURL, "statsURL">;
  export type ChatAdminRights<
    K extends keyof _ChatAdminRights = keyof _ChatAdminRights
  > = ToUnderscore<_ChatAdminRights, K>;
  export type _ChatAdminRights = {
    "chatAdminRights": {
      change_info?: true;                     // flags.0?true
      post_messages?: true;                   // flags.1?true
      edit_messages?: true;                   // flags.2?true
      delete_messages?: true;                 // flags.3?true
      ban_users?: true;                       // flags.4?true
      invite_users?: true;                    // flags.5?true
      pin_messages?: true;                    // flags.7?true
      add_admins?: true;                      // flags.9?true
      anonymous?: true;                       // flags.10?true
      manage_call?: true;                     // flags.11?true
      other?: true;                           // flags.12?true
    },
  };

  export const chatAdminRights: TLConstructor<_ChatAdminRights, "chatAdminRights">;
  export type ChatBannedRights<
    K extends keyof _ChatBannedRights = keyof _ChatBannedRights
  > = ToUnderscore<_ChatBannedRights, K>;
  export type _ChatBannedRights = {
    "chatBannedRights": {
      view_messages?: true;                   // flags.0?true
      send_messages?: true;                   // flags.1?true
      send_media?: true;                      // flags.2?true
      send_stickers?: true;                   // flags.3?true
      send_gifs?: true;                       // flags.4?true
      send_games?: true;                      // flags.5?true
      send_inline?: true;                     // flags.6?true
      embed_links?: true;                     // flags.7?true
      send_polls?: true;                      // flags.8?true
      change_info?: true;                     // flags.10?true
      invite_users?: true;                    // flags.15?true
      pin_messages?: true;                    // flags.17?true
      until_date: number;                     // int
    },
  };

  export const chatBannedRights: TLConstructor<_ChatBannedRights, "chatBannedRights">;
  export type InputWallPaper<
    K extends keyof _InputWallPaper = keyof _InputWallPaper
  > = ToUnderscore<_InputWallPaper, K>;
  export type _InputWallPaper = {
    "inputWallPaper": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputWallPaperSlug": {
      slug: string;                           // string
    },
    "inputWallPaperNoFile": {
      id: bigint;                             // long
    },
  };

  export const inputWallPaper: TLConstructor<_InputWallPaper, "inputWallPaper">;
  export const inputWallPaperSlug: TLConstructor<_InputWallPaper, "inputWallPaperSlug">;
  export const inputWallPaperNoFile: TLConstructor<_InputWallPaper, "inputWallPaperNoFile">;
  export type CodeSettings<
    K extends keyof _CodeSettings = keyof _CodeSettings
  > = ToUnderscore<_CodeSettings, K>;
  export type _CodeSettings = {
    "codeSettings": {
      allow_flashcall?: true;                 // flags.0?true
      current_number?: true;                  // flags.1?true
      allow_app_hash?: true;                  // flags.4?true
      allow_missed_call?: true;               // flags.5?true
      logout_tokens?: BufferSource[];         // flags.6?Vector<bytes>
    },
  };

  export const codeSettings: TLConstructor<_CodeSettings, "codeSettings">;
  export type WallPaperSettings<
    K extends keyof _WallPaperSettings = keyof _WallPaperSettings
  > = ToUnderscore<_WallPaperSettings, K>;
  export type _WallPaperSettings = {
    "wallPaperSettings": {
      blur?: true;                            // flags.1?true
      motion?: true;                          // flags.2?true
      background_color?: number;              // flags.0?int
      second_background_color?: number;       // flags.4?int
      third_background_color?: number;        // flags.5?int
      fourth_background_color?: number;       // flags.6?int
      intensity?: number;                     // flags.3?int
      rotation?: number;                      // flags.4?int
    },
  };

  export const wallPaperSettings: TLConstructor<_WallPaperSettings, "wallPaperSettings">;
  export type AutoDownloadSettings<
    K extends keyof _AutoDownloadSettings = keyof _AutoDownloadSettings
  > = ToUnderscore<_AutoDownloadSettings, K>;
  export type _AutoDownloadSettings = {
    "autoDownloadSettings": {
      disabled?: true;                        // flags.0?true
      video_preload_large?: true;             // flags.1?true
      audio_preload_next?: true;              // flags.2?true
      phonecalls_less_data?: true;            // flags.3?true
      photo_size_max: number;                 // int
      video_size_max: number;                 // int
      file_size_max: number;                  // int
      video_upload_maxbitrate: number;        // int
    },
  };

  export const autoDownloadSettings: TLConstructor<_AutoDownloadSettings, "autoDownloadSettings">;
  export type EmojiKeyword<
    K extends keyof _EmojiKeyword = keyof _EmojiKeyword
  > = ToUnderscore<_EmojiKeyword, K>;
  export type _EmojiKeyword = {
    "emojiKeyword": {
      keyword: string;                        // string
      emoticons: string[];                    // Vector<string>
    },
    "emojiKeywordDeleted": {
      keyword: string;                        // string
      emoticons: string[];                    // Vector<string>
    },
  };

  export const emojiKeyword: TLConstructor<_EmojiKeyword, "emojiKeyword">;
  export const emojiKeywordDeleted: TLConstructor<_EmojiKeyword, "emojiKeywordDeleted">;
  export type EmojiKeywordsDifference<
    K extends keyof _EmojiKeywordsDifference = keyof _EmojiKeywordsDifference
  > = ToUnderscore<_EmojiKeywordsDifference, K>;
  export type _EmojiKeywordsDifference = {
    "emojiKeywordsDifference": {
      lang_code: string;                      // string
      from_version: number;                   // int
      version: number;                        // int
      keywords: global.EmojiKeyword[];        // Vector<EmojiKeyword>
    },
  };

  export const emojiKeywordsDifference: TLConstructor<_EmojiKeywordsDifference, "emojiKeywordsDifference">;
  export type EmojiURL<
    K extends keyof _EmojiURL = keyof _EmojiURL
  > = ToUnderscore<_EmojiURL, K>;
  export type _EmojiURL = {
    "emojiURL": {
      url: string;                            // string
    },
  };

  export const emojiURL: TLConstructor<_EmojiURL, "emojiURL">;
  export type EmojiLanguage<
    K extends keyof _EmojiLanguage = keyof _EmojiLanguage
  > = ToUnderscore<_EmojiLanguage, K>;
  export type _EmojiLanguage = {
    "emojiLanguage": {
      lang_code: string;                      // string
    },
  };

  export const emojiLanguage: TLConstructor<_EmojiLanguage, "emojiLanguage">;
  export type Folder<
    K extends keyof _Folder = keyof _Folder
  > = ToUnderscore<_Folder, K>;
  export type _Folder = {
    "folder": {
      autofill_new_broadcasts?: true;         // flags.0?true
      autofill_public_groups?: true;          // flags.1?true
      autofill_new_correspondents?: true;     // flags.2?true
      id: number;                             // int
      title: string;                          // string
      photo?: global.ChatPhoto;               // flags.3?ChatPhoto
    },
  };

  export const folder: TLConstructor<_Folder, "folder">;
  export type InputFolderPeer<
    K extends keyof _InputFolderPeer = keyof _InputFolderPeer
  > = ToUnderscore<_InputFolderPeer, K>;
  export type _InputFolderPeer = {
    "inputFolderPeer": {
      peer: global.InputPeer;                 // InputPeer
      folder_id: number;                      // int
    },
  };

  export const inputFolderPeer: TLConstructor<_InputFolderPeer, "inputFolderPeer">;
  export type FolderPeer<
    K extends keyof _FolderPeer = keyof _FolderPeer
  > = ToUnderscore<_FolderPeer, K>;
  export type _FolderPeer = {
    "folderPeer": {
      peer: global.Peer;                      // Peer
      folder_id: number;                      // int
    },
  };

  export const folderPeer: TLConstructor<_FolderPeer, "folderPeer">;
  export type UrlAuthResult<
    K extends keyof _UrlAuthResult = keyof _UrlAuthResult
  > = ToUnderscore<_UrlAuthResult, K>;
  export type _UrlAuthResult = {
    "urlAuthResultRequest": {
      request_write_access?: true;            // flags.0?true
      bot: global.User;                       // User
      domain: string;                         // string
    },
    "urlAuthResultAccepted": {
      url: string;                            // string
    },
    "urlAuthResultDefault": {}
  };

  export const urlAuthResultRequest: TLConstructor<_UrlAuthResult, "urlAuthResultRequest">;
  export const urlAuthResultAccepted: TLConstructor<_UrlAuthResult, "urlAuthResultAccepted">;
  export const urlAuthResultDefault: TLConstructorEmpty<"urlAuthResultDefault">;
  export type ChannelLocation<
    K extends keyof _ChannelLocation = keyof _ChannelLocation
  > = ToUnderscore<_ChannelLocation, K>;
  export type _ChannelLocation = {
    "channelLocationEmpty": {}
    "channelLocation": {
      geo_point: global.GeoPoint;             // GeoPoint
      address: string;                        // string
    },
  };

  export const channelLocationEmpty: TLConstructorEmpty<"channelLocationEmpty">;
  export const channelLocation: TLConstructor<_ChannelLocation, "channelLocation">;
  export type PeerLocated<
    K extends keyof _PeerLocated = keyof _PeerLocated
  > = ToUnderscore<_PeerLocated, K>;
  export type _PeerLocated = {
    "peerLocated": {
      peer: global.Peer;                      // Peer
      expires: number;                        // int
      distance: number;                       // int
    },
    "peerSelfLocated": {
      expires: number;                        // int
    },
  };

  export const peerLocated: TLConstructor<_PeerLocated, "peerLocated">;
  export const peerSelfLocated: TLConstructor<_PeerLocated, "peerSelfLocated">;
  export type RestrictionReason<
    K extends keyof _RestrictionReason = keyof _RestrictionReason
  > = ToUnderscore<_RestrictionReason, K>;
  export type _RestrictionReason = {
    "restrictionReason": {
      platform: string;                       // string
      reason: string;                         // string
      text: string;                           // string
    },
  };

  export const restrictionReason: TLConstructor<_RestrictionReason, "restrictionReason">;
  export type InputTheme<
    K extends keyof _InputTheme = keyof _InputTheme
  > = ToUnderscore<_InputTheme, K>;
  export type _InputTheme = {
    "inputTheme": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
    "inputThemeSlug": {
      slug: string;                           // string
    },
  };

  export const inputTheme: TLConstructor<_InputTheme, "inputTheme">;
  export const inputThemeSlug: TLConstructor<_InputTheme, "inputThemeSlug">;
  export type Theme<
    K extends keyof _Theme = keyof _Theme
  > = ToUnderscore<_Theme, K>;
  export type _Theme = {
    "theme": {
      creator?: true;                         // flags.0?true
      default?: true;                         // flags.1?true
      for_chat?: true;                        // flags.5?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      slug: string;                           // string
      title: string;                          // string
      document?: global.Document;             // flags.2?Document
      settings?: global.ThemeSettings[];      // flags.3?Vector<ThemeSettings>
      emoticon?: string;                      // flags.6?string
      installs_count?: number;                // flags.4?int
    },
  };

  export const theme: TLConstructor<_Theme, "theme">;
  export type BaseTheme<
    K extends keyof _BaseTheme = keyof _BaseTheme
  > = ToUnderscore<_BaseTheme, K>;
  export type _BaseTheme = {
    "baseThemeClassic": {}
    "baseThemeDay": {}
    "baseThemeNight": {}
    "baseThemeTinted": {}
    "baseThemeArctic": {}
  };

  export const baseThemeClassic: TLConstructorEmpty<"baseThemeClassic">;
  export const baseThemeDay: TLConstructorEmpty<"baseThemeDay">;
  export const baseThemeNight: TLConstructorEmpty<"baseThemeNight">;
  export const baseThemeTinted: TLConstructorEmpty<"baseThemeTinted">;
  export const baseThemeArctic: TLConstructorEmpty<"baseThemeArctic">;
  export type InputThemeSettings<
    K extends keyof _InputThemeSettings = keyof _InputThemeSettings
  > = ToUnderscore<_InputThemeSettings, K>;
  export type _InputThemeSettings = {
    "inputThemeSettings": {
      message_colors_animated?: true;         // flags.2?true
      base_theme: global.BaseTheme;           // BaseTheme
      accent_color: number;                   // int
      outbox_accent_color?: number;           // flags.3?int
      message_colors?: number[];              // flags.0?Vector<int>
      wallpaper?: global.InputWallPaper;      // flags.1?InputWallPaper
      wallpaper_settings?: global.WallPaperSettings; // flags.1?WallPaperSettings
    },
  };

  export const inputThemeSettings: TLConstructor<_InputThemeSettings, "inputThemeSettings">;
  export type ThemeSettings<
    K extends keyof _ThemeSettings = keyof _ThemeSettings
  > = ToUnderscore<_ThemeSettings, K>;
  export type _ThemeSettings = {
    "themeSettings": {
      message_colors_animated?: true;         // flags.2?true
      base_theme: global.BaseTheme;           // BaseTheme
      accent_color: number;                   // int
      outbox_accent_color?: number;           // flags.3?int
      message_colors?: number[];              // flags.0?Vector<int>
      wallpaper?: global.WallPaper;           // flags.1?WallPaper
    },
  };

  export const themeSettings: TLConstructor<_ThemeSettings, "themeSettings">;
  export type WebPageAttribute<
    K extends keyof _WebPageAttribute = keyof _WebPageAttribute
  > = ToUnderscore<_WebPageAttribute, K>;
  export type _WebPageAttribute = {
    "webPageAttributeTheme": {
      documents?: global.Document[];          // flags.0?Vector<Document>
      settings?: global.ThemeSettings;        // flags.1?ThemeSettings
    },
  };

  export const webPageAttributeTheme: TLConstructor<_WebPageAttribute, "webPageAttributeTheme">;
  export type MessageUserVote<
    K extends keyof _MessageUserVote = keyof _MessageUserVote
  > = ToUnderscore<_MessageUserVote, K>;
  export type _MessageUserVote = {
    "messageUserVote": {
      user_id: bigint;                        // long
      option: BufferSource;                   // bytes
      date: number;                           // int
    },
    "messageUserVoteInputOption": {
      user_id: bigint;                        // long
      date: number;                           // int
    },
    "messageUserVoteMultiple": {
      user_id: bigint;                        // long
      options: BufferSource[];                // Vector<bytes>
      date: number;                           // int
    },
  };

  export const messageUserVote: TLConstructor<_MessageUserVote, "messageUserVote">;
  export const messageUserVoteInputOption: TLConstructor<_MessageUserVote, "messageUserVoteInputOption">;
  export const messageUserVoteMultiple: TLConstructor<_MessageUserVote, "messageUserVoteMultiple">;
  export type BankCardOpenUrl<
    K extends keyof _BankCardOpenUrl = keyof _BankCardOpenUrl
  > = ToUnderscore<_BankCardOpenUrl, K>;
  export type _BankCardOpenUrl = {
    "bankCardOpenUrl": {
      url: string;                            // string
      name: string;                           // string
    },
  };

  export const bankCardOpenUrl: TLConstructor<_BankCardOpenUrl, "bankCardOpenUrl">;
  export type DialogFilter<
    K extends keyof _DialogFilter = keyof _DialogFilter
  > = ToUnderscore<_DialogFilter, K>;
  export type _DialogFilter = {
    "dialogFilter": {
      contacts?: true;                        // flags.0?true
      non_contacts?: true;                    // flags.1?true
      groups?: true;                          // flags.2?true
      broadcasts?: true;                      // flags.3?true
      bots?: true;                            // flags.4?true
      exclude_muted?: true;                   // flags.11?true
      exclude_read?: true;                    // flags.12?true
      exclude_archived?: true;                // flags.13?true
      id: number;                             // int
      title: string;                          // string
      emoticon?: string;                      // flags.25?string
      pinned_peers: global.InputPeer[];       // Vector<InputPeer>
      include_peers: global.InputPeer[];      // Vector<InputPeer>
      exclude_peers: global.InputPeer[];      // Vector<InputPeer>
    },
  };

  export const dialogFilter: TLConstructor<_DialogFilter, "dialogFilter">;
  export type DialogFilterSuggested<
    K extends keyof _DialogFilterSuggested = keyof _DialogFilterSuggested
  > = ToUnderscore<_DialogFilterSuggested, K>;
  export type _DialogFilterSuggested = {
    "dialogFilterSuggested": {
      filter: global.DialogFilter;            // DialogFilter
      description: string;                    // string
    },
  };

  export const dialogFilterSuggested: TLConstructor<_DialogFilterSuggested, "dialogFilterSuggested">;
  export type StatsDateRangeDays<
    K extends keyof _StatsDateRangeDays = keyof _StatsDateRangeDays
  > = ToUnderscore<_StatsDateRangeDays, K>;
  export type _StatsDateRangeDays = {
    "statsDateRangeDays": {
      min_date: number;                       // int
      max_date: number;                       // int
    },
  };

  export const statsDateRangeDays: TLConstructor<_StatsDateRangeDays, "statsDateRangeDays">;
  export type StatsAbsValueAndPrev<
    K extends keyof _StatsAbsValueAndPrev = keyof _StatsAbsValueAndPrev
  > = ToUnderscore<_StatsAbsValueAndPrev, K>;
  export type _StatsAbsValueAndPrev = {
    "statsAbsValueAndPrev": {
      current: number;                        // double
      previous: number;                       // double
    },
  };

  export const statsAbsValueAndPrev: TLConstructor<_StatsAbsValueAndPrev, "statsAbsValueAndPrev">;
  export type StatsPercentValue<
    K extends keyof _StatsPercentValue = keyof _StatsPercentValue
  > = ToUnderscore<_StatsPercentValue, K>;
  export type _StatsPercentValue = {
    "statsPercentValue": {
      part: number;                           // double
      total: number;                          // double
    },
  };

  export const statsPercentValue: TLConstructor<_StatsPercentValue, "statsPercentValue">;
  export type StatsGraph<
    K extends keyof _StatsGraph = keyof _StatsGraph
  > = ToUnderscore<_StatsGraph, K>;
  export type _StatsGraph = {
    "statsGraphAsync": {
      token: string;                          // string
    },
    "statsGraphError": {
      error: string;                          // string
    },
    "statsGraph": {
      json: global.DataJSON;                  // DataJSON
      zoom_token?: string;                    // flags.0?string
    },
  };

  export const statsGraphAsync: TLConstructor<_StatsGraph, "statsGraphAsync">;
  export const statsGraphError: TLConstructor<_StatsGraph, "statsGraphError">;
  export const statsGraph: TLConstructor<_StatsGraph, "statsGraph">;
  export type MessageInteractionCounters<
    K extends keyof _MessageInteractionCounters = keyof _MessageInteractionCounters
  > = ToUnderscore<_MessageInteractionCounters, K>;
  export type _MessageInteractionCounters = {
    "messageInteractionCounters": {
      msg_id: number;                         // int
      views: number;                          // int
      forwards: number;                       // int
    },
  };

  export const messageInteractionCounters: TLConstructor<_MessageInteractionCounters, "messageInteractionCounters">;
  export type VideoSize<
    K extends keyof _VideoSize = keyof _VideoSize
  > = ToUnderscore<_VideoSize, K>;
  export type _VideoSize = {
    "videoSize": {
      type: string;                           // string
      w: number;                              // int
      h: number;                              // int
      size: number;                           // int
      video_start_ts?: number;                // flags.0?double
    },
  };

  export const videoSize: TLConstructor<_VideoSize, "videoSize">;
  export type StatsGroupTopPoster<
    K extends keyof _StatsGroupTopPoster = keyof _StatsGroupTopPoster
  > = ToUnderscore<_StatsGroupTopPoster, K>;
  export type _StatsGroupTopPoster = {
    "statsGroupTopPoster": {
      user_id: bigint;                        // long
      messages: number;                       // int
      avg_chars: number;                      // int
    },
  };

  export const statsGroupTopPoster: TLConstructor<_StatsGroupTopPoster, "statsGroupTopPoster">;
  export type StatsGroupTopAdmin<
    K extends keyof _StatsGroupTopAdmin = keyof _StatsGroupTopAdmin
  > = ToUnderscore<_StatsGroupTopAdmin, K>;
  export type _StatsGroupTopAdmin = {
    "statsGroupTopAdmin": {
      user_id: bigint;                        // long
      deleted: number;                        // int
      kicked: number;                         // int
      banned: number;                         // int
    },
  };

  export const statsGroupTopAdmin: TLConstructor<_StatsGroupTopAdmin, "statsGroupTopAdmin">;
  export type StatsGroupTopInviter<
    K extends keyof _StatsGroupTopInviter = keyof _StatsGroupTopInviter
  > = ToUnderscore<_StatsGroupTopInviter, K>;
  export type _StatsGroupTopInviter = {
    "statsGroupTopInviter": {
      user_id: bigint;                        // long
      invitations: number;                    // int
    },
  };

  export const statsGroupTopInviter: TLConstructor<_StatsGroupTopInviter, "statsGroupTopInviter">;
  export type GlobalPrivacySettings<
    K extends keyof _GlobalPrivacySettings = keyof _GlobalPrivacySettings
  > = ToUnderscore<_GlobalPrivacySettings, K>;
  export type _GlobalPrivacySettings = {
    "globalPrivacySettings": {
      archive_and_mute_new_noncontact_peers?: boolean; // flags.0?Bool
    },
  };

  export const globalPrivacySettings: TLConstructor<_GlobalPrivacySettings, "globalPrivacySettings">;
  export type MessageViews<
    K extends keyof _MessageViews = keyof _MessageViews
  > = ToUnderscore<_MessageViews, K>;
  export type _MessageViews = {
    "messageViews": {
      views?: number;                         // flags.0?int
      forwards?: number;                      // flags.1?int
      replies?: global.MessageReplies;        // flags.2?MessageReplies
    },
  };

  export const messageViews: TLConstructor<_MessageViews, "messageViews">;
  export type MessageReplyHeader<
    K extends keyof _MessageReplyHeader = keyof _MessageReplyHeader
  > = ToUnderscore<_MessageReplyHeader, K>;
  export type _MessageReplyHeader = {
    "messageReplyHeader": {
      reply_to_scheduled?: true;              // flags.2?true
      reply_to_msg_id: number;                // int
      reply_to_peer_id?: global.Peer;         // flags.0?Peer
      reply_to_top_id?: number;               // flags.1?int
    },
  };

  export const messageReplyHeader: TLConstructor<_MessageReplyHeader, "messageReplyHeader">;
  export type MessageReplies<
    K extends keyof _MessageReplies = keyof _MessageReplies
  > = ToUnderscore<_MessageReplies, K>;
  export type _MessageReplies = {
    "messageReplies": {
      comments?: true;                        // flags.0?true
      replies: number;                        // int
      replies_pts: number;                    // int
      recent_repliers?: global.Peer[];        // flags.1?Vector<Peer>
      channel_id?: bigint;                    // flags.0?long
      max_id?: number;                        // flags.2?int
      read_max_id?: number;                   // flags.3?int
    },
  };

  export const messageReplies: TLConstructor<_MessageReplies, "messageReplies">;
  export type PeerBlocked<
    K extends keyof _PeerBlocked = keyof _PeerBlocked
  > = ToUnderscore<_PeerBlocked, K>;
  export type _PeerBlocked = {
    "peerBlocked": {
      peer_id: global.Peer;                   // Peer
      date: number;                           // int
    },
  };

  export const peerBlocked: TLConstructor<_PeerBlocked, "peerBlocked">;
  export type GroupCall<
    K extends keyof _GroupCall = keyof _GroupCall
  > = ToUnderscore<_GroupCall, K>;
  export type _GroupCall = {
    "groupCallDiscarded": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
      duration: number;                       // int
    },
    "groupCall": {
      join_muted?: true;                      // flags.1?true
      can_change_join_muted?: true;           // flags.2?true
      join_date_asc?: true;                   // flags.6?true
      schedule_start_subscribed?: true;       // flags.8?true
      can_start_video?: true;                 // flags.9?true
      record_video_active?: true;             // flags.11?true
      rtmp_stream?: true;                     // flags.12?true
      listeners_hidden?: true;                // flags.13?true
      id: bigint;                             // long
      access_hash: bigint;                    // long
      participants_count: number;             // int
      title?: string;                         // flags.3?string
      stream_dc_id?: number;                  // flags.4?int
      record_start_date?: number;             // flags.5?int
      schedule_date?: number;                 // flags.7?int
      unmuted_video_count?: number;           // flags.10?int
      unmuted_video_limit: number;            // int
      version: number;                        // int
    },
  };

  export const groupCallDiscarded: TLConstructor<_GroupCall, "groupCallDiscarded">;
  export const groupCall: TLConstructor<_GroupCall, "groupCall">;
  export type InputGroupCall<
    K extends keyof _InputGroupCall = keyof _InputGroupCall
  > = ToUnderscore<_InputGroupCall, K>;
  export type _InputGroupCall = {
    "inputGroupCall": {
      id: bigint;                             // long
      access_hash: bigint;                    // long
    },
  };

  export const inputGroupCall: TLConstructor<_InputGroupCall, "inputGroupCall">;
  export type GroupCallParticipant<
    K extends keyof _GroupCallParticipant = keyof _GroupCallParticipant
  > = ToUnderscore<_GroupCallParticipant, K>;
  export type _GroupCallParticipant = {
    "groupCallParticipant": {
      muted?: true;                           // flags.0?true
      left?: true;                            // flags.1?true
      can_self_unmute?: true;                 // flags.2?true
      just_joined?: true;                     // flags.4?true
      versioned?: true;                       // flags.5?true
      min?: true;                             // flags.8?true
      muted_by_you?: true;                    // flags.9?true
      volume_by_admin?: true;                 // flags.10?true
      self?: true;                            // flags.12?true
      video_joined?: true;                    // flags.15?true
      peer: global.Peer;                      // Peer
      date: number;                           // int
      active_date?: number;                   // flags.3?int
      source: number;                         // int
      volume?: number;                        // flags.7?int
      about?: string;                         // flags.11?string
      raise_hand_rating?: bigint;             // flags.13?long
      video?: global.GroupCallParticipantVideo; // flags.6?GroupCallParticipantVideo
      presentation?: global.GroupCallParticipantVideo; // flags.14?GroupCallParticipantVideo
    },
  };

  export const groupCallParticipant: TLConstructor<_GroupCallParticipant, "groupCallParticipant">;
  export type InlineQueryPeerType<
    K extends keyof _InlineQueryPeerType = keyof _InlineQueryPeerType
  > = ToUnderscore<_InlineQueryPeerType, K>;
  export type _InlineQueryPeerType = {
    "inlineQueryPeerTypeSameBotPM": {}
    "inlineQueryPeerTypePM": {}
    "inlineQueryPeerTypeChat": {}
    "inlineQueryPeerTypeMegagroup": {}
    "inlineQueryPeerTypeBroadcast": {}
  };

  export const inlineQueryPeerTypeSameBotPM: TLConstructorEmpty<"inlineQueryPeerTypeSameBotPM">;
  export const inlineQueryPeerTypePM: TLConstructorEmpty<"inlineQueryPeerTypePM">;
  export const inlineQueryPeerTypeChat: TLConstructorEmpty<"inlineQueryPeerTypeChat">;
  export const inlineQueryPeerTypeMegagroup: TLConstructorEmpty<"inlineQueryPeerTypeMegagroup">;
  export const inlineQueryPeerTypeBroadcast: TLConstructorEmpty<"inlineQueryPeerTypeBroadcast">;
  export type ChatInviteImporter<
    K extends keyof _ChatInviteImporter = keyof _ChatInviteImporter
  > = ToUnderscore<_ChatInviteImporter, K>;
  export type _ChatInviteImporter = {
    "chatInviteImporter": {
      requested?: true;                       // flags.0?true
      user_id: bigint;                        // long
      date: number;                           // int
      about?: string;                         // flags.2?string
      approved_by?: bigint;                   // flags.1?long
    },
  };

  export const chatInviteImporter: TLConstructor<_ChatInviteImporter, "chatInviteImporter">;
  export type ChatAdminWithInvites<
    K extends keyof _ChatAdminWithInvites = keyof _ChatAdminWithInvites
  > = ToUnderscore<_ChatAdminWithInvites, K>;
  export type _ChatAdminWithInvites = {
    "chatAdminWithInvites": {
      admin_id: bigint;                       // long
      invites_count: number;                  // int
      revoked_invites_count: number;          // int
    },
  };

  export const chatAdminWithInvites: TLConstructor<_ChatAdminWithInvites, "chatAdminWithInvites">;
  export type GroupCallParticipantVideoSourceGroup<
    K extends keyof _GroupCallParticipantVideoSourceGroup = keyof _GroupCallParticipantVideoSourceGroup
  > = ToUnderscore<_GroupCallParticipantVideoSourceGroup, K>;
  export type _GroupCallParticipantVideoSourceGroup = {
    "groupCallParticipantVideoSourceGroup": {
      semantics: string;                      // string
      sources: number[];                      // Vector<int>
    },
  };

  export const groupCallParticipantVideoSourceGroup: TLConstructor<_GroupCallParticipantVideoSourceGroup, "groupCallParticipantVideoSourceGroup">;
  export type GroupCallParticipantVideo<
    K extends keyof _GroupCallParticipantVideo = keyof _GroupCallParticipantVideo
  > = ToUnderscore<_GroupCallParticipantVideo, K>;
  export type _GroupCallParticipantVideo = {
    "groupCallParticipantVideo": {
      paused?: true;                          // flags.0?true
      endpoint: string;                       // string
      source_groups: global.GroupCallParticipantVideoSourceGroup[]; // Vector<GroupCallParticipantVideoSourceGroup>
      audio_source?: number;                  // flags.1?int
    },
  };

  export const groupCallParticipantVideo: TLConstructor<_GroupCallParticipantVideo, "groupCallParticipantVideo">;
  export type BotCommandScope<
    K extends keyof _BotCommandScope = keyof _BotCommandScope
  > = ToUnderscore<_BotCommandScope, K>;
  export type _BotCommandScope = {
    "botCommandScopeDefault": {}
    "botCommandScopeUsers": {}
    "botCommandScopeChats": {}
    "botCommandScopeChatAdmins": {}
    "botCommandScopePeer": {
      peer: global.InputPeer;                 // InputPeer
    },
    "botCommandScopePeerAdmins": {
      peer: global.InputPeer;                 // InputPeer
    },
    "botCommandScopePeerUser": {
      peer: global.InputPeer;                 // InputPeer
      user_id: global.InputUser;              // InputUser
    },
  };

  export const botCommandScopeDefault: TLConstructorEmpty<"botCommandScopeDefault">;
  export const botCommandScopeUsers: TLConstructorEmpty<"botCommandScopeUsers">;
  export const botCommandScopeChats: TLConstructorEmpty<"botCommandScopeChats">;
  export const botCommandScopeChatAdmins: TLConstructorEmpty<"botCommandScopeChatAdmins">;
  export const botCommandScopePeer: TLConstructor<_BotCommandScope, "botCommandScopePeer">;
  export const botCommandScopePeerAdmins: TLConstructor<_BotCommandScope, "botCommandScopePeerAdmins">;
  export const botCommandScopePeerUser: TLConstructor<_BotCommandScope, "botCommandScopePeerUser">;
  export type SponsoredMessage<
    K extends keyof _SponsoredMessage = keyof _SponsoredMessage
  > = ToUnderscore<_SponsoredMessage, K>;
  export type _SponsoredMessage = {
    "sponsoredMessage": {
      random_id: BufferSource;                // bytes
      from_id?: global.Peer;                  // flags.3?Peer
      chat_invite?: global.ChatInvite;        // flags.4?ChatInvite
      chat_invite_hash?: string;              // flags.4?string
      channel_post?: number;                  // flags.2?int
      start_param?: string;                   // flags.0?string
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.1?Vector<MessageEntity>
    },
  };

  export const sponsoredMessage: TLConstructor<_SponsoredMessage, "sponsoredMessage">;
  export type SearchResultsCalendarPeriod<
    K extends keyof _SearchResultsCalendarPeriod = keyof _SearchResultsCalendarPeriod
  > = ToUnderscore<_SearchResultsCalendarPeriod, K>;
  export type _SearchResultsCalendarPeriod = {
    "searchResultsCalendarPeriod": {
      date: number;                           // int
      min_msg_id: number;                     // int
      max_msg_id: number;                     // int
      count: number;                          // int
    },
  };

  export const searchResultsCalendarPeriod: TLConstructor<_SearchResultsCalendarPeriod, "searchResultsCalendarPeriod">;
  export type SearchResultsPosition<
    K extends keyof _SearchResultsPosition = keyof _SearchResultsPosition
  > = ToUnderscore<_SearchResultsPosition, K>;
  export type _SearchResultsPosition = {
    "searchResultPosition": {
      msg_id: number;                         // int
      date: number;                           // int
      offset: number;                         // int
    },
  };

  export const searchResultPosition: TLConstructor<_SearchResultsPosition, "searchResultPosition">;
  export type ReactionCount<
    K extends keyof _ReactionCount = keyof _ReactionCount
  > = ToUnderscore<_ReactionCount, K>;
  export type _ReactionCount = {
    "reactionCount": {
      chosen?: true;                          // flags.0?true
      reaction: string;                       // string
      count: number;                          // int
    },
  };

  export const reactionCount: TLConstructor<_ReactionCount, "reactionCount">;
  export type MessageReactions<
    K extends keyof _MessageReactions = keyof _MessageReactions
  > = ToUnderscore<_MessageReactions, K>;
  export type _MessageReactions = {
    "messageReactions": {
      min?: true;                             // flags.0?true
      can_see_list?: true;                    // flags.2?true
      results: global.ReactionCount[];        // Vector<ReactionCount>
      recent_reactions?: global.MessagePeerReaction[]; // flags.1?Vector<MessagePeerReaction>
    },
  };

  export const messageReactions: TLConstructor<_MessageReactions, "messageReactions">;
  export type AvailableReaction<
    K extends keyof _AvailableReaction = keyof _AvailableReaction
  > = ToUnderscore<_AvailableReaction, K>;
  export type _AvailableReaction = {
    "availableReaction": {
      inactive?: true;                        // flags.0?true
      reaction: string;                       // string
      title: string;                          // string
      static_icon: global.Document;           // Document
      appear_animation: global.Document;      // Document
      select_animation: global.Document;      // Document
      activate_animation: global.Document;    // Document
      effect_animation: global.Document;      // Document
      around_animation?: global.Document;     // flags.1?Document
      center_icon?: global.Document;          // flags.1?Document
    },
  };

  export const availableReaction: TLConstructor<_AvailableReaction, "availableReaction">;
  export type MessagePeerReaction<
    K extends keyof _MessagePeerReaction = keyof _MessagePeerReaction
  > = ToUnderscore<_MessagePeerReaction, K>;
  export type _MessagePeerReaction = {
    "messagePeerReaction": {
      big?: true;                             // flags.0?true
      unread?: true;                          // flags.1?true
      peer_id: global.Peer;                   // Peer
      reaction: string;                       // string
    },
  };

  export const messagePeerReaction: TLConstructor<_MessagePeerReaction, "messagePeerReaction">;
  export type GroupCallStreamChannel<
    K extends keyof _GroupCallStreamChannel = keyof _GroupCallStreamChannel
  > = ToUnderscore<_GroupCallStreamChannel, K>;
  export type _GroupCallStreamChannel = {
    "groupCallStreamChannel": {
      channel: number;                        // int
      scale: number;                          // int
      last_timestamp_ms: bigint;              // long
    },
  };

  export const groupCallStreamChannel: TLConstructor<_GroupCallStreamChannel, "groupCallStreamChannel">;
}

export default global;

export namespace storage {
  export type FileType<
    K extends keyof _FileType = keyof _FileType
  > = ToUnderscore<_FileType, K>;
  export type _FileType = {
    "storage.fileUnknown": {}
    "storage.filePartial": {}
    "storage.fileJpeg": {}
    "storage.fileGif": {}
    "storage.filePng": {}
    "storage.filePdf": {}
    "storage.fileMp3": {}
    "storage.fileMov": {}
    "storage.fileMp4": {}
    "storage.fileWebp": {}
  };

  export const fileUnknown: TLConstructorEmpty<"storage.fileUnknown">;
  export const filePartial: TLConstructorEmpty<"storage.filePartial">;
  export const fileJpeg: TLConstructorEmpty<"storage.fileJpeg">;
  export const fileGif: TLConstructorEmpty<"storage.fileGif">;
  export const filePng: TLConstructorEmpty<"storage.filePng">;
  export const filePdf: TLConstructorEmpty<"storage.filePdf">;
  export const fileMp3: TLConstructorEmpty<"storage.fileMp3">;
  export const fileMov: TLConstructorEmpty<"storage.fileMov">;
  export const fileMp4: TLConstructorEmpty<"storage.fileMp4">;
  export const fileWebp: TLConstructorEmpty<"storage.fileWebp">;
}

export namespace auth {
  export type SentCode<
    K extends keyof _SentCode = keyof _SentCode
  > = ToUnderscore<_SentCode, K>;
  export type _SentCode = {
    "auth.sentCode": {
      type: auth.SentCodeType;                // auth.SentCodeType
      phone_code_hash: string;                // string
      next_type?: auth.CodeType;              // flags.1?auth.CodeType
      timeout?: number;                       // flags.2?int
    },
  };

  export const sentCode: TLConstructor<_SentCode, "auth.sentCode">;
  export type Authorization<
    K extends keyof _Authorization = keyof _Authorization
  > = ToUnderscore<_Authorization, K>;
  export type _Authorization = {
    "auth.authorization": {
      setup_password_required?: true;         // flags.1?true
      otherwise_relogin_days?: number;        // flags.1?int
      tmp_sessions?: number;                  // flags.0?int
      user: global.User;                      // User
    },
    "auth.authorizationSignUpRequired": {
      terms_of_service?: help.TermsOfService; // flags.0?help.TermsOfService
    },
  };

  export const authorization: TLConstructor<_Authorization, "auth.authorization">;
  export const authorizationSignUpRequired: TLConstructor<_Authorization, "auth.authorizationSignUpRequired">;
  export type ExportedAuthorization<
    K extends keyof _ExportedAuthorization = keyof _ExportedAuthorization
  > = ToUnderscore<_ExportedAuthorization, K>;
  export type _ExportedAuthorization = {
    "auth.exportedAuthorization": {
      id: bigint;                             // long
      bytes: BufferSource;                    // bytes
    },
  };

  export const exportedAuthorization: TLConstructor<_ExportedAuthorization, "auth.exportedAuthorization">;
  export type PasswordRecovery<
    K extends keyof _PasswordRecovery = keyof _PasswordRecovery
  > = ToUnderscore<_PasswordRecovery, K>;
  export type _PasswordRecovery = {
    "auth.passwordRecovery": {
      email_pattern: string;                  // string
    },
  };

  export const passwordRecovery: TLConstructor<_PasswordRecovery, "auth.passwordRecovery">;
  export type CodeType<
    K extends keyof _CodeType = keyof _CodeType
  > = ToUnderscore<_CodeType, K>;
  export type _CodeType = {
    "auth.codeTypeSms": {}
    "auth.codeTypeCall": {}
    "auth.codeTypeFlashCall": {}
    "auth.codeTypeMissedCall": {}
  };

  export const codeTypeSms: TLConstructorEmpty<"auth.codeTypeSms">;
  export const codeTypeCall: TLConstructorEmpty<"auth.codeTypeCall">;
  export const codeTypeFlashCall: TLConstructorEmpty<"auth.codeTypeFlashCall">;
  export const codeTypeMissedCall: TLConstructorEmpty<"auth.codeTypeMissedCall">;
  export type SentCodeType<
    K extends keyof _SentCodeType = keyof _SentCodeType
  > = ToUnderscore<_SentCodeType, K>;
  export type _SentCodeType = {
    "auth.sentCodeTypeApp": {
      length: number;                         // int
    },
    "auth.sentCodeTypeSms": {
      length: number;                         // int
    },
    "auth.sentCodeTypeCall": {
      length: number;                         // int
    },
    "auth.sentCodeTypeFlashCall": {
      pattern: string;                        // string
    },
    "auth.sentCodeTypeMissedCall": {
      prefix: string;                         // string
      length: number;                         // int
    },
  };

  export const sentCodeTypeApp: TLConstructor<_SentCodeType, "auth.sentCodeTypeApp">;
  export const sentCodeTypeSms: TLConstructor<_SentCodeType, "auth.sentCodeTypeSms">;
  export const sentCodeTypeCall: TLConstructor<_SentCodeType, "auth.sentCodeTypeCall">;
  export const sentCodeTypeFlashCall: TLConstructor<_SentCodeType, "auth.sentCodeTypeFlashCall">;
  export const sentCodeTypeMissedCall: TLConstructor<_SentCodeType, "auth.sentCodeTypeMissedCall">;
  export type LoginToken<
    K extends keyof _LoginToken = keyof _LoginToken
  > = ToUnderscore<_LoginToken, K>;
  export type _LoginToken = {
    "auth.loginToken": {
      expires: number;                        // int
      token: BufferSource;                    // bytes
    },
    "auth.loginTokenMigrateTo": {
      dc_id: number;                          // int
      token: BufferSource;                    // bytes
    },
    "auth.loginTokenSuccess": {
      authorization: auth.Authorization;      // auth.Authorization
    },
  };

  export const loginToken: TLConstructor<_LoginToken, "auth.loginToken">;
  export const loginTokenMigrateTo: TLConstructor<_LoginToken, "auth.loginTokenMigrateTo">;
  export const loginTokenSuccess: TLConstructor<_LoginToken, "auth.loginTokenSuccess">;
  export type LoggedOut<
    K extends keyof _LoggedOut = keyof _LoggedOut
  > = ToUnderscore<_LoggedOut, K>;
  export type _LoggedOut = {
    "auth.loggedOut": {
      future_auth_token?: BufferSource;       // flags.0?bytes
    },
  };

  export const loggedOut: TLConstructor<_LoggedOut, "auth.loggedOut">;
}

export namespace contacts {
  export type Contacts<
    K extends keyof _Contacts = keyof _Contacts
  > = ToUnderscore<_Contacts, K>;
  export type _Contacts = {
    "contacts.contactsNotModified": {}
    "contacts.contacts": {
      contacts: global.Contact[];             // Vector<Contact>
      saved_count: number;                    // int
      users: global.User[];                   // Vector<User>
    },
  };

  export const contactsNotModified: TLConstructorEmpty<"contacts.contactsNotModified">;
  export const contacts: TLConstructor<_Contacts, "contacts.contacts">;
  export type ImportedContacts<
    K extends keyof _ImportedContacts = keyof _ImportedContacts
  > = ToUnderscore<_ImportedContacts, K>;
  export type _ImportedContacts = {
    "contacts.importedContacts": {
      imported: global.ImportedContact[];     // Vector<ImportedContact>
      popular_invites: global.PopularContact[]; // Vector<PopularContact>
      retry_contacts: bigint[];               // Vector<long>
      users: global.User[];                   // Vector<User>
    },
  };

  export const importedContacts: TLConstructor<_ImportedContacts, "contacts.importedContacts">;
  export type Blocked<
    K extends keyof _Blocked = keyof _Blocked
  > = ToUnderscore<_Blocked, K>;
  export type _Blocked = {
    "contacts.blocked": {
      blocked: global.PeerBlocked[];          // Vector<PeerBlocked>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "contacts.blockedSlice": {
      count: number;                          // int
      blocked: global.PeerBlocked[];          // Vector<PeerBlocked>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const blocked: TLConstructor<_Blocked, "contacts.blocked">;
  export const blockedSlice: TLConstructor<_Blocked, "contacts.blockedSlice">;
  export type Found<
    K extends keyof _Found = keyof _Found
  > = ToUnderscore<_Found, K>;
  export type _Found = {
    "contacts.found": {
      my_results: global.Peer[];              // Vector<Peer>
      results: global.Peer[];                 // Vector<Peer>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const found: TLConstructor<_Found, "contacts.found">;
  export type ResolvedPeer<
    K extends keyof _ResolvedPeer = keyof _ResolvedPeer
  > = ToUnderscore<_ResolvedPeer, K>;
  export type _ResolvedPeer = {
    "contacts.resolvedPeer": {
      peer: global.Peer;                      // Peer
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const resolvedPeer: TLConstructor<_ResolvedPeer, "contacts.resolvedPeer">;
  export type TopPeers<
    K extends keyof _TopPeers = keyof _TopPeers
  > = ToUnderscore<_TopPeers, K>;
  export type _TopPeers = {
    "contacts.topPeersNotModified": {}
    "contacts.topPeers": {
      categories: global.TopPeerCategoryPeers[]; // Vector<TopPeerCategoryPeers>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "contacts.topPeersDisabled": {}
  };

  export const topPeersNotModified: TLConstructorEmpty<"contacts.topPeersNotModified">;
  export const topPeers: TLConstructor<_TopPeers, "contacts.topPeers">;
  export const topPeersDisabled: TLConstructorEmpty<"contacts.topPeersDisabled">;
}

export namespace messages {
  export type Dialogs<
    K extends keyof _Dialogs = keyof _Dialogs
  > = ToUnderscore<_Dialogs, K>;
  export type _Dialogs = {
    "messages.dialogs": {
      dialogs: global.Dialog[];               // Vector<Dialog>
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "messages.dialogsSlice": {
      count: number;                          // int
      dialogs: global.Dialog[];               // Vector<Dialog>
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "messages.dialogsNotModified": {
      count: number;                          // int
    },
  };

  export const dialogs: TLConstructor<_Dialogs, "messages.dialogs">;
  export const dialogsSlice: TLConstructor<_Dialogs, "messages.dialogsSlice">;
  export const dialogsNotModified: TLConstructor<_Dialogs, "messages.dialogsNotModified">;
  export type Messages<
    K extends keyof _Messages = keyof _Messages
  > = ToUnderscore<_Messages, K>;
  export type _Messages = {
    "messages.messages": {
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "messages.messagesSlice": {
      inexact?: true;                         // flags.1?true
      count: number;                          // int
      next_rate?: number;                     // flags.0?int
      offset_id_offset?: number;              // flags.2?int
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "messages.channelMessages": {
      inexact?: true;                         // flags.1?true
      pts: number;                            // int
      count: number;                          // int
      offset_id_offset?: number;              // flags.2?int
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "messages.messagesNotModified": {
      count: number;                          // int
    },
  };

  export const messages: TLConstructor<_Messages, "messages.messages">;
  export const messagesSlice: TLConstructor<_Messages, "messages.messagesSlice">;
  export const channelMessages: TLConstructor<_Messages, "messages.channelMessages">;
  export const messagesNotModified: TLConstructor<_Messages, "messages.messagesNotModified">;
  export type Chats<
    K extends keyof _Chats = keyof _Chats
  > = ToUnderscore<_Chats, K>;
  export type _Chats = {
    "messages.chats": {
      chats: global.Chat[];                   // Vector<Chat>
    },
    "messages.chatsSlice": {
      count: number;                          // int
      chats: global.Chat[];                   // Vector<Chat>
    },
  };

  export const chats: TLConstructor<_Chats, "messages.chats">;
  export const chatsSlice: TLConstructor<_Chats, "messages.chatsSlice">;
  export type ChatFull<
    K extends keyof _ChatFull = keyof _ChatFull
  > = ToUnderscore<_ChatFull, K>;
  export type _ChatFull = {
    "messages.chatFull": {
      full_chat: global.ChatFull;             // ChatFull
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const chatFull: TLConstructor<_ChatFull, "messages.chatFull">;
  export type AffectedHistory<
    K extends keyof _AffectedHistory = keyof _AffectedHistory
  > = ToUnderscore<_AffectedHistory, K>;
  export type _AffectedHistory = {
    "messages.affectedHistory": {
      pts: number;                            // int
      pts_count: number;                      // int
      offset: number;                         // int
    },
  };

  export const affectedHistory: TLConstructor<_AffectedHistory, "messages.affectedHistory">;
  export type DhConfig<
    K extends keyof _DhConfig = keyof _DhConfig
  > = ToUnderscore<_DhConfig, K>;
  export type _DhConfig = {
    "messages.dhConfigNotModified": {
      random: BufferSource;                   // bytes
    },
    "messages.dhConfig": {
      g: number;                              // int
      p: BufferSource;                        // bytes
      version: number;                        // int
      random: BufferSource;                   // bytes
    },
  };

  export const dhConfigNotModified: TLConstructor<_DhConfig, "messages.dhConfigNotModified">;
  export const dhConfig: TLConstructor<_DhConfig, "messages.dhConfig">;
  export type SentEncryptedMessage<
    K extends keyof _SentEncryptedMessage = keyof _SentEncryptedMessage
  > = ToUnderscore<_SentEncryptedMessage, K>;
  export type _SentEncryptedMessage = {
    "messages.sentEncryptedMessage": {
      date: number;                           // int
    },
    "messages.sentEncryptedFile": {
      date: number;                           // int
      file: global.EncryptedFile;             // EncryptedFile
    },
  };

  export const sentEncryptedMessage: TLConstructor<_SentEncryptedMessage, "messages.sentEncryptedMessage">;
  export const sentEncryptedFile: TLConstructor<_SentEncryptedMessage, "messages.sentEncryptedFile">;
  export type Stickers<
    K extends keyof _Stickers = keyof _Stickers
  > = ToUnderscore<_Stickers, K>;
  export type _Stickers = {
    "messages.stickersNotModified": {}
    "messages.stickers": {
      hash: bigint;                           // long
      stickers: global.Document[];            // Vector<Document>
    },
  };

  export const stickersNotModified: TLConstructorEmpty<"messages.stickersNotModified">;
  export const stickers: TLConstructor<_Stickers, "messages.stickers">;
  export type AllStickers<
    K extends keyof _AllStickers = keyof _AllStickers
  > = ToUnderscore<_AllStickers, K>;
  export type _AllStickers = {
    "messages.allStickersNotModified": {}
    "messages.allStickers": {
      hash: bigint;                           // long
      sets: global.StickerSet[];              // Vector<StickerSet>
    },
  };

  export const allStickersNotModified: TLConstructorEmpty<"messages.allStickersNotModified">;
  export const allStickers: TLConstructor<_AllStickers, "messages.allStickers">;
  export type AffectedMessages<
    K extends keyof _AffectedMessages = keyof _AffectedMessages
  > = ToUnderscore<_AffectedMessages, K>;
  export type _AffectedMessages = {
    "messages.affectedMessages": {
      pts: number;                            // int
      pts_count: number;                      // int
    },
  };

  export const affectedMessages: TLConstructor<_AffectedMessages, "messages.affectedMessages">;
  export type StickerSet<
    K extends keyof _StickerSet = keyof _StickerSet
  > = ToUnderscore<_StickerSet, K>;
  export type _StickerSet = {
    "messages.stickerSet": {
      set: global.StickerSet;                 // StickerSet
      packs: global.StickerPack[];            // Vector<StickerPack>
      documents: global.Document[];           // Vector<Document>
    },
    "messages.stickerSetNotModified": {}
  };

  export const stickerSet: TLConstructor<_StickerSet, "messages.stickerSet">;
  export const stickerSetNotModified: TLConstructorEmpty<"messages.stickerSetNotModified">;
  export type SavedGifs<
    K extends keyof _SavedGifs = keyof _SavedGifs
  > = ToUnderscore<_SavedGifs, K>;
  export type _SavedGifs = {
    "messages.savedGifsNotModified": {}
    "messages.savedGifs": {
      hash: bigint;                           // long
      gifs: global.Document[];                // Vector<Document>
    },
  };

  export const savedGifsNotModified: TLConstructorEmpty<"messages.savedGifsNotModified">;
  export const savedGifs: TLConstructor<_SavedGifs, "messages.savedGifs">;
  export type BotResults<
    K extends keyof _BotResults = keyof _BotResults
  > = ToUnderscore<_BotResults, K>;
  export type _BotResults = {
    "messages.botResults": {
      gallery?: true;                         // flags.0?true
      query_id: bigint;                       // long
      next_offset?: string;                   // flags.1?string
      switch_pm?: global.InlineBotSwitchPM;   // flags.2?InlineBotSwitchPM
      results: global.BotInlineResult[];      // Vector<BotInlineResult>
      cache_time: number;                     // int
      users: global.User[];                   // Vector<User>
    },
  };

  export const botResults: TLConstructor<_BotResults, "messages.botResults">;
  export type BotCallbackAnswer<
    K extends keyof _BotCallbackAnswer = keyof _BotCallbackAnswer
  > = ToUnderscore<_BotCallbackAnswer, K>;
  export type _BotCallbackAnswer = {
    "messages.botCallbackAnswer": {
      alert?: true;                           // flags.1?true
      has_url?: true;                         // flags.3?true
      native_ui?: true;                       // flags.4?true
      message?: string;                       // flags.0?string
      url?: string;                           // flags.2?string
      cache_time: number;                     // int
    },
  };

  export const botCallbackAnswer: TLConstructor<_BotCallbackAnswer, "messages.botCallbackAnswer">;
  export type MessageEditData<
    K extends keyof _MessageEditData = keyof _MessageEditData
  > = ToUnderscore<_MessageEditData, K>;
  export type _MessageEditData = {
    "messages.messageEditData": {
      caption?: true;                         // flags.0?true
    },
  };

  export const messageEditData: TLConstructor<_MessageEditData, "messages.messageEditData">;
  export type PeerDialogs<
    K extends keyof _PeerDialogs = keyof _PeerDialogs
  > = ToUnderscore<_PeerDialogs, K>;
  export type _PeerDialogs = {
    "messages.peerDialogs": {
      dialogs: global.Dialog[];               // Vector<Dialog>
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
      state: updates.State;                   // updates.State
    },
  };

  export const peerDialogs: TLConstructor<_PeerDialogs, "messages.peerDialogs">;
  export type FeaturedStickers<
    K extends keyof _FeaturedStickers = keyof _FeaturedStickers
  > = ToUnderscore<_FeaturedStickers, K>;
  export type _FeaturedStickers = {
    "messages.featuredStickersNotModified": {
      count: number;                          // int
    },
    "messages.featuredStickers": {
      hash: bigint;                           // long
      count: number;                          // int
      sets: global.StickerSetCovered[];       // Vector<StickerSetCovered>
      unread: bigint[];                       // Vector<long>
    },
  };

  export const featuredStickersNotModified: TLConstructor<_FeaturedStickers, "messages.featuredStickersNotModified">;
  export const featuredStickers: TLConstructor<_FeaturedStickers, "messages.featuredStickers">;
  export type RecentStickers<
    K extends keyof _RecentStickers = keyof _RecentStickers
  > = ToUnderscore<_RecentStickers, K>;
  export type _RecentStickers = {
    "messages.recentStickersNotModified": {}
    "messages.recentStickers": {
      hash: bigint;                           // long
      packs: global.StickerPack[];            // Vector<StickerPack>
      stickers: global.Document[];            // Vector<Document>
      dates: number[];                        // Vector<int>
    },
  };

  export const recentStickersNotModified: TLConstructorEmpty<"messages.recentStickersNotModified">;
  export const recentStickers: TLConstructor<_RecentStickers, "messages.recentStickers">;
  export type ArchivedStickers<
    K extends keyof _ArchivedStickers = keyof _ArchivedStickers
  > = ToUnderscore<_ArchivedStickers, K>;
  export type _ArchivedStickers = {
    "messages.archivedStickers": {
      count: number;                          // int
      sets: global.StickerSetCovered[];       // Vector<StickerSetCovered>
    },
  };

  export const archivedStickers: TLConstructor<_ArchivedStickers, "messages.archivedStickers">;
  export type StickerSetInstallResult<
    K extends keyof _StickerSetInstallResult = keyof _StickerSetInstallResult
  > = ToUnderscore<_StickerSetInstallResult, K>;
  export type _StickerSetInstallResult = {
    "messages.stickerSetInstallResultSuccess": {}
    "messages.stickerSetInstallResultArchive": {
      sets: global.StickerSetCovered[];       // Vector<StickerSetCovered>
    },
  };

  export const stickerSetInstallResultSuccess: TLConstructorEmpty<"messages.stickerSetInstallResultSuccess">;
  export const stickerSetInstallResultArchive: TLConstructor<_StickerSetInstallResult, "messages.stickerSetInstallResultArchive">;
  export type HighScores<
    K extends keyof _HighScores = keyof _HighScores
  > = ToUnderscore<_HighScores, K>;
  export type _HighScores = {
    "messages.highScores": {
      scores: global.HighScore[];             // Vector<HighScore>
      users: global.User[];                   // Vector<User>
    },
  };

  export const highScores: TLConstructor<_HighScores, "messages.highScores">;
  export type FavedStickers<
    K extends keyof _FavedStickers = keyof _FavedStickers
  > = ToUnderscore<_FavedStickers, K>;
  export type _FavedStickers = {
    "messages.favedStickersNotModified": {}
    "messages.favedStickers": {
      hash: bigint;                           // long
      packs: global.StickerPack[];            // Vector<StickerPack>
      stickers: global.Document[];            // Vector<Document>
    },
  };

  export const favedStickersNotModified: TLConstructorEmpty<"messages.favedStickersNotModified">;
  export const favedStickers: TLConstructor<_FavedStickers, "messages.favedStickers">;
  export type FoundStickerSets<
    K extends keyof _FoundStickerSets = keyof _FoundStickerSets
  > = ToUnderscore<_FoundStickerSets, K>;
  export type _FoundStickerSets = {
    "messages.foundStickerSetsNotModified": {}
    "messages.foundStickerSets": {
      hash: bigint;                           // long
      sets: global.StickerSetCovered[];       // Vector<StickerSetCovered>
    },
  };

  export const foundStickerSetsNotModified: TLConstructorEmpty<"messages.foundStickerSetsNotModified">;
  export const foundStickerSets: TLConstructor<_FoundStickerSets, "messages.foundStickerSets">;
  export type SearchCounter<
    K extends keyof _SearchCounter = keyof _SearchCounter
  > = ToUnderscore<_SearchCounter, K>;
  export type _SearchCounter = {
    "messages.searchCounter": {
      inexact?: true;                         // flags.1?true
      filter: global.MessagesFilter;          // MessagesFilter
      count: number;                          // int
    },
  };

  export const searchCounter: TLConstructor<_SearchCounter, "messages.searchCounter">;
  export type InactiveChats<
    K extends keyof _InactiveChats = keyof _InactiveChats
  > = ToUnderscore<_InactiveChats, K>;
  export type _InactiveChats = {
    "messages.inactiveChats": {
      dates: number[];                        // Vector<int>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const inactiveChats: TLConstructor<_InactiveChats, "messages.inactiveChats">;
  export type VotesList<
    K extends keyof _VotesList = keyof _VotesList
  > = ToUnderscore<_VotesList, K>;
  export type _VotesList = {
    "messages.votesList": {
      count: number;                          // int
      votes: global.MessageUserVote[];        // Vector<MessageUserVote>
      users: global.User[];                   // Vector<User>
      next_offset?: string;                   // flags.0?string
    },
  };

  export const votesList: TLConstructor<_VotesList, "messages.votesList">;
  export type MessageViews<
    K extends keyof _MessageViews = keyof _MessageViews
  > = ToUnderscore<_MessageViews, K>;
  export type _MessageViews = {
    "messages.messageViews": {
      views: global.MessageViews[];           // Vector<MessageViews>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const messageViews: TLConstructor<_MessageViews, "messages.messageViews">;
  export type DiscussionMessage<
    K extends keyof _DiscussionMessage = keyof _DiscussionMessage
  > = ToUnderscore<_DiscussionMessage, K>;
  export type _DiscussionMessage = {
    "messages.discussionMessage": {
      messages: global.Message[];             // Vector<Message>
      max_id?: number;                        // flags.0?int
      read_inbox_max_id?: number;             // flags.1?int
      read_outbox_max_id?: number;            // flags.2?int
      unread_count: number;                   // int
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const discussionMessage: TLConstructor<_DiscussionMessage, "messages.discussionMessage">;
  export type HistoryImport<
    K extends keyof _HistoryImport = keyof _HistoryImport
  > = ToUnderscore<_HistoryImport, K>;
  export type _HistoryImport = {
    "messages.historyImport": {
      id: bigint;                             // long
    },
  };

  export const historyImport: TLConstructor<_HistoryImport, "messages.historyImport">;
  export type HistoryImportParsed<
    K extends keyof _HistoryImportParsed = keyof _HistoryImportParsed
  > = ToUnderscore<_HistoryImportParsed, K>;
  export type _HistoryImportParsed = {
    "messages.historyImportParsed": {
      pm?: true;                              // flags.0?true
      group?: true;                           // flags.1?true
      title?: string;                         // flags.2?string
    },
  };

  export const historyImportParsed: TLConstructor<_HistoryImportParsed, "messages.historyImportParsed">;
  export type AffectedFoundMessages<
    K extends keyof _AffectedFoundMessages = keyof _AffectedFoundMessages
  > = ToUnderscore<_AffectedFoundMessages, K>;
  export type _AffectedFoundMessages = {
    "messages.affectedFoundMessages": {
      pts: number;                            // int
      pts_count: number;                      // int
      offset: number;                         // int
      messages: number[];                     // Vector<int>
    },
  };

  export const affectedFoundMessages: TLConstructor<_AffectedFoundMessages, "messages.affectedFoundMessages">;
  export type ExportedChatInvites<
    K extends keyof _ExportedChatInvites = keyof _ExportedChatInvites
  > = ToUnderscore<_ExportedChatInvites, K>;
  export type _ExportedChatInvites = {
    "messages.exportedChatInvites": {
      count: number;                          // int
      invites: global.ExportedChatInvite[];   // Vector<ExportedChatInvite>
      users: global.User[];                   // Vector<User>
    },
  };

  export const exportedChatInvites: TLConstructor<_ExportedChatInvites, "messages.exportedChatInvites">;
  export type ExportedChatInvite<
    K extends keyof _ExportedChatInvite = keyof _ExportedChatInvite
  > = ToUnderscore<_ExportedChatInvite, K>;
  export type _ExportedChatInvite = {
    "messages.exportedChatInvite": {
      invite: global.ExportedChatInvite;      // ExportedChatInvite
      users: global.User[];                   // Vector<User>
    },
    "messages.exportedChatInviteReplaced": {
      invite: global.ExportedChatInvite;      // ExportedChatInvite
      new_invite: global.ExportedChatInvite;  // ExportedChatInvite
      users: global.User[];                   // Vector<User>
    },
  };

  export const exportedChatInvite: TLConstructor<_ExportedChatInvite, "messages.exportedChatInvite">;
  export const exportedChatInviteReplaced: TLConstructor<_ExportedChatInvite, "messages.exportedChatInviteReplaced">;
  export type ChatInviteImporters<
    K extends keyof _ChatInviteImporters = keyof _ChatInviteImporters
  > = ToUnderscore<_ChatInviteImporters, K>;
  export type _ChatInviteImporters = {
    "messages.chatInviteImporters": {
      count: number;                          // int
      importers: global.ChatInviteImporter[]; // Vector<ChatInviteImporter>
      users: global.User[];                   // Vector<User>
    },
  };

  export const chatInviteImporters: TLConstructor<_ChatInviteImporters, "messages.chatInviteImporters">;
  export type ChatAdminsWithInvites<
    K extends keyof _ChatAdminsWithInvites = keyof _ChatAdminsWithInvites
  > = ToUnderscore<_ChatAdminsWithInvites, K>;
  export type _ChatAdminsWithInvites = {
    "messages.chatAdminsWithInvites": {
      admins: global.ChatAdminWithInvites[];  // Vector<ChatAdminWithInvites>
      users: global.User[];                   // Vector<User>
    },
  };

  export const chatAdminsWithInvites: TLConstructor<_ChatAdminsWithInvites, "messages.chatAdminsWithInvites">;
  export type CheckedHistoryImportPeer<
    K extends keyof _CheckedHistoryImportPeer = keyof _CheckedHistoryImportPeer
  > = ToUnderscore<_CheckedHistoryImportPeer, K>;
  export type _CheckedHistoryImportPeer = {
    "messages.checkedHistoryImportPeer": {
      confirm_text: string;                   // string
    },
  };

  export const checkedHistoryImportPeer: TLConstructor<_CheckedHistoryImportPeer, "messages.checkedHistoryImportPeer">;
  export type SponsoredMessages<
    K extends keyof _SponsoredMessages = keyof _SponsoredMessages
  > = ToUnderscore<_SponsoredMessages, K>;
  export type _SponsoredMessages = {
    "messages.sponsoredMessages": {
      messages: global.SponsoredMessage[];    // Vector<SponsoredMessage>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const sponsoredMessages: TLConstructor<_SponsoredMessages, "messages.sponsoredMessages">;
  export type SearchResultsCalendar<
    K extends keyof _SearchResultsCalendar = keyof _SearchResultsCalendar
  > = ToUnderscore<_SearchResultsCalendar, K>;
  export type _SearchResultsCalendar = {
    "messages.searchResultsCalendar": {
      inexact?: true;                         // flags.0?true
      count: number;                          // int
      min_date: number;                       // int
      min_msg_id: number;                     // int
      offset_id_offset?: number;              // flags.1?int
      periods: global.SearchResultsCalendarPeriod[]; // Vector<SearchResultsCalendarPeriod>
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const searchResultsCalendar: TLConstructor<_SearchResultsCalendar, "messages.searchResultsCalendar">;
  export type SearchResultsPositions<
    K extends keyof _SearchResultsPositions = keyof _SearchResultsPositions
  > = ToUnderscore<_SearchResultsPositions, K>;
  export type _SearchResultsPositions = {
    "messages.searchResultsPositions": {
      count: number;                          // int
      positions: global.SearchResultsPosition[]; // Vector<SearchResultsPosition>
    },
  };

  export const searchResultsPositions: TLConstructor<_SearchResultsPositions, "messages.searchResultsPositions">;
  export type PeerSettings<
    K extends keyof _PeerSettings = keyof _PeerSettings
  > = ToUnderscore<_PeerSettings, K>;
  export type _PeerSettings = {
    "messages.peerSettings": {
      settings: global.PeerSettings;          // PeerSettings
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const peerSettings: TLConstructor<_PeerSettings, "messages.peerSettings">;
  export type MessageReactionsList<
    K extends keyof _MessageReactionsList = keyof _MessageReactionsList
  > = ToUnderscore<_MessageReactionsList, K>;
  export type _MessageReactionsList = {
    "messages.messageReactionsList": {
      count: number;                          // int
      reactions: global.MessagePeerReaction[]; // Vector<MessagePeerReaction>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
      next_offset?: string;                   // flags.0?string
    },
  };

  export const messageReactionsList: TLConstructor<_MessageReactionsList, "messages.messageReactionsList">;
  export type AvailableReactions<
    K extends keyof _AvailableReactions = keyof _AvailableReactions
  > = ToUnderscore<_AvailableReactions, K>;
  export type _AvailableReactions = {
    "messages.availableReactionsNotModified": {}
    "messages.availableReactions": {
      hash: number;                           // int
      reactions: global.AvailableReaction[];  // Vector<AvailableReaction>
    },
  };

  export const availableReactionsNotModified: TLConstructorEmpty<"messages.availableReactionsNotModified">;
  export const availableReactions: TLConstructor<_AvailableReactions, "messages.availableReactions">;
  export type TranslatedText<
    K extends keyof _TranslatedText = keyof _TranslatedText
  > = ToUnderscore<_TranslatedText, K>;
  export type _TranslatedText = {
    "messages.translateNoResult": {}
    "messages.translateResultText": {
      text: string;                           // string
    },
  };

  export const translateNoResult: TLConstructorEmpty<"messages.translateNoResult">;
  export const translateResultText: TLConstructor<_TranslatedText, "messages.translateResultText">;
}

export namespace updates {
  export type State<
    K extends keyof _State = keyof _State
  > = ToUnderscore<_State, K>;
  export type _State = {
    "updates.state": {
      pts: number;                            // int
      qts: number;                            // int
      date: number;                           // int
      seq: number;                            // int
      unread_count: number;                   // int
    },
  };

  export const state: TLConstructor<_State, "updates.state">;
  export type Difference<
    K extends keyof _Difference = keyof _Difference
  > = ToUnderscore<_Difference, K>;
  export type _Difference = {
    "updates.differenceEmpty": {
      date: number;                           // int
      seq: number;                            // int
    },
    "updates.difference": {
      new_messages: global.Message[];         // Vector<Message>
      new_encrypted_messages: global.EncryptedMessage[]; // Vector<EncryptedMessage>
      other_updates: global.Update[];         // Vector<Update>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
      state: updates.State;                   // updates.State
    },
    "updates.differenceSlice": {
      new_messages: global.Message[];         // Vector<Message>
      new_encrypted_messages: global.EncryptedMessage[]; // Vector<EncryptedMessage>
      other_updates: global.Update[];         // Vector<Update>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
      intermediate_state: updates.State;      // updates.State
    },
    "updates.differenceTooLong": {
      pts: number;                            // int
    },
  };

  export const differenceEmpty: TLConstructor<_Difference, "updates.differenceEmpty">;
  export const difference: TLConstructor<_Difference, "updates.difference">;
  export const differenceSlice: TLConstructor<_Difference, "updates.differenceSlice">;
  export const differenceTooLong: TLConstructor<_Difference, "updates.differenceTooLong">;
  export type ChannelDifference<
    K extends keyof _ChannelDifference = keyof _ChannelDifference
  > = ToUnderscore<_ChannelDifference, K>;
  export type _ChannelDifference = {
    "updates.channelDifferenceEmpty": {
      final?: true;                           // flags.0?true
      pts: number;                            // int
      timeout?: number;                       // flags.1?int
    },
    "updates.channelDifferenceTooLong": {
      final?: true;                           // flags.0?true
      timeout?: number;                       // flags.1?int
      dialog: global.Dialog;                  // Dialog
      messages: global.Message[];             // Vector<Message>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "updates.channelDifference": {
      final?: true;                           // flags.0?true
      pts: number;                            // int
      timeout?: number;                       // flags.1?int
      new_messages: global.Message[];         // Vector<Message>
      other_updates: global.Update[];         // Vector<Update>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const channelDifferenceEmpty: TLConstructor<_ChannelDifference, "updates.channelDifferenceEmpty">;
  export const channelDifferenceTooLong: TLConstructor<_ChannelDifference, "updates.channelDifferenceTooLong">;
  export const channelDifference: TLConstructor<_ChannelDifference, "updates.channelDifference">;
}

export namespace photos {
  export type Photos<
    K extends keyof _Photos = keyof _Photos
  > = ToUnderscore<_Photos, K>;
  export type _Photos = {
    "photos.photos": {
      photos: global.Photo[];                 // Vector<Photo>
      users: global.User[];                   // Vector<User>
    },
    "photos.photosSlice": {
      count: number;                          // int
      photos: global.Photo[];                 // Vector<Photo>
      users: global.User[];                   // Vector<User>
    },
  };

  export const photos: TLConstructor<_Photos, "photos.photos">;
  export const photosSlice: TLConstructor<_Photos, "photos.photosSlice">;
  export type Photo<
    K extends keyof _Photo = keyof _Photo
  > = ToUnderscore<_Photo, K>;
  export type _Photo = {
    "photos.photo": {
      photo: global.Photo;                    // Photo
      users: global.User[];                   // Vector<User>
    },
  };

  export const photo: TLConstructor<_Photo, "photos.photo">;
}

export namespace upload {
  export type File<
    K extends keyof _File = keyof _File
  > = ToUnderscore<_File, K>;
  export type _File = {
    "upload.file": {
      type: storage.FileType;                 // storage.FileType
      mtime: number;                          // int
      bytes: BufferSource;                    // bytes
    },
    "upload.fileCdnRedirect": {
      dc_id: number;                          // int
      file_token: BufferSource;               // bytes
      encryption_key: BufferSource;           // bytes
      encryption_iv: BufferSource;            // bytes
      file_hashes: global.FileHash[];         // Vector<FileHash>
    },
  };

  export const file: TLConstructor<_File, "upload.file">;
  export const fileCdnRedirect: TLConstructor<_File, "upload.fileCdnRedirect">;
  export type WebFile<
    K extends keyof _WebFile = keyof _WebFile
  > = ToUnderscore<_WebFile, K>;
  export type _WebFile = {
    "upload.webFile": {
      size: number;                           // int
      mime_type: string;                      // string
      file_type: storage.FileType;            // storage.FileType
      mtime: number;                          // int
      bytes: BufferSource;                    // bytes
    },
  };

  export const webFile: TLConstructor<_WebFile, "upload.webFile">;
  export type CdnFile<
    K extends keyof _CdnFile = keyof _CdnFile
  > = ToUnderscore<_CdnFile, K>;
  export type _CdnFile = {
    "upload.cdnFileReuploadNeeded": {
      request_token: BufferSource;            // bytes
    },
    "upload.cdnFile": {
      bytes: BufferSource;                    // bytes
    },
  };

  export const cdnFileReuploadNeeded: TLConstructor<_CdnFile, "upload.cdnFileReuploadNeeded">;
  export const cdnFile: TLConstructor<_CdnFile, "upload.cdnFile">;
}

export namespace help {
  export type AppUpdate<
    K extends keyof _AppUpdate = keyof _AppUpdate
  > = ToUnderscore<_AppUpdate, K>;
  export type _AppUpdate = {
    "help.appUpdate": {
      can_not_skip?: true;                    // flags.0?true
      id: number;                             // int
      version: string;                        // string
      text: string;                           // string
      entities: global.MessageEntity[];       // Vector<MessageEntity>
      document?: global.Document;             // flags.1?Document
      url?: string;                           // flags.2?string
      sticker?: global.Document;              // flags.3?Document
    },
    "help.noAppUpdate": {}
  };

  export const appUpdate: TLConstructor<_AppUpdate, "help.appUpdate">;
  export const noAppUpdate: TLConstructorEmpty<"help.noAppUpdate">;
  export type InviteText<
    K extends keyof _InviteText = keyof _InviteText
  > = ToUnderscore<_InviteText, K>;
  export type _InviteText = {
    "help.inviteText": {
      message: string;                        // string
    },
  };

  export const inviteText: TLConstructor<_InviteText, "help.inviteText">;
  export type Support<
    K extends keyof _Support = keyof _Support
  > = ToUnderscore<_Support, K>;
  export type _Support = {
    "help.support": {
      phone_number: string;                   // string
      user: global.User;                      // User
    },
  };

  export const support: TLConstructor<_Support, "help.support">;
  export type TermsOfService<
    K extends keyof _TermsOfService = keyof _TermsOfService
  > = ToUnderscore<_TermsOfService, K>;
  export type _TermsOfService = {
    "help.termsOfService": {
      popup?: true;                           // flags.0?true
      id: global.DataJSON;                    // DataJSON
      text: string;                           // string
      entities: global.MessageEntity[];       // Vector<MessageEntity>
      min_age_confirm?: number;               // flags.1?int
    },
  };

  export const termsOfService: TLConstructor<_TermsOfService, "help.termsOfService">;
  export type RecentMeUrls<
    K extends keyof _RecentMeUrls = keyof _RecentMeUrls
  > = ToUnderscore<_RecentMeUrls, K>;
  export type _RecentMeUrls = {
    "help.recentMeUrls": {
      urls: global.RecentMeUrl[];             // Vector<RecentMeUrl>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const recentMeUrls: TLConstructor<_RecentMeUrls, "help.recentMeUrls">;
  export type TermsOfServiceUpdate<
    K extends keyof _TermsOfServiceUpdate = keyof _TermsOfServiceUpdate
  > = ToUnderscore<_TermsOfServiceUpdate, K>;
  export type _TermsOfServiceUpdate = {
    "help.termsOfServiceUpdateEmpty": {
      expires: number;                        // int
    },
    "help.termsOfServiceUpdate": {
      expires: number;                        // int
      terms_of_service: help.TermsOfService;  // help.TermsOfService
    },
  };

  export const termsOfServiceUpdateEmpty: TLConstructor<_TermsOfServiceUpdate, "help.termsOfServiceUpdateEmpty">;
  export const termsOfServiceUpdate: TLConstructor<_TermsOfServiceUpdate, "help.termsOfServiceUpdate">;
  export type DeepLinkInfo<
    K extends keyof _DeepLinkInfo = keyof _DeepLinkInfo
  > = ToUnderscore<_DeepLinkInfo, K>;
  export type _DeepLinkInfo = {
    "help.deepLinkInfoEmpty": {}
    "help.deepLinkInfo": {
      update_app?: true;                      // flags.0?true
      message: string;                        // string
      entities?: global.MessageEntity[];      // flags.1?Vector<MessageEntity>
    },
  };

  export const deepLinkInfoEmpty: TLConstructorEmpty<"help.deepLinkInfoEmpty">;
  export const deepLinkInfo: TLConstructor<_DeepLinkInfo, "help.deepLinkInfo">;
  export type PassportConfig<
    K extends keyof _PassportConfig = keyof _PassportConfig
  > = ToUnderscore<_PassportConfig, K>;
  export type _PassportConfig = {
    "help.passportConfigNotModified": {}
    "help.passportConfig": {
      hash: number;                           // int
      countries_langs: global.DataJSON;       // DataJSON
    },
  };

  export const passportConfigNotModified: TLConstructorEmpty<"help.passportConfigNotModified">;
  export const passportConfig: TLConstructor<_PassportConfig, "help.passportConfig">;
  export type SupportName<
    K extends keyof _SupportName = keyof _SupportName
  > = ToUnderscore<_SupportName, K>;
  export type _SupportName = {
    "help.supportName": {
      name: string;                           // string
    },
  };

  export const supportName: TLConstructor<_SupportName, "help.supportName">;
  export type UserInfo<
    K extends keyof _UserInfo = keyof _UserInfo
  > = ToUnderscore<_UserInfo, K>;
  export type _UserInfo = {
    "help.userInfoEmpty": {}
    "help.userInfo": {
      message: string;                        // string
      entities: global.MessageEntity[];       // Vector<MessageEntity>
      author: string;                         // string
      date: number;                           // int
    },
  };

  export const userInfoEmpty: TLConstructorEmpty<"help.userInfoEmpty">;
  export const userInfo: TLConstructor<_UserInfo, "help.userInfo">;
  export type PromoData<
    K extends keyof _PromoData = keyof _PromoData
  > = ToUnderscore<_PromoData, K>;
  export type _PromoData = {
    "help.promoDataEmpty": {
      expires: number;                        // int
    },
    "help.promoData": {
      proxy?: true;                           // flags.0?true
      expires: number;                        // int
      peer: global.Peer;                      // Peer
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
      psa_type?: string;                      // flags.1?string
      psa_message?: string;                   // flags.2?string
    },
  };

  export const promoDataEmpty: TLConstructor<_PromoData, "help.promoDataEmpty">;
  export const promoData: TLConstructor<_PromoData, "help.promoData">;
  export type CountryCode<
    K extends keyof _CountryCode = keyof _CountryCode
  > = ToUnderscore<_CountryCode, K>;
  export type _CountryCode = {
    "help.countryCode": {
      country_code: string;                   // string
      prefixes?: string[];                    // flags.0?Vector<string>
      patterns?: string[];                    // flags.1?Vector<string>
    },
  };

  export const countryCode: TLConstructor<_CountryCode, "help.countryCode">;
  export type Country<
    K extends keyof _Country = keyof _Country
  > = ToUnderscore<_Country, K>;
  export type _Country = {
    "help.country": {
      hidden?: true;                          // flags.0?true
      iso2: string;                           // string
      default_name: string;                   // string
      name?: string;                          // flags.1?string
      country_codes: help.CountryCode[];      // Vector<help.CountryCode>
    },
  };

  export const country: TLConstructor<_Country, "help.country">;
  export type CountriesList<
    K extends keyof _CountriesList = keyof _CountriesList
  > = ToUnderscore<_CountriesList, K>;
  export type _CountriesList = {
    "help.countriesListNotModified": {}
    "help.countriesList": {
      countries: help.Country[];              // Vector<help.Country>
      hash: number;                           // int
    },
  };

  export const countriesListNotModified: TLConstructorEmpty<"help.countriesListNotModified">;
  export const countriesList: TLConstructor<_CountriesList, "help.countriesList">;
}

export namespace account {
  export type PrivacyRules<
    K extends keyof _PrivacyRules = keyof _PrivacyRules
  > = ToUnderscore<_PrivacyRules, K>;
  export type _PrivacyRules = {
    "account.privacyRules": {
      rules: global.PrivacyRule[];            // Vector<PrivacyRule>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const privacyRules: TLConstructor<_PrivacyRules, "account.privacyRules">;
  export type Authorizations<
    K extends keyof _Authorizations = keyof _Authorizations
  > = ToUnderscore<_Authorizations, K>;
  export type _Authorizations = {
    "account.authorizations": {
      authorization_ttl_days: number;         // int
      authorizations: global.Authorization[]; // Vector<Authorization>
    },
  };

  export const authorizations: TLConstructor<_Authorizations, "account.authorizations">;
  export type Password<
    K extends keyof _Password = keyof _Password
  > = ToUnderscore<_Password, K>;
  export type _Password = {
    "account.password": {
      has_recovery?: true;                    // flags.0?true
      has_secure_values?: true;               // flags.1?true
      has_password?: true;                    // flags.2?true
      current_algo?: global.PasswordKdfAlgo;  // flags.2?PasswordKdfAlgo
      srp_B?: BufferSource;                   // flags.2?bytes
      srp_id?: bigint;                        // flags.2?long
      hint?: string;                          // flags.3?string
      email_unconfirmed_pattern?: string;     // flags.4?string
      new_algo: global.PasswordKdfAlgo;       // PasswordKdfAlgo
      new_secure_algo: global.SecurePasswordKdfAlgo; // SecurePasswordKdfAlgo
      secure_random: BufferSource;            // bytes
      pending_reset_date?: number;            // flags.5?int
    },
  };

  export const password: TLConstructor<_Password, "account.password">;
  export type PasswordSettings<
    K extends keyof _PasswordSettings = keyof _PasswordSettings
  > = ToUnderscore<_PasswordSettings, K>;
  export type _PasswordSettings = {
    "account.passwordSettings": {
      email?: string;                         // flags.0?string
      secure_settings?: global.SecureSecretSettings; // flags.1?SecureSecretSettings
    },
  };

  export const passwordSettings: TLConstructor<_PasswordSettings, "account.passwordSettings">;
  export type PasswordInputSettings<
    K extends keyof _PasswordInputSettings = keyof _PasswordInputSettings
  > = ToUnderscore<_PasswordInputSettings, K>;
  export type _PasswordInputSettings = {
    "account.passwordInputSettings": {
      new_algo?: global.PasswordKdfAlgo;      // flags.0?PasswordKdfAlgo
      new_password_hash?: BufferSource;       // flags.0?bytes
      hint?: string;                          // flags.0?string
      email?: string;                         // flags.1?string
      new_secure_settings?: global.SecureSecretSettings; // flags.2?SecureSecretSettings
    },
  };

  export const passwordInputSettings: TLConstructor<_PasswordInputSettings, "account.passwordInputSettings">;
  export type TmpPassword<
    K extends keyof _TmpPassword = keyof _TmpPassword
  > = ToUnderscore<_TmpPassword, K>;
  export type _TmpPassword = {
    "account.tmpPassword": {
      tmp_password: BufferSource;             // bytes
      valid_until: number;                    // int
    },
  };

  export const tmpPassword: TLConstructor<_TmpPassword, "account.tmpPassword">;
  export type WebAuthorizations<
    K extends keyof _WebAuthorizations = keyof _WebAuthorizations
  > = ToUnderscore<_WebAuthorizations, K>;
  export type _WebAuthorizations = {
    "account.webAuthorizations": {
      authorizations: global.WebAuthorization[]; // Vector<WebAuthorization>
      users: global.User[];                   // Vector<User>
    },
  };

  export const webAuthorizations: TLConstructor<_WebAuthorizations, "account.webAuthorizations">;
  export type AuthorizationForm<
    K extends keyof _AuthorizationForm = keyof _AuthorizationForm
  > = ToUnderscore<_AuthorizationForm, K>;
  export type _AuthorizationForm = {
    "account.authorizationForm": {
      required_types: global.SecureRequiredType[]; // Vector<SecureRequiredType>
      values: global.SecureValue[];           // Vector<SecureValue>
      errors: global.SecureValueError[];      // Vector<SecureValueError>
      users: global.User[];                   // Vector<User>
      privacy_policy_url?: string;            // flags.0?string
    },
  };

  export const authorizationForm: TLConstructor<_AuthorizationForm, "account.authorizationForm">;
  export type SentEmailCode<
    K extends keyof _SentEmailCode = keyof _SentEmailCode
  > = ToUnderscore<_SentEmailCode, K>;
  export type _SentEmailCode = {
    "account.sentEmailCode": {
      email_pattern: string;                  // string
      length: number;                         // int
    },
  };

  export const sentEmailCode: TLConstructor<_SentEmailCode, "account.sentEmailCode">;
  export type Takeout<
    K extends keyof _Takeout = keyof _Takeout
  > = ToUnderscore<_Takeout, K>;
  export type _Takeout = {
    "account.takeout": {
      id: bigint;                             // long
    },
  };

  export const takeout: TLConstructor<_Takeout, "account.takeout">;
  export type WallPapers<
    K extends keyof _WallPapers = keyof _WallPapers
  > = ToUnderscore<_WallPapers, K>;
  export type _WallPapers = {
    "account.wallPapersNotModified": {}
    "account.wallPapers": {
      hash: bigint;                           // long
      wallpapers: global.WallPaper[];         // Vector<WallPaper>
    },
  };

  export const wallPapersNotModified: TLConstructorEmpty<"account.wallPapersNotModified">;
  export const wallPapers: TLConstructor<_WallPapers, "account.wallPapers">;
  export type AutoDownloadSettings<
    K extends keyof _AutoDownloadSettings = keyof _AutoDownloadSettings
  > = ToUnderscore<_AutoDownloadSettings, K>;
  export type _AutoDownloadSettings = {
    "account.autoDownloadSettings": {
      low: global.AutoDownloadSettings;       // AutoDownloadSettings
      medium: global.AutoDownloadSettings;    // AutoDownloadSettings
      high: global.AutoDownloadSettings;      // AutoDownloadSettings
    },
  };

  export const autoDownloadSettings: TLConstructor<_AutoDownloadSettings, "account.autoDownloadSettings">;
  export type Themes<
    K extends keyof _Themes = keyof _Themes
  > = ToUnderscore<_Themes, K>;
  export type _Themes = {
    "account.themesNotModified": {}
    "account.themes": {
      hash: bigint;                           // long
      themes: global.Theme[];                 // Vector<Theme>
    },
  };

  export const themesNotModified: TLConstructorEmpty<"account.themesNotModified">;
  export const themes: TLConstructor<_Themes, "account.themes">;
  export type ContentSettings<
    K extends keyof _ContentSettings = keyof _ContentSettings
  > = ToUnderscore<_ContentSettings, K>;
  export type _ContentSettings = {
    "account.contentSettings": {
      sensitive_enabled?: true;               // flags.0?true
      sensitive_can_change?: true;            // flags.1?true
    },
  };

  export const contentSettings: TLConstructor<_ContentSettings, "account.contentSettings">;
  export type ResetPasswordResult<
    K extends keyof _ResetPasswordResult = keyof _ResetPasswordResult
  > = ToUnderscore<_ResetPasswordResult, K>;
  export type _ResetPasswordResult = {
    "account.resetPasswordFailedWait": {
      retry_date: number;                     // int
    },
    "account.resetPasswordRequestedWait": {
      until_date: number;                     // int
    },
    "account.resetPasswordOk": {}
  };

  export const resetPasswordFailedWait: TLConstructor<_ResetPasswordResult, "account.resetPasswordFailedWait">;
  export const resetPasswordRequestedWait: TLConstructor<_ResetPasswordResult, "account.resetPasswordRequestedWait">;
  export const resetPasswordOk: TLConstructorEmpty<"account.resetPasswordOk">;
}

export namespace channels {
  export type ChannelParticipants<
    K extends keyof _ChannelParticipants = keyof _ChannelParticipants
  > = ToUnderscore<_ChannelParticipants, K>;
  export type _ChannelParticipants = {
    "channels.channelParticipants": {
      count: number;                          // int
      participants: global.ChannelParticipant[]; // Vector<ChannelParticipant>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
    "channels.channelParticipantsNotModified": {}
  };

  export const channelParticipants: TLConstructor<_ChannelParticipants, "channels.channelParticipants">;
  export const channelParticipantsNotModified: TLConstructorEmpty<"channels.channelParticipantsNotModified">;
  export type ChannelParticipant<
    K extends keyof _ChannelParticipant = keyof _ChannelParticipant
  > = ToUnderscore<_ChannelParticipant, K>;
  export type _ChannelParticipant = {
    "channels.channelParticipant": {
      participant: global.ChannelParticipant; // ChannelParticipant
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const channelParticipant: TLConstructor<_ChannelParticipant, "channels.channelParticipant">;
  export type AdminLogResults<
    K extends keyof _AdminLogResults = keyof _AdminLogResults
  > = ToUnderscore<_AdminLogResults, K>;
  export type _AdminLogResults = {
    "channels.adminLogResults": {
      events: global.ChannelAdminLogEvent[];  // Vector<ChannelAdminLogEvent>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const adminLogResults: TLConstructor<_AdminLogResults, "channels.adminLogResults">;
  export type SendAsPeers<
    K extends keyof _SendAsPeers = keyof _SendAsPeers
  > = ToUnderscore<_SendAsPeers, K>;
  export type _SendAsPeers = {
    "channels.sendAsPeers": {
      peers: global.Peer[];                   // Vector<Peer>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const sendAsPeers: TLConstructor<_SendAsPeers, "channels.sendAsPeers">;
}

export namespace payments {
  export type PaymentForm<
    K extends keyof _PaymentForm = keyof _PaymentForm
  > = ToUnderscore<_PaymentForm, K>;
  export type _PaymentForm = {
    "payments.paymentForm": {
      can_save_credentials?: true;            // flags.2?true
      password_missing?: true;                // flags.3?true
      form_id: bigint;                        // long
      bot_id: bigint;                         // long
      invoice: global.Invoice;                // Invoice
      provider_id: bigint;                    // long
      url: string;                            // string
      native_provider?: string;               // flags.4?string
      native_params?: global.DataJSON;        // flags.4?DataJSON
      saved_info?: global.PaymentRequestedInfo; // flags.0?PaymentRequestedInfo
      saved_credentials?: global.PaymentSavedCredentials; // flags.1?PaymentSavedCredentials
      users: global.User[];                   // Vector<User>
    },
  };

  export const paymentForm: TLConstructor<_PaymentForm, "payments.paymentForm">;
  export type ValidatedRequestedInfo<
    K extends keyof _ValidatedRequestedInfo = keyof _ValidatedRequestedInfo
  > = ToUnderscore<_ValidatedRequestedInfo, K>;
  export type _ValidatedRequestedInfo = {
    "payments.validatedRequestedInfo": {
      id?: string;                            // flags.0?string
      shipping_options?: global.ShippingOption[]; // flags.1?Vector<ShippingOption>
    },
  };

  export const validatedRequestedInfo: TLConstructor<_ValidatedRequestedInfo, "payments.validatedRequestedInfo">;
  export type PaymentResult<
    K extends keyof _PaymentResult = keyof _PaymentResult
  > = ToUnderscore<_PaymentResult, K>;
  export type _PaymentResult = {
    "payments.paymentResult": {
      updates: global.Updates;                // Updates
    },
    "payments.paymentVerificationNeeded": {
      url: string;                            // string
    },
  };

  export const paymentResult: TLConstructor<_PaymentResult, "payments.paymentResult">;
  export const paymentVerificationNeeded: TLConstructor<_PaymentResult, "payments.paymentVerificationNeeded">;
  export type PaymentReceipt<
    K extends keyof _PaymentReceipt = keyof _PaymentReceipt
  > = ToUnderscore<_PaymentReceipt, K>;
  export type _PaymentReceipt = {
    "payments.paymentReceipt": {
      date: number;                           // int
      bot_id: bigint;                         // long
      provider_id: bigint;                    // long
      title: string;                          // string
      description: string;                    // string
      photo?: global.WebDocument;             // flags.2?WebDocument
      invoice: global.Invoice;                // Invoice
      info?: global.PaymentRequestedInfo;     // flags.0?PaymentRequestedInfo
      shipping?: global.ShippingOption;       // flags.1?ShippingOption
      tip_amount?: bigint;                    // flags.3?long
      currency: string;                       // string
      total_amount: bigint;                   // long
      credentials_title: string;              // string
      users: global.User[];                   // Vector<User>
    },
  };

  export const paymentReceipt: TLConstructor<_PaymentReceipt, "payments.paymentReceipt">;
  export type SavedInfo<
    K extends keyof _SavedInfo = keyof _SavedInfo
  > = ToUnderscore<_SavedInfo, K>;
  export type _SavedInfo = {
    "payments.savedInfo": {
      has_saved_credentials?: true;           // flags.1?true
      saved_info?: global.PaymentRequestedInfo; // flags.0?PaymentRequestedInfo
    },
  };

  export const savedInfo: TLConstructor<_SavedInfo, "payments.savedInfo">;
  export type BankCardData<
    K extends keyof _BankCardData = keyof _BankCardData
  > = ToUnderscore<_BankCardData, K>;
  export type _BankCardData = {
    "payments.bankCardData": {
      title: string;                          // string
      open_urls: global.BankCardOpenUrl[];    // Vector<BankCardOpenUrl>
    },
  };

  export const bankCardData: TLConstructor<_BankCardData, "payments.bankCardData">;
}

export namespace phone {
  export type PhoneCall<
    K extends keyof _PhoneCall = keyof _PhoneCall
  > = ToUnderscore<_PhoneCall, K>;
  export type _PhoneCall = {
    "phone.phoneCall": {
      phone_call: global.PhoneCall;           // PhoneCall
      users: global.User[];                   // Vector<User>
    },
  };

  export const phoneCall: TLConstructor<_PhoneCall, "phone.phoneCall">;
  export type GroupCall<
    K extends keyof _GroupCall = keyof _GroupCall
  > = ToUnderscore<_GroupCall, K>;
  export type _GroupCall = {
    "phone.groupCall": {
      call: global.GroupCall;                 // GroupCall
      participants: global.GroupCallParticipant[]; // Vector<GroupCallParticipant>
      participants_next_offset: string;       // string
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const groupCall: TLConstructor<_GroupCall, "phone.groupCall">;
  export type GroupParticipants<
    K extends keyof _GroupParticipants = keyof _GroupParticipants
  > = ToUnderscore<_GroupParticipants, K>;
  export type _GroupParticipants = {
    "phone.groupParticipants": {
      count: number;                          // int
      participants: global.GroupCallParticipant[]; // Vector<GroupCallParticipant>
      next_offset: string;                    // string
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
      version: number;                        // int
    },
  };

  export const groupParticipants: TLConstructor<_GroupParticipants, "phone.groupParticipants">;
  export type JoinAsPeers<
    K extends keyof _JoinAsPeers = keyof _JoinAsPeers
  > = ToUnderscore<_JoinAsPeers, K>;
  export type _JoinAsPeers = {
    "phone.joinAsPeers": {
      peers: global.Peer[];                   // Vector<Peer>
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const joinAsPeers: TLConstructor<_JoinAsPeers, "phone.joinAsPeers">;
  export type ExportedGroupCallInvite<
    K extends keyof _ExportedGroupCallInvite = keyof _ExportedGroupCallInvite
  > = ToUnderscore<_ExportedGroupCallInvite, K>;
  export type _ExportedGroupCallInvite = {
    "phone.exportedGroupCallInvite": {
      link: string;                           // string
    },
  };

  export const exportedGroupCallInvite: TLConstructor<_ExportedGroupCallInvite, "phone.exportedGroupCallInvite">;
  export type GroupCallStreamChannels<
    K extends keyof _GroupCallStreamChannels = keyof _GroupCallStreamChannels
  > = ToUnderscore<_GroupCallStreamChannels, K>;
  export type _GroupCallStreamChannels = {
    "phone.groupCallStreamChannels": {
      channels: global.GroupCallStreamChannel[]; // Vector<GroupCallStreamChannel>
    },
  };

  export const groupCallStreamChannels: TLConstructor<_GroupCallStreamChannels, "phone.groupCallStreamChannels">;
  export type GroupCallStreamRtmpUrl<
    K extends keyof _GroupCallStreamRtmpUrl = keyof _GroupCallStreamRtmpUrl
  > = ToUnderscore<_GroupCallStreamRtmpUrl, K>;
  export type _GroupCallStreamRtmpUrl = {
    "phone.groupCallStreamRtmpUrl": {
      url: string;                            // string
      key: string;                            // string
    },
  };

  export const groupCallStreamRtmpUrl: TLConstructor<_GroupCallStreamRtmpUrl, "phone.groupCallStreamRtmpUrl">;
}

export namespace stats {
  export type BroadcastStats<
    K extends keyof _BroadcastStats = keyof _BroadcastStats
  > = ToUnderscore<_BroadcastStats, K>;
  export type _BroadcastStats = {
    "stats.broadcastStats": {
      period: global.StatsDateRangeDays;      // StatsDateRangeDays
      followers: global.StatsAbsValueAndPrev; // StatsAbsValueAndPrev
      views_per_post: global.StatsAbsValueAndPrev; // StatsAbsValueAndPrev
      shares_per_post: global.StatsAbsValueAndPrev; // StatsAbsValueAndPrev
      enabled_notifications: global.StatsPercentValue; // StatsPercentValue
      growth_graph: global.StatsGraph;        // StatsGraph
      followers_graph: global.StatsGraph;     // StatsGraph
      mute_graph: global.StatsGraph;          // StatsGraph
      top_hours_graph: global.StatsGraph;     // StatsGraph
      interactions_graph: global.StatsGraph;  // StatsGraph
      iv_interactions_graph: global.StatsGraph; // StatsGraph
      views_by_source_graph: global.StatsGraph; // StatsGraph
      new_followers_by_source_graph: global.StatsGraph; // StatsGraph
      languages_graph: global.StatsGraph;     // StatsGraph
      recent_message_interactions: global.MessageInteractionCounters[]; // Vector<MessageInteractionCounters>
    },
  };

  export const broadcastStats: TLConstructor<_BroadcastStats, "stats.broadcastStats">;
  export type MegagroupStats<
    K extends keyof _MegagroupStats = keyof _MegagroupStats
  > = ToUnderscore<_MegagroupStats, K>;
  export type _MegagroupStats = {
    "stats.megagroupStats": {
      period: global.StatsDateRangeDays;      // StatsDateRangeDays
      members: global.StatsAbsValueAndPrev;   // StatsAbsValueAndPrev
      messages: global.StatsAbsValueAndPrev;  // StatsAbsValueAndPrev
      viewers: global.StatsAbsValueAndPrev;   // StatsAbsValueAndPrev
      posters: global.StatsAbsValueAndPrev;   // StatsAbsValueAndPrev
      growth_graph: global.StatsGraph;        // StatsGraph
      members_graph: global.StatsGraph;       // StatsGraph
      new_members_by_source_graph: global.StatsGraph; // StatsGraph
      languages_graph: global.StatsGraph;     // StatsGraph
      messages_graph: global.StatsGraph;      // StatsGraph
      actions_graph: global.StatsGraph;       // StatsGraph
      top_hours_graph: global.StatsGraph;     // StatsGraph
      weekdays_graph: global.StatsGraph;      // StatsGraph
      top_posters: global.StatsGroupTopPoster[]; // Vector<StatsGroupTopPoster>
      top_admins: global.StatsGroupTopAdmin[]; // Vector<StatsGroupTopAdmin>
      top_inviters: global.StatsGroupTopInviter[]; // Vector<StatsGroupTopInviter>
      users: global.User[];                   // Vector<User>
    },
  };

  export const megagroupStats: TLConstructor<_MegagroupStats, "stats.megagroupStats">;
  export type MessageStats<
    K extends keyof _MessageStats = keyof _MessageStats
  > = ToUnderscore<_MessageStats, K>;
  export type _MessageStats = {
    "stats.messageStats": {
      views_graph: global.StatsGraph;         // StatsGraph
    },
  };

  export const messageStats: TLConstructor<_MessageStats, "stats.messageStats">;
}

export namespace stickers {
  export type SuggestedShortName<
    K extends keyof _SuggestedShortName = keyof _SuggestedShortName
  > = ToUnderscore<_SuggestedShortName, K>;
  export type _SuggestedShortName = {
    "stickers.suggestedShortName": {
      short_name: string;                     // string
    },
  };

  export const suggestedShortName: TLConstructor<_SuggestedShortName, "stickers.suggestedShortName">;
}

export namespace users {
  export type UserFull<
    K extends keyof _UserFull = keyof _UserFull
  > = ToUnderscore<_UserFull, K>;
  export type _UserFull = {
    "users.userFull": {
      full_user: global.UserFull;             // UserFull
      chats: global.Chat[];                   // Vector<Chat>
      users: global.User[];                   // Vector<User>
    },
  };

  export const userFull: TLConstructor<_UserFull, "users.userFull">;
}

// #endregion "constructors"

export type AnyObject =
  | mt.ResPQ
  | mt.P_Q_inner_data
  | mt.P_Q_inner_d
  | mt.Server_DH_Params
  | mt.Server_DH_inner_data
  | mt.Client_DH_Inner_Data
  | mt.Set_client_DH_params_answer
  | mt.RpcResult
  | mt.RpcError
  | mt.RpcDropAnswer
  | mt.FutureSalt
  | mt.FutureSalts
  | mt.Pong
  | mt.NewSession
  | mt.MessageContainer
  | mt.Message
  | mt.MessageCopy
  | mt.Object
  | mt.MsgsAck
  | mt.BadMsgNotification
  | mt.MsgResendReq
  | mt.MsgsStateReq
  | mt.MsgsStateInfo
  | mt.MsgsAllInfo
  | mt.MsgDetailedInfo
  | mt.BindAuthKeyInner
  | mt.DestroyAuthKeyRes
  | mt.DestroySessionRes
  | global.InputPeer
  | global.InputUser
  | global.InputContact
  | global.InputFile
  | global.InputMedia
  | global.InputChatPhoto
  | global.InputGeoPoint
  | global.InputPhoto
  | global.InputFileLocation
  | global.Peer
  | storage.FileType
  | global.User
  | global.UserProfilePhoto
  | global.UserStatus
  | global.Chat
  | global.ChatFull
  | global.ChatParticipant
  | global.ChatParticipants
  | global.ChatPhoto
  | global.Message
  | global.MessageMedia
  | global.MessageAction
  | global.Dialog
  | global.Photo
  | global.PhotoSize
  | global.GeoPoint
  | auth.SentCode
  | auth.Authorization
  | auth.ExportedAuthorization
  | global.InputNotifyPeer
  | global.InputPeerNotifySettings
  | global.PeerNotifySettings
  | global.PeerSettings
  | global.WallPaper
  | global.ReportReason
  | global.UserFull
  | global.Contact
  | global.ImportedContact
  | global.ContactStatus
  | contacts.Contacts
  | contacts.ImportedContacts
  | contacts.Blocked
  | messages.Dialogs
  | messages.Messages
  | messages.Chats
  | messages.ChatFull
  | messages.AffectedHistory
  | global.MessagesFilter
  | global.Update
  | updates.State
  | updates.Difference
  | global.Updates
  | photos.Photos
  | photos.Photo
  | upload.File
  | global.DcOption
  | global.Config
  | global.NearestDc
  | help.AppUpdate
  | help.InviteText
  | global.EncryptedChat
  | global.InputEncryptedChat
  | global.EncryptedFile
  | global.InputEncryptedFile
  | global.EncryptedMessage
  | messages.DhConfig
  | messages.SentEncryptedMessage
  | global.InputDocument
  | global.Document
  | help.Support
  | global.NotifyPeer
  | global.SendMessageAction
  | contacts.Found
  | global.InputPrivacyKey
  | global.PrivacyKey
  | global.InputPrivacyRule
  | global.PrivacyRule
  | account.PrivacyRules
  | global.AccountDaysTTL
  | global.DocumentAttribute
  | messages.Stickers
  | global.StickerPack
  | messages.AllStickers
  | messages.AffectedMessages
  | global.WebPage
  | global.Authorization
  | account.Authorizations
  | account.Password
  | account.PasswordSettings
  | account.PasswordInputSettings
  | auth.PasswordRecovery
  | global.ReceivedNotifyMessage
  | global.ExportedChatInvite
  | global.ChatInvite
  | global.InputStickerSet
  | global.StickerSet
  | messages.StickerSet
  | global.BotCommand
  | global.BotInfo
  | global.KeyboardButton
  | global.KeyboardButtonRow
  | global.ReplyMarkup
  | global.MessageEntity
  | global.InputChannel
  | contacts.ResolvedPeer
  | global.MessageRange
  | updates.ChannelDifference
  | global.ChannelMessagesFilter
  | global.ChannelParticipant
  | global.ChannelParticipantsFilter
  | channels.ChannelParticipants
  | channels.ChannelParticipant
  | help.TermsOfService
  | messages.SavedGifs
  | global.InputBotInlineMessage
  | global.InputBotInlineResult
  | global.BotInlineMessage
  | global.BotInlineResult
  | messages.BotResults
  | global.ExportedMessageLink
  | global.MessageFwdHeader
  | auth.CodeType
  | auth.SentCodeType
  | messages.BotCallbackAnswer
  | messages.MessageEditData
  | global.InputBotInlineMessageID
  | global.InlineBotSwitchPM
  | messages.PeerDialogs
  | global.TopPeer
  | global.TopPeerCategory
  | global.TopPeerCategoryPeers
  | contacts.TopPeers
  | global.DraftMessage
  | messages.FeaturedStickers
  | messages.RecentStickers
  | messages.ArchivedStickers
  | messages.StickerSetInstallResult
  | global.StickerSetCovered
  | global.MaskCoords
  | global.InputStickeredMedia
  | global.Game
  | global.InputGame
  | global.HighScore
  | messages.HighScores
  | global.RichText
  | global.PageBlock
  | global.PhoneCallDiscardReason
  | global.DataJSON
  | global.LabeledPrice
  | global.Invoice
  | global.PaymentCharge
  | global.PostAddress
  | global.PaymentRequestedInfo
  | global.PaymentSavedCredentials
  | global.WebDocument
  | global.InputWebDocument
  | global.InputWebFileLocation
  | upload.WebFile
  | payments.PaymentForm
  | payments.ValidatedRequestedInfo
  | payments.PaymentResult
  | payments.PaymentReceipt
  | payments.SavedInfo
  | global.InputPaymentCredentials
  | account.TmpPassword
  | global.ShippingOption
  | global.InputStickerSetItem
  | global.InputPhoneCall
  | global.PhoneCall
  | global.PhoneConnection
  | global.PhoneCallProtocol
  | phone.PhoneCall
  | upload.CdnFile
  | global.CdnPublicKey
  | global.CdnConfig
  | global.LangPackString
  | global.LangPackDifference
  | global.LangPackLanguage
  | global.ChannelAdminLogEventAction
  | global.ChannelAdminLogEvent
  | channels.AdminLogResults
  | global.ChannelAdminLogEventsFilter
  | global.PopularContact
  | messages.FavedStickers
  | global.RecentMeUrl
  | help.RecentMeUrls
  | global.InputSingleMedia
  | global.WebAuthorization
  | account.WebAuthorizations
  | global.InputMessage
  | global.InputDialogPeer
  | global.DialogPeer
  | messages.FoundStickerSets
  | global.FileHash
  | global.InputClientProxy
  | help.TermsOfServiceUpdate
  | global.InputSecureFile
  | global.SecureFile
  | global.SecureData
  | global.SecurePlainData
  | global.SecureValueType
  | global.SecureValue
  | global.InputSecureValue
  | global.SecureValueHash
  | global.SecureValueError
  | global.SecureCredentialsEncrypted
  | account.AuthorizationForm
  | account.SentEmailCode
  | help.DeepLinkInfo
  | global.SavedContact
  | account.Takeout
  | global.PasswordKdfAlgo
  | global.SecurePasswordKdfAlgo
  | global.SecureSecretSettings
  | global.InputCheckPasswordSRP
  | global.SecureRequiredType
  | help.PassportConfig
  | global.InputAppEvent
  | global.JSONObjectValue
  | global.JSONValue
  | global.PageTableCell
  | global.PageTableRow
  | global.PageCaption
  | global.PageListItem
  | global.PageListOrderedItem
  | global.PageRelatedArticle
  | global.Page
  | help.SupportName
  | help.UserInfo
  | global.PollAnswer
  | global.Poll
  | global.PollAnswerVoters
  | global.PollResults
  | global.ChatOnlines
  | global.StatsURL
  | global.ChatAdminRights
  | global.ChatBannedRights
  | global.InputWallPaper
  | account.WallPapers
  | global.CodeSettings
  | global.WallPaperSettings
  | global.AutoDownloadSettings
  | account.AutoDownloadSettings
  | global.EmojiKeyword
  | global.EmojiKeywordsDifference
  | global.EmojiURL
  | global.EmojiLanguage
  | global.Folder
  | global.InputFolderPeer
  | global.FolderPeer
  | messages.SearchCounter
  | global.UrlAuthResult
  | global.ChannelLocation
  | global.PeerLocated
  | global.RestrictionReason
  | global.InputTheme
  | global.Theme
  | account.Themes
  | auth.LoginToken
  | account.ContentSettings
  | messages.InactiveChats
  | global.BaseTheme
  | global.InputThemeSettings
  | global.ThemeSettings
  | global.WebPageAttribute
  | global.MessageUserVote
  | messages.VotesList
  | global.BankCardOpenUrl
  | payments.BankCardData
  | global.DialogFilter
  | global.DialogFilterSuggested
  | global.StatsDateRangeDays
  | global.StatsAbsValueAndPrev
  | global.StatsPercentValue
  | global.StatsGraph
  | global.MessageInteractionCounters
  | stats.BroadcastStats
  | help.PromoData
  | global.VideoSize
  | global.StatsGroupTopPoster
  | global.StatsGroupTopAdmin
  | global.StatsGroupTopInviter
  | stats.MegagroupStats
  | global.GlobalPrivacySettings
  | help.CountryCode
  | help.Country
  | help.CountriesList
  | global.MessageViews
  | messages.MessageViews
  | messages.DiscussionMessage
  | global.MessageReplyHeader
  | global.MessageReplies
  | global.PeerBlocked
  | stats.MessageStats
  | global.GroupCall
  | global.InputGroupCall
  | global.GroupCallParticipant
  | phone.GroupCall
  | phone.GroupParticipants
  | global.InlineQueryPeerType
  | messages.HistoryImport
  | messages.HistoryImportParsed
  | messages.AffectedFoundMessages
  | global.ChatInviteImporter
  | messages.ExportedChatInvites
  | messages.ExportedChatInvite
  | messages.ChatInviteImporters
  | global.ChatAdminWithInvites
  | messages.ChatAdminsWithInvites
  | messages.CheckedHistoryImportPeer
  | phone.JoinAsPeers
  | phone.ExportedGroupCallInvite
  | global.GroupCallParticipantVideoSourceGroup
  | global.GroupCallParticipantVideo
  | stickers.SuggestedShortName
  | global.BotCommandScope
  | account.ResetPasswordResult
  | global.SponsoredMessage
  | messages.SponsoredMessages
  | global.SearchResultsCalendarPeriod
  | messages.SearchResultsCalendar
  | global.SearchResultsPosition
  | messages.SearchResultsPositions
  | channels.SendAsPeers
  | users.UserFull
  | messages.PeerSettings
  | auth.LoggedOut
  | global.ReactionCount
  | global.MessageReactions
  | messages.MessageReactionsList
  | global.AvailableReaction
  | messages.AvailableReactions
  | messages.TranslatedText
  | global.MessagePeerReaction
  | global.GroupCallStreamChannel
  | phone.GroupCallStreamChannels
  | phone.GroupCallStreamRtmpUrl;

export const $encoder: Record<string, (this: BaseSerializer, input: AnyObject) => void>;
export const $decoder: Map<number, (this: BaseDeserializer) => AnyObject>;
// #region "method"

export namespace mt {
  export const req_pq: TLMethod<{
    nonce: Uint8Array                       // int128
  }, ResPQ>
  export const req_pq_multi: TLMethod<{
    nonce: Uint8Array                       // int128
  }, ResPQ>
  export const req_DH_params: TLMethod<{
    nonce: Uint8Array                       // int128
    server_nonce: Uint8Array                // int128
    p: BufferSource                         // bytes
    q: BufferSource                         // bytes
    public_key_fingerprint: bigint          // long
    encrypted_data: BufferSource            // bytes
  }, Server_DH_Params>
  export const set_client_DH_params: TLMethod<{
    nonce: Uint8Array                       // int128
    server_nonce: Uint8Array                // int128
    encrypted_data: BufferSource            // bytes
  }, Set_client_DH_params_answer>
  export const rpc_drop_answer: TLMethod<{
    req_msg_id: bigint                      // long
  }, RpcDropAnswer>
  export const get_future_salts: TLMethod<{
    num: number                             // int
  }, FutureSalts>
  export const ping: TLMethod<{
    ping_id: bigint                         // long
  }, Pong>
  export const ping_delay_disconnect: TLMethod<{
    ping_id: bigint                         // long
    disconnect_delay: number                // int
  }, Pong>
  export const http_wait: TLMethod<{
    max_delay: number                       // int
    wait_after: number                      // int
    max_wait: number                        // int
  }, unknown>
  export const destroy_auth_key: TLMethod<void, DestroyAuthKeyRes>
  export const destroy_session: TLMethod<{
    session_id: bigint                      // long
  }, DestroySessionRes>
}

export const invokeAfterMsg: TLApiMethod<"invokeAfterMsg", {
  msg_id: bigint                          // long
  query: any                              // !X
}, any>
export const invokeAfterMsgs: TLApiMethod<"invokeAfterMsgs", {
  msg_ids: bigint[]                       // Vector<long>
  query: any                              // !X
}, any>
export const initConnection: TLApiMethod<"initConnection", {
  api_id: number                          // int
  device_model: string                    // string
  system_version: string                  // string
  app_version: string                     // string
  system_lang_code: string                // string
  lang_pack: string                       // string
  lang_code: string                       // string
  proxy?: global.InputClientProxy         // flags.0?InputClientProxy
  params?: global.JSONValue               // flags.1?JSONValue
  query: any                              // !X
}, any>
export const invokeWithLayer: TLApiMethod<"invokeWithLayer", {
  layer: number                           // int
  query: any                              // !X
}, any>
export const invokeWithoutUpdates: TLApiMethod<"invokeWithoutUpdates", {
  query: any                              // !X
}, any>
export const invokeWithMessagesRange: TLApiMethod<"invokeWithMessagesRange", {
  range: global.MessageRange              // MessageRange
  query: any                              // !X
}, any>
export const invokeWithTakeout: TLApiMethod<"invokeWithTakeout", {
  takeout_id: bigint                      // long
  query: any                              // !X
}, any>

export namespace auth {
  export const sendCode: TLApiMethod<"auth.sendCode", {
    phone_number: string                    // string
    api_id: number                          // int
    api_hash: string                        // string
    settings: global.CodeSettings           // CodeSettings
  }, SentCode>
  export const signUp: TLApiMethod<"auth.signUp", {
    phone_number: string                    // string
    phone_code_hash: string                 // string
    first_name: string                      // string
    last_name: string                       // string
  }, Authorization>
  export const signIn: TLApiMethod<"auth.signIn", {
    phone_number: string                    // string
    phone_code_hash: string                 // string
    phone_code: string                      // string
  }, Authorization>
  export const logOut: TLApiMethod<"auth.logOut", void, LoggedOut>
  export const resetAuthorizations: TLApiMethod<"auth.resetAuthorizations", void, boolean>
  export const exportAuthorization: TLApiMethod<"auth.exportAuthorization", {
    dc_id: number                           // int
  }, ExportedAuthorization>
  export const importAuthorization: TLApiMethod<"auth.importAuthorization", {
    id: bigint                              // long
    bytes: BufferSource                     // bytes
  }, Authorization>
  export const bindTempAuthKey: TLApiMethod<"auth.bindTempAuthKey", {
    perm_auth_key_id: bigint                // long
    nonce: bigint                           // long
    expires_at: number                      // int
    encrypted_message: BufferSource         // bytes
  }, boolean>
  export const importBotAuthorization: TLApiMethod<"auth.importBotAuthorization", {
    flags: number                           // int
    api_id: number                          // int
    api_hash: string                        // string
    bot_auth_token: string                  // string
  }, Authorization>
  export const checkPassword: TLApiMethod<"auth.checkPassword", {
    password: global.InputCheckPasswordSRP  // InputCheckPasswordSRP
  }, Authorization>
  export const requestPasswordRecovery: TLApiMethod<"auth.requestPasswordRecovery", void, PasswordRecovery>
  export const recoverPassword: TLApiMethod<"auth.recoverPassword", {
    code: string                            // string
    new_settings?: account.PasswordInputSettings // flags.0?account.PasswordInputSettings
  }, Authorization>
  export const resendCode: TLApiMethod<"auth.resendCode", {
    phone_number: string                    // string
    phone_code_hash: string                 // string
  }, SentCode>
  export const cancelCode: TLApiMethod<"auth.cancelCode", {
    phone_number: string                    // string
    phone_code_hash: string                 // string
  }, boolean>
  export const dropTempAuthKeys: TLApiMethod<"auth.dropTempAuthKeys", {
    except_auth_keys: bigint[]              // Vector<long>
  }, boolean>
  export const exportLoginToken: TLApiMethod<"auth.exportLoginToken", {
    api_id: number                          // int
    api_hash: string                        // string
    except_ids: bigint[]                    // Vector<long>
  }, LoginToken>
  export const importLoginToken: TLApiMethod<"auth.importLoginToken", {
    token: BufferSource                     // bytes
  }, LoginToken>
  export const acceptLoginToken: TLApiMethod<"auth.acceptLoginToken", {
    token: BufferSource                     // bytes
  }, global.Authorization>
  export const checkRecoveryPassword: TLApiMethod<"auth.checkRecoveryPassword", {
    code: string                            // string
  }, boolean>
}

export namespace account {
  export const registerDevice: TLApiMethod<"account.registerDevice", {
    no_muted?: true                         // flags.0?true
    token_type: number                      // int
    token: string                           // string
    app_sandbox: boolean                    // Bool
    secret: BufferSource                    // bytes
    other_uids: bigint[]                    // Vector<long>
  }, boolean>
  export const unregisterDevice: TLApiMethod<"account.unregisterDevice", {
    token_type: number                      // int
    token: string                           // string
    other_uids: bigint[]                    // Vector<long>
  }, boolean>
  export const updateNotifySettings: TLApiMethod<"account.updateNotifySettings", {
    peer: global.InputNotifyPeer            // InputNotifyPeer
    settings: global.InputPeerNotifySettings // InputPeerNotifySettings
  }, boolean>
  export const getNotifySettings: TLApiMethod<"account.getNotifySettings", {
    peer: global.InputNotifyPeer            // InputNotifyPeer
  }, global.PeerNotifySettings>
  export const resetNotifySettings: TLApiMethod<"account.resetNotifySettings", void, boolean>
  export const updateProfile: TLApiMethod<"account.updateProfile", {
    first_name?: string                     // flags.0?string
    last_name?: string                      // flags.1?string
    about?: string                          // flags.2?string
  }, global.User>
  export const updateStatus: TLApiMethod<"account.updateStatus", {
    offline: boolean                        // Bool
  }, boolean>
  export const getWallPapers: TLApiMethod<"account.getWallPapers", {
    hash: bigint                            // long
  }, WallPapers>
  export const reportPeer: TLApiMethod<"account.reportPeer", {
    peer: global.InputPeer                  // InputPeer
    reason: global.ReportReason             // ReportReason
    message: string                         // string
  }, boolean>
  export const checkUsername: TLApiMethod<"account.checkUsername", {
    username: string                        // string
  }, boolean>
  export const updateUsername: TLApiMethod<"account.updateUsername", {
    username: string                        // string
  }, global.User>
  export const getPrivacy: TLApiMethod<"account.getPrivacy", {
    key: global.InputPrivacyKey             // InputPrivacyKey
  }, PrivacyRules>
  export const setPrivacy: TLApiMethod<"account.setPrivacy", {
    key: global.InputPrivacyKey             // InputPrivacyKey
    rules: global.InputPrivacyRule[]        // Vector<InputPrivacyRule>
  }, PrivacyRules>
  export const deleteAccount: TLApiMethod<"account.deleteAccount", {
    reason: string                          // string
  }, boolean>
  export const getAccountTTL: TLApiMethod<"account.getAccountTTL", void, global.AccountDaysTTL>
  export const setAccountTTL: TLApiMethod<"account.setAccountTTL", {
    ttl: global.AccountDaysTTL              // AccountDaysTTL
  }, boolean>
  export const sendChangePhoneCode: TLApiMethod<"account.sendChangePhoneCode", {
    phone_number: string                    // string
    settings: global.CodeSettings           // CodeSettings
  }, auth.SentCode>
  export const changePhone: TLApiMethod<"account.changePhone", {
    phone_number: string                    // string
    phone_code_hash: string                 // string
    phone_code: string                      // string
  }, global.User>
  export const updateDeviceLocked: TLApiMethod<"account.updateDeviceLocked", {
    period: number                          // int
  }, boolean>
  export const getAuthorizations: TLApiMethod<"account.getAuthorizations", void, Authorizations>
  export const resetAuthorization: TLApiMethod<"account.resetAuthorization", {
    hash: bigint                            // long
  }, boolean>
  export const getPassword: TLApiMethod<"account.getPassword", void, Password>
  export const getPasswordSettings: TLApiMethod<"account.getPasswordSettings", {
    password: global.InputCheckPasswordSRP  // InputCheckPasswordSRP
  }, PasswordSettings>
  export const updatePasswordSettings: TLApiMethod<"account.updatePasswordSettings", {
    password: global.InputCheckPasswordSRP  // InputCheckPasswordSRP
    new_settings: account.PasswordInputSettings // account.PasswordInputSettings
  }, boolean>
  export const sendConfirmPhoneCode: TLApiMethod<"account.sendConfirmPhoneCode", {
    hash: string                            // string
    settings: global.CodeSettings           // CodeSettings
  }, auth.SentCode>
  export const confirmPhone: TLApiMethod<"account.confirmPhone", {
    phone_code_hash: string                 // string
    phone_code: string                      // string
  }, boolean>
  export const getTmpPassword: TLApiMethod<"account.getTmpPassword", {
    password: global.InputCheckPasswordSRP  // InputCheckPasswordSRP
    period: number                          // int
  }, TmpPassword>
  export const getWebAuthorizations: TLApiMethod<"account.getWebAuthorizations", void, WebAuthorizations>
  export const resetWebAuthorization: TLApiMethod<"account.resetWebAuthorization", {
    hash: bigint                            // long
  }, boolean>
  export const resetWebAuthorizations: TLApiMethod<"account.resetWebAuthorizations", void, boolean>
  export const getAllSecureValues: TLApiMethod<"account.getAllSecureValues", void, global.SecureValue[]>
  export const getSecureValue: TLApiMethod<"account.getSecureValue", {
    types: global.SecureValueType[]         // Vector<SecureValueType>
  }, global.SecureValue[]>
  export const saveSecureValue: TLApiMethod<"account.saveSecureValue", {
    value: global.InputSecureValue          // InputSecureValue
    secure_secret_id: bigint                // long
  }, global.SecureValue>
  export const deleteSecureValue: TLApiMethod<"account.deleteSecureValue", {
    types: global.SecureValueType[]         // Vector<SecureValueType>
  }, boolean>
  export const getAuthorizationForm: TLApiMethod<"account.getAuthorizationForm", {
    bot_id: bigint                          // long
    scope: string                           // string
    public_key: string                      // string
  }, AuthorizationForm>
  export const acceptAuthorization: TLApiMethod<"account.acceptAuthorization", {
    bot_id: bigint                          // long
    scope: string                           // string
    public_key: string                      // string
    value_hashes: global.SecureValueHash[]  // Vector<SecureValueHash>
    credentials: global.SecureCredentialsEncrypted // SecureCredentialsEncrypted
  }, boolean>
  export const sendVerifyPhoneCode: TLApiMethod<"account.sendVerifyPhoneCode", {
    phone_number: string                    // string
    settings: global.CodeSettings           // CodeSettings
  }, auth.SentCode>
  export const verifyPhone: TLApiMethod<"account.verifyPhone", {
    phone_number: string                    // string
    phone_code_hash: string                 // string
    phone_code: string                      // string
  }, boolean>
  export const sendVerifyEmailCode: TLApiMethod<"account.sendVerifyEmailCode", {
    email: string                           // string
  }, SentEmailCode>
  export const verifyEmail: TLApiMethod<"account.verifyEmail", {
    email: string                           // string
    code: string                            // string
  }, boolean>
  export const initTakeoutSession: TLApiMethod<"account.initTakeoutSession", {
    contacts?: true                         // flags.0?true
    message_users?: true                    // flags.1?true
    message_chats?: true                    // flags.2?true
    message_megagroups?: true               // flags.3?true
    message_channels?: true                 // flags.4?true
    files?: true                            // flags.5?true
    file_max_size?: number                  // flags.5?int
  }, Takeout>
  export const finishTakeoutSession: TLApiMethod<"account.finishTakeoutSession", {
    success?: true                          // flags.0?true
  }, boolean>
  export const confirmPasswordEmail: TLApiMethod<"account.confirmPasswordEmail", {
    code: string                            // string
  }, boolean>
  export const resendPasswordEmail: TLApiMethod<"account.resendPasswordEmail", void, boolean>
  export const cancelPasswordEmail: TLApiMethod<"account.cancelPasswordEmail", void, boolean>
  export const getContactSignUpNotification: TLApiMethod<"account.getContactSignUpNotification", void, boolean>
  export const setContactSignUpNotification: TLApiMethod<"account.setContactSignUpNotification", {
    silent: boolean                         // Bool
  }, boolean>
  export const getNotifyExceptions: TLApiMethod<"account.getNotifyExceptions", {
    compare_sound?: true                    // flags.1?true
    peer?: global.InputNotifyPeer           // flags.0?InputNotifyPeer
  }, global.Updates>
  export const getWallPaper: TLApiMethod<"account.getWallPaper", {
    wallpaper: global.InputWallPaper        // InputWallPaper
  }, global.WallPaper>
  export const uploadWallPaper: TLApiMethod<"account.uploadWallPaper", {
    file: global.InputFile                  // InputFile
    mime_type: string                       // string
    settings: global.WallPaperSettings      // WallPaperSettings
  }, global.WallPaper>
  export const saveWallPaper: TLApiMethod<"account.saveWallPaper", {
    wallpaper: global.InputWallPaper        // InputWallPaper
    unsave: boolean                         // Bool
    settings: global.WallPaperSettings      // WallPaperSettings
  }, boolean>
  export const installWallPaper: TLApiMethod<"account.installWallPaper", {
    wallpaper: global.InputWallPaper        // InputWallPaper
    settings: global.WallPaperSettings      // WallPaperSettings
  }, boolean>
  export const resetWallPapers: TLApiMethod<"account.resetWallPapers", void, boolean>
  export const getAutoDownloadSettings: TLApiMethod<"account.getAutoDownloadSettings", void, AutoDownloadSettings>
  export const saveAutoDownloadSettings: TLApiMethod<"account.saveAutoDownloadSettings", {
    low?: true                              // flags.0?true
    high?: true                             // flags.1?true
    settings: global.AutoDownloadSettings   // AutoDownloadSettings
  }, boolean>
  export const uploadTheme: TLApiMethod<"account.uploadTheme", {
    file: global.InputFile                  // InputFile
    thumb?: global.InputFile                // flags.0?InputFile
    file_name: string                       // string
    mime_type: string                       // string
  }, global.Document>
  export const createTheme: TLApiMethod<"account.createTheme", {
    slug: string                            // string
    title: string                           // string
    document?: global.InputDocument         // flags.2?InputDocument
    settings?: global.InputThemeSettings[]  // flags.3?Vector<InputThemeSettings>
  }, global.Theme>
  export const updateTheme: TLApiMethod<"account.updateTheme", {
    format: string                          // string
    theme: global.InputTheme                // InputTheme
    slug?: string                           // flags.0?string
    title?: string                          // flags.1?string
    document?: global.InputDocument         // flags.2?InputDocument
    settings?: global.InputThemeSettings[]  // flags.3?Vector<InputThemeSettings>
  }, global.Theme>
  export const saveTheme: TLApiMethod<"account.saveTheme", {
    theme: global.InputTheme                // InputTheme
    unsave: boolean                         // Bool
  }, boolean>
  export const installTheme: TLApiMethod<"account.installTheme", {
    dark?: true                             // flags.0?true
    theme?: global.InputTheme               // flags.1?InputTheme
    format?: string                         // flags.2?string
    base_theme?: global.BaseTheme           // flags.3?BaseTheme
  }, boolean>
  export const getTheme: TLApiMethod<"account.getTheme", {
    format: string                          // string
    theme: global.InputTheme                // InputTheme
    document_id: bigint                     // long
  }, global.Theme>
  export const getThemes: TLApiMethod<"account.getThemes", {
    format: string                          // string
    hash: bigint                            // long
  }, Themes>
  export const setContentSettings: TLApiMethod<"account.setContentSettings", {
    sensitive_enabled?: true                // flags.0?true
  }, boolean>
  export const getContentSettings: TLApiMethod<"account.getContentSettings", void, ContentSettings>
  export const getMultiWallPapers: TLApiMethod<"account.getMultiWallPapers", {
    wallpapers: global.InputWallPaper[]     // Vector<InputWallPaper>
  }, global.WallPaper[]>
  export const getGlobalPrivacySettings: TLApiMethod<"account.getGlobalPrivacySettings", void, global.GlobalPrivacySettings>
  export const setGlobalPrivacySettings: TLApiMethod<"account.setGlobalPrivacySettings", {
    settings: global.GlobalPrivacySettings  // GlobalPrivacySettings
  }, global.GlobalPrivacySettings>
  export const reportProfilePhoto: TLApiMethod<"account.reportProfilePhoto", {
    peer: global.InputPeer                  // InputPeer
    photo_id: global.InputPhoto             // InputPhoto
    reason: global.ReportReason             // ReportReason
    message: string                         // string
  }, boolean>
  export const resetPassword: TLApiMethod<"account.resetPassword", void, ResetPasswordResult>
  export const declinePasswordReset: TLApiMethod<"account.declinePasswordReset", void, boolean>
  export const getChatThemes: TLApiMethod<"account.getChatThemes", {
    hash: bigint                            // long
  }, Themes>
  export const setAuthorizationTTL: TLApiMethod<"account.setAuthorizationTTL", {
    authorization_ttl_days: number          // int
  }, boolean>
  export const changeAuthorizationSettings: TLApiMethod<"account.changeAuthorizationSettings", {
    hash: bigint                            // long
    encrypted_requests_disabled?: boolean   // flags.0?Bool
    call_requests_disabled?: boolean        // flags.1?Bool
  }, boolean>
}

export namespace users {
  export const getUsers: TLApiMethod<"users.getUsers", {
    id: global.InputUser[]                  // Vector<InputUser>
  }, global.User[]>
  export const getFullUser: TLApiMethod<"users.getFullUser", {
    id: global.InputUser                    // InputUser
  }, UserFull>
  export const setSecureValueErrors: TLApiMethod<"users.setSecureValueErrors", {
    id: global.InputUser                    // InputUser
    errors: global.SecureValueError[]       // Vector<SecureValueError>
  }, boolean>
}

export namespace contacts {
  export const getContactIDs: TLApiMethod<"contacts.getContactIDs", {
    hash: bigint                            // long
  }, number[]>
  export const getStatuses: TLApiMethod<"contacts.getStatuses", void, global.ContactStatus[]>
  export const getContacts: TLApiMethod<"contacts.getContacts", {
    hash: bigint                            // long
  }, Contacts>
  export const importContacts: TLApiMethod<"contacts.importContacts", {
    contacts: global.InputContact[]         // Vector<InputContact>
  }, ImportedContacts>
  export const deleteContacts: TLApiMethod<"contacts.deleteContacts", {
    id: global.InputUser[]                  // Vector<InputUser>
  }, global.Updates>
  export const deleteByPhones: TLApiMethod<"contacts.deleteByPhones", {
    phones: string[]                        // Vector<string>
  }, boolean>
  export const block: TLApiMethod<"contacts.block", {
    id: global.InputPeer                    // InputPeer
  }, boolean>
  export const unblock: TLApiMethod<"contacts.unblock", {
    id: global.InputPeer                    // InputPeer
  }, boolean>
  export const getBlocked: TLApiMethod<"contacts.getBlocked", {
    offset: number                          // int
    limit: number                           // int
  }, Blocked>
  export const search: TLApiMethod<"contacts.search", {
    q: string                               // string
    limit: number                           // int
  }, Found>
  export const resolveUsername: TLApiMethod<"contacts.resolveUsername", {
    username: string                        // string
  }, ResolvedPeer>
  export const getTopPeers: TLApiMethod<"contacts.getTopPeers", {
    correspondents?: true                   // flags.0?true
    bots_pm?: true                          // flags.1?true
    bots_inline?: true                      // flags.2?true
    phone_calls?: true                      // flags.3?true
    forward_users?: true                    // flags.4?true
    forward_chats?: true                    // flags.5?true
    groups?: true                           // flags.10?true
    channels?: true                         // flags.15?true
    offset: number                          // int
    limit: number                           // int
    hash: bigint                            // long
  }, TopPeers>
  export const resetTopPeerRating: TLApiMethod<"contacts.resetTopPeerRating", {
    category: global.TopPeerCategory        // TopPeerCategory
    peer: global.InputPeer                  // InputPeer
  }, boolean>
  export const resetSaved: TLApiMethod<"contacts.resetSaved", void, boolean>
  export const getSaved: TLApiMethod<"contacts.getSaved", void, global.SavedContact[]>
  export const toggleTopPeers: TLApiMethod<"contacts.toggleTopPeers", {
    enabled: boolean                        // Bool
  }, boolean>
  export const addContact: TLApiMethod<"contacts.addContact", {
    add_phone_privacy_exception?: true      // flags.0?true
    id: global.InputUser                    // InputUser
    first_name: string                      // string
    last_name: string                       // string
    phone: string                           // string
  }, global.Updates>
  export const acceptContact: TLApiMethod<"contacts.acceptContact", {
    id: global.InputUser                    // InputUser
  }, global.Updates>
  export const getLocated: TLApiMethod<"contacts.getLocated", {
    background?: true                       // flags.1?true
    geo_point: global.InputGeoPoint         // InputGeoPoint
    self_expires?: number                   // flags.0?int
  }, global.Updates>
  export const blockFromReplies: TLApiMethod<"contacts.blockFromReplies", {
    delete_message?: true                   // flags.0?true
    delete_history?: true                   // flags.1?true
    report_spam?: true                      // flags.2?true
    msg_id: number                          // int
  }, global.Updates>
  export const resolvePhone: TLApiMethod<"contacts.resolvePhone", {
    phone: string                           // string
  }, ResolvedPeer>
}

export namespace messages {
  export const getMessages: TLApiMethod<"messages.getMessages", {
    id: global.InputMessage[]               // Vector<InputMessage>
  }, Messages>
  export const getDialogs: TLApiMethod<"messages.getDialogs", {
    exclude_pinned?: true                   // flags.0?true
    folder_id?: number                      // flags.1?int
    offset_date: number                     // int
    offset_id: number                       // int
    offset_peer: global.InputPeer           // InputPeer
    limit: number                           // int
    hash: bigint                            // long
  }, Dialogs>
  export const getHistory: TLApiMethod<"messages.getHistory", {
    peer: global.InputPeer                  // InputPeer
    offset_id: number                       // int
    offset_date: number                     // int
    add_offset: number                      // int
    limit: number                           // int
    max_id: number                          // int
    min_id: number                          // int
    hash: bigint                            // long
  }, Messages>
  export const search: TLApiMethod<"messages.search", {
    peer: global.InputPeer                  // InputPeer
    q: string                               // string
    from_id?: global.InputPeer              // flags.0?InputPeer
    top_msg_id?: number                     // flags.1?int
    filter: global.MessagesFilter           // MessagesFilter
    min_date: number                        // int
    max_date: number                        // int
    offset_id: number                       // int
    add_offset: number                      // int
    limit: number                           // int
    max_id: number                          // int
    min_id: number                          // int
    hash: bigint                            // long
  }, Messages>
  export const readHistory: TLApiMethod<"messages.readHistory", {
    peer: global.InputPeer                  // InputPeer
    max_id: number                          // int
  }, AffectedMessages>
  export const deleteHistory: TLApiMethod<"messages.deleteHistory", {
    just_clear?: true                       // flags.0?true
    revoke?: true                           // flags.1?true
    peer: global.InputPeer                  // InputPeer
    max_id: number                          // int
    min_date?: number                       // flags.2?int
    max_date?: number                       // flags.3?int
  }, AffectedHistory>
  export const deleteMessages: TLApiMethod<"messages.deleteMessages", {
    revoke?: true                           // flags.0?true
    id: number[]                            // Vector<int>
  }, AffectedMessages>
  export const receivedMessages: TLApiMethod<"messages.receivedMessages", {
    max_id: number                          // int
  }, global.ReceivedNotifyMessage[]>
  export const setTyping: TLApiMethod<"messages.setTyping", {
    peer: global.InputPeer                  // InputPeer
    top_msg_id?: number                     // flags.0?int
    action: global.SendMessageAction        // SendMessageAction
  }, boolean>
  export const sendMessage: TLApiMethod<"messages.sendMessage", {
    no_webpage?: true                       // flags.1?true
    silent?: true                           // flags.5?true
    background?: true                       // flags.6?true
    clear_draft?: true                      // flags.7?true
    noforwards?: true                       // flags.14?true
    peer: global.InputPeer                  // InputPeer
    reply_to_msg_id?: number                // flags.0?int
    message: string                         // string
    random_id: bigint                       // long
    reply_markup?: global.ReplyMarkup       // flags.2?ReplyMarkup
    entities?: global.MessageEntity[]       // flags.3?Vector<MessageEntity>
    schedule_date?: number                  // flags.10?int
    send_as?: global.InputPeer              // flags.13?InputPeer
  }, global.Updates>
  export const sendMedia: TLApiMethod<"messages.sendMedia", {
    silent?: true                           // flags.5?true
    background?: true                       // flags.6?true
    clear_draft?: true                      // flags.7?true
    noforwards?: true                       // flags.14?true
    peer: global.InputPeer                  // InputPeer
    reply_to_msg_id?: number                // flags.0?int
    media: global.InputMedia                // InputMedia
    message: string                         // string
    random_id: bigint                       // long
    reply_markup?: global.ReplyMarkup       // flags.2?ReplyMarkup
    entities?: global.MessageEntity[]       // flags.3?Vector<MessageEntity>
    schedule_date?: number                  // flags.10?int
    send_as?: global.InputPeer              // flags.13?InputPeer
  }, global.Updates>
  export const forwardMessages: TLApiMethod<"messages.forwardMessages", {
    silent?: true                           // flags.5?true
    background?: true                       // flags.6?true
    with_my_score?: true                    // flags.8?true
    drop_author?: true                      // flags.11?true
    drop_media_captions?: true              // flags.12?true
    noforwards?: true                       // flags.14?true
    from_peer: global.InputPeer             // InputPeer
    id: number[]                            // Vector<int>
    random_id: bigint[]                     // Vector<long>
    to_peer: global.InputPeer               // InputPeer
    schedule_date?: number                  // flags.10?int
    send_as?: global.InputPeer              // flags.13?InputPeer
  }, global.Updates>
  export const reportSpam: TLApiMethod<"messages.reportSpam", {
    peer: global.InputPeer                  // InputPeer
  }, boolean>
  export const getPeerSettings: TLApiMethod<"messages.getPeerSettings", {
    peer: global.InputPeer                  // InputPeer
  }, PeerSettings>
  export const report: TLApiMethod<"messages.report", {
    peer: global.InputPeer                  // InputPeer
    id: number[]                            // Vector<int>
    reason: global.ReportReason             // ReportReason
    message: string                         // string
  }, boolean>
  export const getChats: TLApiMethod<"messages.getChats", {
    id: bigint[]                            // Vector<long>
  }, Chats>
  export const getFullChat: TLApiMethod<"messages.getFullChat", {
    chat_id: bigint                         // long
  }, ChatFull>
  export const editChatTitle: TLApiMethod<"messages.editChatTitle", {
    chat_id: bigint                         // long
    title: string                           // string
  }, global.Updates>
  export const editChatPhoto: TLApiMethod<"messages.editChatPhoto", {
    chat_id: bigint                         // long
    photo: global.InputChatPhoto            // InputChatPhoto
  }, global.Updates>
  export const addChatUser: TLApiMethod<"messages.addChatUser", {
    chat_id: bigint                         // long
    user_id: global.InputUser               // InputUser
    fwd_limit: number                       // int
  }, global.Updates>
  export const deleteChatUser: TLApiMethod<"messages.deleteChatUser", {
    revoke_history?: true                   // flags.0?true
    chat_id: bigint                         // long
    user_id: global.InputUser               // InputUser
  }, global.Updates>
  export const createChat: TLApiMethod<"messages.createChat", {
    users: global.InputUser[]               // Vector<InputUser>
    title: string                           // string
  }, global.Updates>
  export const getDhConfig: TLApiMethod<"messages.getDhConfig", {
    version: number                         // int
    random_length: number                   // int
  }, DhConfig>
  export const requestEncryption: TLApiMethod<"messages.requestEncryption", {
    user_id: global.InputUser               // InputUser
    random_id: number                       // int
    g_a: BufferSource                       // bytes
  }, global.EncryptedChat>
  export const acceptEncryption: TLApiMethod<"messages.acceptEncryption", {
    peer: global.InputEncryptedChat         // InputEncryptedChat
    g_b: BufferSource                       // bytes
    key_fingerprint: bigint                 // long
  }, global.EncryptedChat>
  export const discardEncryption: TLApiMethod<"messages.discardEncryption", {
    delete_history?: true                   // flags.0?true
    chat_id: number                         // int
  }, boolean>
  export const setEncryptedTyping: TLApiMethod<"messages.setEncryptedTyping", {
    peer: global.InputEncryptedChat         // InputEncryptedChat
    typing: boolean                         // Bool
  }, boolean>
  export const readEncryptedHistory: TLApiMethod<"messages.readEncryptedHistory", {
    peer: global.InputEncryptedChat         // InputEncryptedChat
    max_date: number                        // int
  }, boolean>
  export const sendEncrypted: TLApiMethod<"messages.sendEncrypted", {
    silent?: true                           // flags.0?true
    peer: global.InputEncryptedChat         // InputEncryptedChat
    random_id: bigint                       // long
    data: BufferSource                      // bytes
  }, SentEncryptedMessage>
  export const sendEncryptedFile: TLApiMethod<"messages.sendEncryptedFile", {
    silent?: true                           // flags.0?true
    peer: global.InputEncryptedChat         // InputEncryptedChat
    random_id: bigint                       // long
    data: BufferSource                      // bytes
    file: global.InputEncryptedFile         // InputEncryptedFile
  }, SentEncryptedMessage>
  export const sendEncryptedService: TLApiMethod<"messages.sendEncryptedService", {
    peer: global.InputEncryptedChat         // InputEncryptedChat
    random_id: bigint                       // long
    data: BufferSource                      // bytes
  }, SentEncryptedMessage>
  export const receivedQueue: TLApiMethod<"messages.receivedQueue", {
    max_qts: number                         // int
  }, bigint[]>
  export const reportEncryptedSpam: TLApiMethod<"messages.reportEncryptedSpam", {
    peer: global.InputEncryptedChat         // InputEncryptedChat
  }, boolean>
  export const readMessageContents: TLApiMethod<"messages.readMessageContents", {
    id: number[]                            // Vector<int>
  }, AffectedMessages>
  export const getStickers: TLApiMethod<"messages.getStickers", {
    emoticon: string                        // string
    hash: bigint                            // long
  }, Stickers>
  export const getAllStickers: TLApiMethod<"messages.getAllStickers", {
    hash: bigint                            // long
  }, AllStickers>
  export const getWebPagePreview: TLApiMethod<"messages.getWebPagePreview", {
    message: string                         // string
    entities?: global.MessageEntity[]       // flags.3?Vector<MessageEntity>
  }, global.MessageMedia>
  export const exportChatInvite: TLApiMethod<"messages.exportChatInvite", {
    legacy_revoke_permanent?: true          // flags.2?true
    request_needed?: true                   // flags.3?true
    peer: global.InputPeer                  // InputPeer
    expire_date?: number                    // flags.0?int
    usage_limit?: number                    // flags.1?int
    title?: string                          // flags.4?string
  }, global.ExportedChatInvite>
  export const checkChatInvite: TLApiMethod<"messages.checkChatInvite", {
    hash: string                            // string
  }, global.ChatInvite>
  export const importChatInvite: TLApiMethod<"messages.importChatInvite", {
    hash: string                            // string
  }, global.Updates>
  export const getStickerSet: TLApiMethod<"messages.getStickerSet", {
    stickerset: global.InputStickerSet      // InputStickerSet
    hash: number                            // int
  }, StickerSet>
  export const installStickerSet: TLApiMethod<"messages.installStickerSet", {
    stickerset: global.InputStickerSet      // InputStickerSet
    archived: boolean                       // Bool
  }, StickerSetInstallResult>
  export const uninstallStickerSet: TLApiMethod<"messages.uninstallStickerSet", {
    stickerset: global.InputStickerSet      // InputStickerSet
  }, boolean>
  export const startBot: TLApiMethod<"messages.startBot", {
    bot: global.InputUser                   // InputUser
    peer: global.InputPeer                  // InputPeer
    random_id: bigint                       // long
    start_param: string                     // string
  }, global.Updates>
  export const getMessagesViews: TLApiMethod<"messages.getMessagesViews", {
    peer: global.InputPeer                  // InputPeer
    id: number[]                            // Vector<int>
    increment: boolean                      // Bool
  }, MessageViews>
  export const editChatAdmin: TLApiMethod<"messages.editChatAdmin", {
    chat_id: bigint                         // long
    user_id: global.InputUser               // InputUser
    is_admin: boolean                       // Bool
  }, boolean>
  export const migrateChat: TLApiMethod<"messages.migrateChat", {
    chat_id: bigint                         // long
  }, global.Updates>
  export const searchGlobal: TLApiMethod<"messages.searchGlobal", {
    folder_id?: number                      // flags.0?int
    q: string                               // string
    filter: global.MessagesFilter           // MessagesFilter
    min_date: number                        // int
    max_date: number                        // int
    offset_rate: number                     // int
    offset_peer: global.InputPeer           // InputPeer
    offset_id: number                       // int
    limit: number                           // int
  }, Messages>
  export const reorderStickerSets: TLApiMethod<"messages.reorderStickerSets", {
    masks?: true                            // flags.0?true
    order: bigint[]                         // Vector<long>
  }, boolean>
  export const getDocumentByHash: TLApiMethod<"messages.getDocumentByHash", {
    sha256: BufferSource                    // bytes
    size: number                            // int
    mime_type: string                       // string
  }, global.Document>
  export const getSavedGifs: TLApiMethod<"messages.getSavedGifs", {
    hash: bigint                            // long
  }, SavedGifs>
  export const saveGif: TLApiMethod<"messages.saveGif", {
    id: global.InputDocument                // InputDocument
    unsave: boolean                         // Bool
  }, boolean>
  export const getInlineBotResults: TLApiMethod<"messages.getInlineBotResults", {
    bot: global.InputUser                   // InputUser
    peer: global.InputPeer                  // InputPeer
    geo_point?: global.InputGeoPoint        // flags.0?InputGeoPoint
    query: string                           // string
    offset: string                          // string
  }, BotResults>
  export const setInlineBotResults: TLApiMethod<"messages.setInlineBotResults", {
    gallery?: true                          // flags.0?true
    private?: true                          // flags.1?true
    query_id: bigint                        // long
    results: global.InputBotInlineResult[]  // Vector<InputBotInlineResult>
    cache_time: number                      // int
    next_offset?: string                    // flags.2?string
    switch_pm?: global.InlineBotSwitchPM    // flags.3?InlineBotSwitchPM
  }, boolean>
  export const sendInlineBotResult: TLApiMethod<"messages.sendInlineBotResult", {
    silent?: true                           // flags.5?true
    background?: true                       // flags.6?true
    clear_draft?: true                      // flags.7?true
    hide_via?: true                         // flags.11?true
    peer: global.InputPeer                  // InputPeer
    reply_to_msg_id?: number                // flags.0?int
    random_id: bigint                       // long
    query_id: bigint                        // long
    id: string                              // string
    schedule_date?: number                  // flags.10?int
    send_as?: global.InputPeer              // flags.13?InputPeer
  }, global.Updates>
  export const getMessageEditData: TLApiMethod<"messages.getMessageEditData", {
    peer: global.InputPeer                  // InputPeer
    id: number                              // int
  }, MessageEditData>
  export const editMessage: TLApiMethod<"messages.editMessage", {
    no_webpage?: true                       // flags.1?true
    peer: global.InputPeer                  // InputPeer
    id: number                              // int
    message?: string                        // flags.11?string
    media?: global.InputMedia               // flags.14?InputMedia
    reply_markup?: global.ReplyMarkup       // flags.2?ReplyMarkup
    entities?: global.MessageEntity[]       // flags.3?Vector<MessageEntity>
    schedule_date?: number                  // flags.15?int
  }, global.Updates>
  export const editInlineBotMessage: TLApiMethod<"messages.editInlineBotMessage", {
    no_webpage?: true                       // flags.1?true
    id: global.InputBotInlineMessageID      // InputBotInlineMessageID
    message?: string                        // flags.11?string
    media?: global.InputMedia               // flags.14?InputMedia
    reply_markup?: global.ReplyMarkup       // flags.2?ReplyMarkup
    entities?: global.MessageEntity[]       // flags.3?Vector<MessageEntity>
  }, boolean>
  export const getBotCallbackAnswer: TLApiMethod<"messages.getBotCallbackAnswer", {
    game?: true                             // flags.1?true
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    data?: BufferSource                     // flags.0?bytes
    password?: global.InputCheckPasswordSRP // flags.2?InputCheckPasswordSRP
  }, BotCallbackAnswer>
  export const setBotCallbackAnswer: TLApiMethod<"messages.setBotCallbackAnswer", {
    alert?: true                            // flags.1?true
    query_id: bigint                        // long
    message?: string                        // flags.0?string
    url?: string                            // flags.2?string
    cache_time: number                      // int
  }, boolean>
  export const getPeerDialogs: TLApiMethod<"messages.getPeerDialogs", {
    peers: global.InputDialogPeer[]         // Vector<InputDialogPeer>
  }, PeerDialogs>
  export const saveDraft: TLApiMethod<"messages.saveDraft", {
    no_webpage?: true                       // flags.1?true
    reply_to_msg_id?: number                // flags.0?int
    peer: global.InputPeer                  // InputPeer
    message: string                         // string
    entities?: global.MessageEntity[]       // flags.3?Vector<MessageEntity>
  }, boolean>
  export const getAllDrafts: TLApiMethod<"messages.getAllDrafts", void, global.Updates>
  export const getFeaturedStickers: TLApiMethod<"messages.getFeaturedStickers", {
    hash: bigint                            // long
  }, FeaturedStickers>
  export const readFeaturedStickers: TLApiMethod<"messages.readFeaturedStickers", {
    id: bigint[]                            // Vector<long>
  }, boolean>
  export const getRecentStickers: TLApiMethod<"messages.getRecentStickers", {
    attached?: true                         // flags.0?true
    hash: bigint                            // long
  }, RecentStickers>
  export const saveRecentSticker: TLApiMethod<"messages.saveRecentSticker", {
    attached?: true                         // flags.0?true
    id: global.InputDocument                // InputDocument
    unsave: boolean                         // Bool
  }, boolean>
  export const clearRecentStickers: TLApiMethod<"messages.clearRecentStickers", {
    attached?: true                         // flags.0?true
  }, boolean>
  export const getArchivedStickers: TLApiMethod<"messages.getArchivedStickers", {
    masks?: true                            // flags.0?true
    offset_id: bigint                       // long
    limit: number                           // int
  }, ArchivedStickers>
  export const getMaskStickers: TLApiMethod<"messages.getMaskStickers", {
    hash: bigint                            // long
  }, AllStickers>
  export const getAttachedStickers: TLApiMethod<"messages.getAttachedStickers", {
    media: global.InputStickeredMedia       // InputStickeredMedia
  }, global.StickerSetCovered[]>
  export const setGameScore: TLApiMethod<"messages.setGameScore", {
    edit_message?: true                     // flags.0?true
    force?: true                            // flags.1?true
    peer: global.InputPeer                  // InputPeer
    id: number                              // int
    user_id: global.InputUser               // InputUser
    score: number                           // int
  }, global.Updates>
  export const setInlineGameScore: TLApiMethod<"messages.setInlineGameScore", {
    edit_message?: true                     // flags.0?true
    force?: true                            // flags.1?true
    id: global.InputBotInlineMessageID      // InputBotInlineMessageID
    user_id: global.InputUser               // InputUser
    score: number                           // int
  }, boolean>
  export const getGameHighScores: TLApiMethod<"messages.getGameHighScores", {
    peer: global.InputPeer                  // InputPeer
    id: number                              // int
    user_id: global.InputUser               // InputUser
  }, HighScores>
  export const getInlineGameHighScores: TLApiMethod<"messages.getInlineGameHighScores", {
    id: global.InputBotInlineMessageID      // InputBotInlineMessageID
    user_id: global.InputUser               // InputUser
  }, HighScores>
  export const getCommonChats: TLApiMethod<"messages.getCommonChats", {
    user_id: global.InputUser               // InputUser
    max_id: bigint                          // long
    limit: number                           // int
  }, Chats>
  export const getAllChats: TLApiMethod<"messages.getAllChats", {
    except_ids: bigint[]                    // Vector<long>
  }, Chats>
  export const getWebPage: TLApiMethod<"messages.getWebPage", {
    url: string                             // string
    hash: number                            // int
  }, global.WebPage>
  export const toggleDialogPin: TLApiMethod<"messages.toggleDialogPin", {
    pinned?: true                           // flags.0?true
    peer: global.InputDialogPeer            // InputDialogPeer
  }, boolean>
  export const reorderPinnedDialogs: TLApiMethod<"messages.reorderPinnedDialogs", {
    force?: true                            // flags.0?true
    folder_id: number                       // int
    order: global.InputDialogPeer[]         // Vector<InputDialogPeer>
  }, boolean>
  export const getPinnedDialogs: TLApiMethod<"messages.getPinnedDialogs", {
    folder_id: number                       // int
  }, PeerDialogs>
  export const setBotShippingResults: TLApiMethod<"messages.setBotShippingResults", {
    query_id: bigint                        // long
    error?: string                          // flags.0?string
    shipping_options?: global.ShippingOption[] // flags.1?Vector<ShippingOption>
  }, boolean>
  export const setBotPrecheckoutResults: TLApiMethod<"messages.setBotPrecheckoutResults", {
    success?: true                          // flags.1?true
    query_id: bigint                        // long
    error?: string                          // flags.0?string
  }, boolean>
  export const uploadMedia: TLApiMethod<"messages.uploadMedia", {
    peer: global.InputPeer                  // InputPeer
    media: global.InputMedia                // InputMedia
  }, global.MessageMedia>
  export const sendScreenshotNotification: TLApiMethod<"messages.sendScreenshotNotification", {
    peer: global.InputPeer                  // InputPeer
    reply_to_msg_id: number                 // int
    random_id: bigint                       // long
  }, global.Updates>
  export const getFavedStickers: TLApiMethod<"messages.getFavedStickers", {
    hash: bigint                            // long
  }, FavedStickers>
  export const faveSticker: TLApiMethod<"messages.faveSticker", {
    id: global.InputDocument                // InputDocument
    unfave: boolean                         // Bool
  }, boolean>
  export const getUnreadMentions: TLApiMethod<"messages.getUnreadMentions", {
    peer: global.InputPeer                  // InputPeer
    offset_id: number                       // int
    add_offset: number                      // int
    limit: number                           // int
    max_id: number                          // int
    min_id: number                          // int
  }, Messages>
  export const readMentions: TLApiMethod<"messages.readMentions", {
    peer: global.InputPeer                  // InputPeer
  }, AffectedHistory>
  export const getRecentLocations: TLApiMethod<"messages.getRecentLocations", {
    peer: global.InputPeer                  // InputPeer
    limit: number                           // int
    hash: bigint                            // long
  }, Messages>
  export const sendMultiMedia: TLApiMethod<"messages.sendMultiMedia", {
    silent?: true                           // flags.5?true
    background?: true                       // flags.6?true
    clear_draft?: true                      // flags.7?true
    noforwards?: true                       // flags.14?true
    peer: global.InputPeer                  // InputPeer
    reply_to_msg_id?: number                // flags.0?int
    multi_media: global.InputSingleMedia[]  // Vector<InputSingleMedia>
    schedule_date?: number                  // flags.10?int
    send_as?: global.InputPeer              // flags.13?InputPeer
  }, global.Updates>
  export const uploadEncryptedFile: TLApiMethod<"messages.uploadEncryptedFile", {
    peer: global.InputEncryptedChat         // InputEncryptedChat
    file: global.InputEncryptedFile         // InputEncryptedFile
  }, global.EncryptedFile>
  export const searchStickerSets: TLApiMethod<"messages.searchStickerSets", {
    exclude_featured?: true                 // flags.0?true
    q: string                               // string
    hash: bigint                            // long
  }, FoundStickerSets>
  export const getSplitRanges: TLApiMethod<"messages.getSplitRanges", void, global.MessageRange[]>
  export const markDialogUnread: TLApiMethod<"messages.markDialogUnread", {
    unread?: true                           // flags.0?true
    peer: global.InputDialogPeer            // InputDialogPeer
  }, boolean>
  export const getDialogUnreadMarks: TLApiMethod<"messages.getDialogUnreadMarks", void, global.DialogPeer[]>
  export const clearAllDrafts: TLApiMethod<"messages.clearAllDrafts", void, boolean>
  export const updatePinnedMessage: TLApiMethod<"messages.updatePinnedMessage", {
    silent?: true                           // flags.0?true
    unpin?: true                            // flags.1?true
    pm_oneside?: true                       // flags.2?true
    peer: global.InputPeer                  // InputPeer
    id: number                              // int
  }, global.Updates>
  export const sendVote: TLApiMethod<"messages.sendVote", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    options: BufferSource[]                 // Vector<bytes>
  }, global.Updates>
  export const getPollResults: TLApiMethod<"messages.getPollResults", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
  }, global.Updates>
  export const getOnlines: TLApiMethod<"messages.getOnlines", {
    peer: global.InputPeer                  // InputPeer
  }, global.ChatOnlines>
  export const editChatAbout: TLApiMethod<"messages.editChatAbout", {
    peer: global.InputPeer                  // InputPeer
    about: string                           // string
  }, boolean>
  export const editChatDefaultBannedRights: TLApiMethod<"messages.editChatDefaultBannedRights", {
    peer: global.InputPeer                  // InputPeer
    banned_rights: global.ChatBannedRights  // ChatBannedRights
  }, global.Updates>
  export const getEmojiKeywords: TLApiMethod<"messages.getEmojiKeywords", {
    lang_code: string                       // string
  }, global.EmojiKeywordsDifference>
  export const getEmojiKeywordsDifference: TLApiMethod<"messages.getEmojiKeywordsDifference", {
    lang_code: string                       // string
    from_version: number                    // int
  }, global.EmojiKeywordsDifference>
  export const getEmojiKeywordsLanguages: TLApiMethod<"messages.getEmojiKeywordsLanguages", {
    lang_codes: string[]                    // Vector<string>
  }, global.EmojiLanguage[]>
  export const getEmojiURL: TLApiMethod<"messages.getEmojiURL", {
    lang_code: string                       // string
  }, global.EmojiURL>
  export const getSearchCounters: TLApiMethod<"messages.getSearchCounters", {
    peer: global.InputPeer                  // InputPeer
    filters: global.MessagesFilter[]        // Vector<MessagesFilter>
  }, SearchCounter[]>
  export const requestUrlAuth: TLApiMethod<"messages.requestUrlAuth", {
    peer?: global.InputPeer                 // flags.1?InputPeer
    msg_id?: number                         // flags.1?int
    button_id?: number                      // flags.1?int
    url?: string                            // flags.2?string
  }, global.UrlAuthResult>
  export const acceptUrlAuth: TLApiMethod<"messages.acceptUrlAuth", {
    write_allowed?: true                    // flags.0?true
    peer?: global.InputPeer                 // flags.1?InputPeer
    msg_id?: number                         // flags.1?int
    button_id?: number                      // flags.1?int
    url?: string                            // flags.2?string
  }, global.UrlAuthResult>
  export const hidePeerSettingsBar: TLApiMethod<"messages.hidePeerSettingsBar", {
    peer: global.InputPeer                  // InputPeer
  }, boolean>
  export const getScheduledHistory: TLApiMethod<"messages.getScheduledHistory", {
    peer: global.InputPeer                  // InputPeer
    hash: bigint                            // long
  }, Messages>
  export const getScheduledMessages: TLApiMethod<"messages.getScheduledMessages", {
    peer: global.InputPeer                  // InputPeer
    id: number[]                            // Vector<int>
  }, Messages>
  export const sendScheduledMessages: TLApiMethod<"messages.sendScheduledMessages", {
    peer: global.InputPeer                  // InputPeer
    id: number[]                            // Vector<int>
  }, global.Updates>
  export const deleteScheduledMessages: TLApiMethod<"messages.deleteScheduledMessages", {
    peer: global.InputPeer                  // InputPeer
    id: number[]                            // Vector<int>
  }, global.Updates>
  export const getPollVotes: TLApiMethod<"messages.getPollVotes", {
    peer: global.InputPeer                  // InputPeer
    id: number                              // int
    option?: BufferSource                   // flags.0?bytes
    offset?: string                         // flags.1?string
    limit: number                           // int
  }, VotesList>
  export const toggleStickerSets: TLApiMethod<"messages.toggleStickerSets", {
    uninstall?: true                        // flags.0?true
    archive?: true                          // flags.1?true
    unarchive?: true                        // flags.2?true
    stickersets: global.InputStickerSet[]   // Vector<InputStickerSet>
  }, boolean>
  export const getDialogFilters: TLApiMethod<"messages.getDialogFilters", void, global.DialogFilter[]>
  export const getSuggestedDialogFilters: TLApiMethod<"messages.getSuggestedDialogFilters", void, global.DialogFilterSuggested[]>
  export const updateDialogFilter: TLApiMethod<"messages.updateDialogFilter", {
    id: number                              // int
    filter?: global.DialogFilter            // flags.0?DialogFilter
  }, boolean>
  export const updateDialogFiltersOrder: TLApiMethod<"messages.updateDialogFiltersOrder", {
    order: number[]                         // Vector<int>
  }, boolean>
  export const getOldFeaturedStickers: TLApiMethod<"messages.getOldFeaturedStickers", {
    offset: number                          // int
    limit: number                           // int
    hash: bigint                            // long
  }, FeaturedStickers>
  export const getReplies: TLApiMethod<"messages.getReplies", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    offset_id: number                       // int
    offset_date: number                     // int
    add_offset: number                      // int
    limit: number                           // int
    max_id: number                          // int
    min_id: number                          // int
    hash: bigint                            // long
  }, Messages>
  export const getDiscussionMessage: TLApiMethod<"messages.getDiscussionMessage", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
  }, DiscussionMessage>
  export const readDiscussion: TLApiMethod<"messages.readDiscussion", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    read_max_id: number                     // int
  }, boolean>
  export const unpinAllMessages: TLApiMethod<"messages.unpinAllMessages", {
    peer: global.InputPeer                  // InputPeer
  }, AffectedHistory>
  export const deleteChat: TLApiMethod<"messages.deleteChat", {
    chat_id: bigint                         // long
  }, boolean>
  export const deletePhoneCallHistory: TLApiMethod<"messages.deletePhoneCallHistory", {
    revoke?: true                           // flags.0?true
  }, AffectedFoundMessages>
  export const checkHistoryImport: TLApiMethod<"messages.checkHistoryImport", {
    import_head: string                     // string
  }, HistoryImportParsed>
  export const initHistoryImport: TLApiMethod<"messages.initHistoryImport", {
    peer: global.InputPeer                  // InputPeer
    file: global.InputFile                  // InputFile
    media_count: number                     // int
  }, HistoryImport>
  export const uploadImportedMedia: TLApiMethod<"messages.uploadImportedMedia", {
    peer: global.InputPeer                  // InputPeer
    import_id: bigint                       // long
    file_name: string                       // string
    media: global.InputMedia                // InputMedia
  }, global.MessageMedia>
  export const startHistoryImport: TLApiMethod<"messages.startHistoryImport", {
    peer: global.InputPeer                  // InputPeer
    import_id: bigint                       // long
  }, boolean>
  export const getExportedChatInvites: TLApiMethod<"messages.getExportedChatInvites", {
    revoked?: true                          // flags.3?true
    peer: global.InputPeer                  // InputPeer
    admin_id: global.InputUser              // InputUser
    offset_date?: number                    // flags.2?int
    offset_link?: string                    // flags.2?string
    limit: number                           // int
  }, ExportedChatInvites>
  export const getExportedChatInvite: TLApiMethod<"messages.getExportedChatInvite", {
    peer: global.InputPeer                  // InputPeer
    link: string                            // string
  }, ExportedChatInvite>
  export const editExportedChatInvite: TLApiMethod<"messages.editExportedChatInvite", {
    revoked?: true                          // flags.2?true
    peer: global.InputPeer                  // InputPeer
    link: string                            // string
    expire_date?: number                    // flags.0?int
    usage_limit?: number                    // flags.1?int
    request_needed?: boolean                // flags.3?Bool
    title?: string                          // flags.4?string
  }, ExportedChatInvite>
  export const deleteRevokedExportedChatInvites: TLApiMethod<"messages.deleteRevokedExportedChatInvites", {
    peer: global.InputPeer                  // InputPeer
    admin_id: global.InputUser              // InputUser
  }, boolean>
  export const deleteExportedChatInvite: TLApiMethod<"messages.deleteExportedChatInvite", {
    peer: global.InputPeer                  // InputPeer
    link: string                            // string
  }, boolean>
  export const getAdminsWithInvites: TLApiMethod<"messages.getAdminsWithInvites", {
    peer: global.InputPeer                  // InputPeer
  }, ChatAdminsWithInvites>
  export const getChatInviteImporters: TLApiMethod<"messages.getChatInviteImporters", {
    requested?: true                        // flags.0?true
    peer: global.InputPeer                  // InputPeer
    link?: string                           // flags.1?string
    q?: string                              // flags.2?string
    offset_date: number                     // int
    offset_user: global.InputUser           // InputUser
    limit: number                           // int
  }, ChatInviteImporters>
  export const setHistoryTTL: TLApiMethod<"messages.setHistoryTTL", {
    peer: global.InputPeer                  // InputPeer
    period: number                          // int
  }, global.Updates>
  export const checkHistoryImportPeer: TLApiMethod<"messages.checkHistoryImportPeer", {
    peer: global.InputPeer                  // InputPeer
  }, CheckedHistoryImportPeer>
  export const setChatTheme: TLApiMethod<"messages.setChatTheme", {
    peer: global.InputPeer                  // InputPeer
    emoticon: string                        // string
  }, global.Updates>
  export const getMessageReadParticipants: TLApiMethod<"messages.getMessageReadParticipants", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
  }, bigint[]>
  export const getSearchResultsCalendar: TLApiMethod<"messages.getSearchResultsCalendar", {
    peer: global.InputPeer                  // InputPeer
    filter: global.MessagesFilter           // MessagesFilter
    offset_id: number                       // int
    offset_date: number                     // int
  }, SearchResultsCalendar>
  export const getSearchResultsPositions: TLApiMethod<"messages.getSearchResultsPositions", {
    peer: global.InputPeer                  // InputPeer
    filter: global.MessagesFilter           // MessagesFilter
    offset_id: number                       // int
    limit: number                           // int
  }, SearchResultsPositions>
  export const hideChatJoinRequest: TLApiMethod<"messages.hideChatJoinRequest", {
    approved?: true                         // flags.0?true
    peer: global.InputPeer                  // InputPeer
    user_id: global.InputUser               // InputUser
  }, global.Updates>
  export const hideAllChatJoinRequests: TLApiMethod<"messages.hideAllChatJoinRequests", {
    approved?: true                         // flags.0?true
    peer: global.InputPeer                  // InputPeer
    link?: string                           // flags.1?string
  }, global.Updates>
  export const toggleNoForwards: TLApiMethod<"messages.toggleNoForwards", {
    peer: global.InputPeer                  // InputPeer
    enabled: boolean                        // Bool
  }, global.Updates>
  export const saveDefaultSendAs: TLApiMethod<"messages.saveDefaultSendAs", {
    peer: global.InputPeer                  // InputPeer
    send_as: global.InputPeer               // InputPeer
  }, boolean>
  export const sendReaction: TLApiMethod<"messages.sendReaction", {
    big?: true                              // flags.1?true
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    reaction?: string                       // flags.0?string
  }, global.Updates>
  export const getMessagesReactions: TLApiMethod<"messages.getMessagesReactions", {
    peer: global.InputPeer                  // InputPeer
    id: number[]                            // Vector<int>
  }, global.Updates>
  export const getMessageReactionsList: TLApiMethod<"messages.getMessageReactionsList", {
    peer: global.InputPeer                  // InputPeer
    id: number                              // int
    reaction?: string                       // flags.0?string
    offset?: string                         // flags.1?string
    limit: number                           // int
  }, MessageReactionsList>
  export const setChatAvailableReactions: TLApiMethod<"messages.setChatAvailableReactions", {
    peer: global.InputPeer                  // InputPeer
    available_reactions: string[]           // Vector<string>
  }, global.Updates>
  export const getAvailableReactions: TLApiMethod<"messages.getAvailableReactions", {
    hash: number                            // int
  }, AvailableReactions>
  export const setDefaultReaction: TLApiMethod<"messages.setDefaultReaction", {
    reaction: string                        // string
  }, boolean>
  export const translateText: TLApiMethod<"messages.translateText", {
    peer?: global.InputPeer                 // flags.0?InputPeer
    msg_id?: number                         // flags.0?int
    text?: string                           // flags.1?string
    from_lang?: string                      // flags.2?string
    to_lang: string                         // string
  }, TranslatedText>
  export const getUnreadReactions: TLApiMethod<"messages.getUnreadReactions", {
    peer: global.InputPeer                  // InputPeer
    offset_id: number                       // int
    add_offset: number                      // int
    limit: number                           // int
    max_id: number                          // int
    min_id: number                          // int
  }, Messages>
  export const readReactions: TLApiMethod<"messages.readReactions", {
    peer: global.InputPeer                  // InputPeer
  }, AffectedHistory>
  export const searchSentMedia: TLApiMethod<"messages.searchSentMedia", {
    q: string                               // string
    filter: global.MessagesFilter           // MessagesFilter
    limit: number                           // int
  }, Messages>
}

export namespace updates {
  export const getState: TLApiMethod<"updates.getState", void, State>
  export const getDifference: TLApiMethod<"updates.getDifference", {
    pts: number                             // int
    pts_total_limit?: number                // flags.0?int
    date: number                            // int
    qts: number                             // int
  }, Difference>
  export const getChannelDifference: TLApiMethod<"updates.getChannelDifference", {
    force?: true                            // flags.0?true
    channel: global.InputChannel            // InputChannel
    filter: global.ChannelMessagesFilter    // ChannelMessagesFilter
    pts: number                             // int
    limit: number                           // int
  }, ChannelDifference>
}

export namespace photos {
  export const updateProfilePhoto: TLApiMethod<"photos.updateProfilePhoto", {
    id: global.InputPhoto                   // InputPhoto
  }, Photo>
  export const uploadProfilePhoto: TLApiMethod<"photos.uploadProfilePhoto", {
    file?: global.InputFile                 // flags.0?InputFile
    video?: global.InputFile                // flags.1?InputFile
    video_start_ts?: number                 // flags.2?double
  }, Photo>
  export const deletePhotos: TLApiMethod<"photos.deletePhotos", {
    id: global.InputPhoto[]                 // Vector<InputPhoto>
  }, bigint[]>
  export const getUserPhotos: TLApiMethod<"photos.getUserPhotos", {
    user_id: global.InputUser               // InputUser
    offset: number                          // int
    max_id: bigint                          // long
    limit: number                           // int
  }, Photos>
}

export namespace upload {
  export const saveFilePart: TLApiMethod<"upload.saveFilePart", {
    file_id: bigint                         // long
    file_part: number                       // int
    bytes: BufferSource                     // bytes
  }, boolean>
  export const getFile: TLApiMethod<"upload.getFile", {
    precise?: true                          // flags.0?true
    cdn_supported?: true                    // flags.1?true
    location: global.InputFileLocation      // InputFileLocation
    offset: number                          // int
    limit: number                           // int
  }, File>
  export const saveBigFilePart: TLApiMethod<"upload.saveBigFilePart", {
    file_id: bigint                         // long
    file_part: number                       // int
    file_total_parts: number                // int
    bytes: BufferSource                     // bytes
  }, boolean>
  export const getWebFile: TLApiMethod<"upload.getWebFile", {
    location: global.InputWebFileLocation   // InputWebFileLocation
    offset: number                          // int
    limit: number                           // int
  }, WebFile>
  export const getCdnFile: TLApiMethod<"upload.getCdnFile", {
    file_token: BufferSource                // bytes
    offset: number                          // int
    limit: number                           // int
  }, CdnFile>
  export const reuploadCdnFile: TLApiMethod<"upload.reuploadCdnFile", {
    file_token: BufferSource                // bytes
    request_token: BufferSource             // bytes
  }, global.FileHash[]>
  export const getCdnFileHashes: TLApiMethod<"upload.getCdnFileHashes", {
    file_token: BufferSource                // bytes
    offset: number                          // int
  }, global.FileHash[]>
  export const getFileHashes: TLApiMethod<"upload.getFileHashes", {
    location: global.InputFileLocation      // InputFileLocation
    offset: number                          // int
  }, global.FileHash[]>
}

export namespace help {
  export const getConfig: TLApiMethod<"help.getConfig", void, global.Config>
  export const getNearestDc: TLApiMethod<"help.getNearestDc", void, global.NearestDc>
  export const getAppUpdate: TLApiMethod<"help.getAppUpdate", {
    source: string                          // string
  }, AppUpdate>
  export const getInviteText: TLApiMethod<"help.getInviteText", void, InviteText>
  export const getSupport: TLApiMethod<"help.getSupport", void, Support>
  export const getAppChangelog: TLApiMethod<"help.getAppChangelog", {
    prev_app_version: string                // string
  }, global.Updates>
  export const setBotUpdatesStatus: TLApiMethod<"help.setBotUpdatesStatus", {
    pending_updates_count: number           // int
    message: string                         // string
  }, boolean>
  export const getCdnConfig: TLApiMethod<"help.getCdnConfig", void, global.CdnConfig>
  export const getRecentMeUrls: TLApiMethod<"help.getRecentMeUrls", {
    referer: string                         // string
  }, RecentMeUrls>
  export const getTermsOfServiceUpdate: TLApiMethod<"help.getTermsOfServiceUpdate", void, TermsOfServiceUpdate>
  export const acceptTermsOfService: TLApiMethod<"help.acceptTermsOfService", {
    id: global.DataJSON                     // DataJSON
  }, boolean>
  export const getDeepLinkInfo: TLApiMethod<"help.getDeepLinkInfo", {
    path: string                            // string
  }, DeepLinkInfo>
  export const getAppConfig: TLApiMethod<"help.getAppConfig", void, global.JSONValue>
  export const saveAppLog: TLApiMethod<"help.saveAppLog", {
    events: global.InputAppEvent[]          // Vector<InputAppEvent>
  }, boolean>
  export const getPassportConfig: TLApiMethod<"help.getPassportConfig", {
    hash: number                            // int
  }, PassportConfig>
  export const getSupportName: TLApiMethod<"help.getSupportName", void, SupportName>
  export const getUserInfo: TLApiMethod<"help.getUserInfo", {
    user_id: global.InputUser               // InputUser
  }, UserInfo>
  export const editUserInfo: TLApiMethod<"help.editUserInfo", {
    user_id: global.InputUser               // InputUser
    message: string                         // string
    entities: global.MessageEntity[]        // Vector<MessageEntity>
  }, UserInfo>
  export const getPromoData: TLApiMethod<"help.getPromoData", void, PromoData>
  export const hidePromoData: TLApiMethod<"help.hidePromoData", {
    peer: global.InputPeer                  // InputPeer
  }, boolean>
  export const dismissSuggestion: TLApiMethod<"help.dismissSuggestion", {
    peer: global.InputPeer                  // InputPeer
    suggestion: string                      // string
  }, boolean>
  export const getCountriesList: TLApiMethod<"help.getCountriesList", {
    lang_code: string                       // string
    hash: number                            // int
  }, CountriesList>
}

export namespace channels {
  export const readHistory: TLApiMethod<"channels.readHistory", {
    channel: global.InputChannel            // InputChannel
    max_id: number                          // int
  }, boolean>
  export const deleteMessages: TLApiMethod<"channels.deleteMessages", {
    channel: global.InputChannel            // InputChannel
    id: number[]                            // Vector<int>
  }, messages.AffectedMessages>
  export const reportSpam: TLApiMethod<"channels.reportSpam", {
    channel: global.InputChannel            // InputChannel
    participant: global.InputPeer           // InputPeer
    id: number[]                            // Vector<int>
  }, boolean>
  export const getMessages: TLApiMethod<"channels.getMessages", {
    channel: global.InputChannel            // InputChannel
    id: global.InputMessage[]               // Vector<InputMessage>
  }, messages.Messages>
  export const getParticipants: TLApiMethod<"channels.getParticipants", {
    channel: global.InputChannel            // InputChannel
    filter: global.ChannelParticipantsFilter // ChannelParticipantsFilter
    offset: number                          // int
    limit: number                           // int
    hash: bigint                            // long
  }, ChannelParticipants>
  export const getParticipant: TLApiMethod<"channels.getParticipant", {
    channel: global.InputChannel            // InputChannel
    participant: global.InputPeer           // InputPeer
  }, ChannelParticipant>
  export const getChannels: TLApiMethod<"channels.getChannels", {
    id: global.InputChannel[]               // Vector<InputChannel>
  }, messages.Chats>
  export const getFullChannel: TLApiMethod<"channels.getFullChannel", {
    channel: global.InputChannel            // InputChannel
  }, messages.ChatFull>
  export const createChannel: TLApiMethod<"channels.createChannel", {
    broadcast?: true                        // flags.0?true
    megagroup?: true                        // flags.1?true
    for_import?: true                       // flags.3?true
    title: string                           // string
    about: string                           // string
    geo_point?: global.InputGeoPoint        // flags.2?InputGeoPoint
    address?: string                        // flags.2?string
  }, global.Updates>
  export const editAdmin: TLApiMethod<"channels.editAdmin", {
    channel: global.InputChannel            // InputChannel
    user_id: global.InputUser               // InputUser
    admin_rights: global.ChatAdminRights    // ChatAdminRights
    rank: string                            // string
  }, global.Updates>
  export const editTitle: TLApiMethod<"channels.editTitle", {
    channel: global.InputChannel            // InputChannel
    title: string                           // string
  }, global.Updates>
  export const editPhoto: TLApiMethod<"channels.editPhoto", {
    channel: global.InputChannel            // InputChannel
    photo: global.InputChatPhoto            // InputChatPhoto
  }, global.Updates>
  export const checkUsername: TLApiMethod<"channels.checkUsername", {
    channel: global.InputChannel            // InputChannel
    username: string                        // string
  }, boolean>
  export const updateUsername: TLApiMethod<"channels.updateUsername", {
    channel: global.InputChannel            // InputChannel
    username: string                        // string
  }, boolean>
  export const joinChannel: TLApiMethod<"channels.joinChannel", {
    channel: global.InputChannel            // InputChannel
  }, global.Updates>
  export const leaveChannel: TLApiMethod<"channels.leaveChannel", {
    channel: global.InputChannel            // InputChannel
  }, global.Updates>
  export const inviteToChannel: TLApiMethod<"channels.inviteToChannel", {
    channel: global.InputChannel            // InputChannel
    users: global.InputUser[]               // Vector<InputUser>
  }, global.Updates>
  export const deleteChannel: TLApiMethod<"channels.deleteChannel", {
    channel: global.InputChannel            // InputChannel
  }, global.Updates>
  export const exportMessageLink: TLApiMethod<"channels.exportMessageLink", {
    grouped?: true                          // flags.0?true
    thread?: true                           // flags.1?true
    channel: global.InputChannel            // InputChannel
    id: number                              // int
  }, global.ExportedMessageLink>
  export const toggleSignatures: TLApiMethod<"channels.toggleSignatures", {
    channel: global.InputChannel            // InputChannel
    enabled: boolean                        // Bool
  }, global.Updates>
  export const getAdminedPublicChannels: TLApiMethod<"channels.getAdminedPublicChannels", {
    by_location?: true                      // flags.0?true
    check_limit?: true                      // flags.1?true
  }, messages.Chats>
  export const editBanned: TLApiMethod<"channels.editBanned", {
    channel: global.InputChannel            // InputChannel
    participant: global.InputPeer           // InputPeer
    banned_rights: global.ChatBannedRights  // ChatBannedRights
  }, global.Updates>
  export const getAdminLog: TLApiMethod<"channels.getAdminLog", {
    channel: global.InputChannel            // InputChannel
    q: string                               // string
    events_filter?: global.ChannelAdminLogEventsFilter // flags.0?ChannelAdminLogEventsFilter
    admins?: global.InputUser[]             // flags.1?Vector<InputUser>
    max_id: bigint                          // long
    min_id: bigint                          // long
    limit: number                           // int
  }, AdminLogResults>
  export const setStickers: TLApiMethod<"channels.setStickers", {
    channel: global.InputChannel            // InputChannel
    stickerset: global.InputStickerSet      // InputStickerSet
  }, boolean>
  export const readMessageContents: TLApiMethod<"channels.readMessageContents", {
    channel: global.InputChannel            // InputChannel
    id: number[]                            // Vector<int>
  }, boolean>
  export const deleteHistory: TLApiMethod<"channels.deleteHistory", {
    channel: global.InputChannel            // InputChannel
    max_id: number                          // int
  }, boolean>
  export const togglePreHistoryHidden: TLApiMethod<"channels.togglePreHistoryHidden", {
    channel: global.InputChannel            // InputChannel
    enabled: boolean                        // Bool
  }, global.Updates>
  export const getLeftChannels: TLApiMethod<"channels.getLeftChannels", {
    offset: number                          // int
  }, messages.Chats>
  export const getGroupsForDiscussion: TLApiMethod<"channels.getGroupsForDiscussion", void, messages.Chats>
  export const setDiscussionGroup: TLApiMethod<"channels.setDiscussionGroup", {
    broadcast: global.InputChannel          // InputChannel
    group: global.InputChannel              // InputChannel
  }, boolean>
  export const editCreator: TLApiMethod<"channels.editCreator", {
    channel: global.InputChannel            // InputChannel
    user_id: global.InputUser               // InputUser
    password: global.InputCheckPasswordSRP  // InputCheckPasswordSRP
  }, global.Updates>
  export const editLocation: TLApiMethod<"channels.editLocation", {
    channel: global.InputChannel            // InputChannel
    geo_point: global.InputGeoPoint         // InputGeoPoint
    address: string                         // string
  }, boolean>
  export const toggleSlowMode: TLApiMethod<"channels.toggleSlowMode", {
    channel: global.InputChannel            // InputChannel
    seconds: number                         // int
  }, global.Updates>
  export const getInactiveChannels: TLApiMethod<"channels.getInactiveChannels", void, messages.InactiveChats>
  export const convertToGigagroup: TLApiMethod<"channels.convertToGigagroup", {
    channel: global.InputChannel            // InputChannel
  }, global.Updates>
  export const viewSponsoredMessage: TLApiMethod<"channels.viewSponsoredMessage", {
    channel: global.InputChannel            // InputChannel
    random_id: BufferSource                 // bytes
  }, boolean>
  export const getSponsoredMessages: TLApiMethod<"channels.getSponsoredMessages", {
    channel: global.InputChannel            // InputChannel
  }, messages.SponsoredMessages>
  export const getSendAs: TLApiMethod<"channels.getSendAs", {
    peer: global.InputPeer                  // InputPeer
  }, SendAsPeers>
  export const deleteParticipantHistory: TLApiMethod<"channels.deleteParticipantHistory", {
    channel: global.InputChannel            // InputChannel
    participant: global.InputPeer           // InputPeer
  }, messages.AffectedHistory>
}

export namespace bots {
  export const sendCustomRequest: TLApiMethod<"bots.sendCustomRequest", {
    custom_method: string                   // string
    params: global.DataJSON                 // DataJSON
  }, global.DataJSON>
  export const answerWebhookJSONQuery: TLApiMethod<"bots.answerWebhookJSONQuery", {
    query_id: bigint                        // long
    data: global.DataJSON                   // DataJSON
  }, boolean>
  export const setBotCommands: TLApiMethod<"bots.setBotCommands", {
    scope: global.BotCommandScope           // BotCommandScope
    lang_code: string                       // string
    commands: global.BotCommand[]           // Vector<BotCommand>
  }, boolean>
  export const resetBotCommands: TLApiMethod<"bots.resetBotCommands", {
    scope: global.BotCommandScope           // BotCommandScope
    lang_code: string                       // string
  }, boolean>
  export const getBotCommands: TLApiMethod<"bots.getBotCommands", {
    scope: global.BotCommandScope           // BotCommandScope
    lang_code: string                       // string
  }, global.BotCommand[]>
}

export namespace payments {
  export const getPaymentForm: TLApiMethod<"payments.getPaymentForm", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    theme_params?: global.DataJSON          // flags.0?DataJSON
  }, PaymentForm>
  export const getPaymentReceipt: TLApiMethod<"payments.getPaymentReceipt", {
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
  }, PaymentReceipt>
  export const validateRequestedInfo: TLApiMethod<"payments.validateRequestedInfo", {
    save?: true                             // flags.0?true
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    info: global.PaymentRequestedInfo       // PaymentRequestedInfo
  }, ValidatedRequestedInfo>
  export const sendPaymentForm: TLApiMethod<"payments.sendPaymentForm", {
    form_id: bigint                         // long
    peer: global.InputPeer                  // InputPeer
    msg_id: number                          // int
    requested_info_id?: string              // flags.0?string
    shipping_option_id?: string             // flags.1?string
    credentials: global.InputPaymentCredentials // InputPaymentCredentials
    tip_amount?: bigint                     // flags.2?long
  }, PaymentResult>
  export const getSavedInfo: TLApiMethod<"payments.getSavedInfo", void, SavedInfo>
  export const clearSavedInfo: TLApiMethod<"payments.clearSavedInfo", {
    credentials?: true                      // flags.0?true
    info?: true                             // flags.1?true
  }, boolean>
  export const getBankCardData: TLApiMethod<"payments.getBankCardData", {
    number: string                          // string
  }, BankCardData>
}

export namespace stickers {
  export const createStickerSet: TLApiMethod<"stickers.createStickerSet", {
    masks?: true                            // flags.0?true
    animated?: true                         // flags.1?true
    videos?: true                           // flags.4?true
    user_id: global.InputUser               // InputUser
    title: string                           // string
    short_name: string                      // string
    thumb?: global.InputDocument            // flags.2?InputDocument
    stickers: global.InputStickerSetItem[]  // Vector<InputStickerSetItem>
    software?: string                       // flags.3?string
  }, messages.StickerSet>
  export const removeStickerFromSet: TLApiMethod<"stickers.removeStickerFromSet", {
    sticker: global.InputDocument           // InputDocument
  }, messages.StickerSet>
  export const changeStickerPosition: TLApiMethod<"stickers.changeStickerPosition", {
    sticker: global.InputDocument           // InputDocument
    position: number                        // int
  }, messages.StickerSet>
  export const addStickerToSet: TLApiMethod<"stickers.addStickerToSet", {
    stickerset: global.InputStickerSet      // InputStickerSet
    sticker: global.InputStickerSetItem     // InputStickerSetItem
  }, messages.StickerSet>
  export const setStickerSetThumb: TLApiMethod<"stickers.setStickerSetThumb", {
    stickerset: global.InputStickerSet      // InputStickerSet
    thumb: global.InputDocument             // InputDocument
  }, messages.StickerSet>
  export const checkShortName: TLApiMethod<"stickers.checkShortName", {
    short_name: string                      // string
  }, boolean>
  export const suggestShortName: TLApiMethod<"stickers.suggestShortName", {
    title: string                           // string
  }, SuggestedShortName>
}

export namespace phone {
  export const getCallConfig: TLApiMethod<"phone.getCallConfig", void, global.DataJSON>
  export const requestCall: TLApiMethod<"phone.requestCall", {
    video?: true                            // flags.0?true
    user_id: global.InputUser               // InputUser
    random_id: number                       // int
    g_a_hash: BufferSource                  // bytes
    protocol: global.PhoneCallProtocol      // PhoneCallProtocol
  }, PhoneCall>
  export const acceptCall: TLApiMethod<"phone.acceptCall", {
    peer: global.InputPhoneCall             // InputPhoneCall
    g_b: BufferSource                       // bytes
    protocol: global.PhoneCallProtocol      // PhoneCallProtocol
  }, PhoneCall>
  export const confirmCall: TLApiMethod<"phone.confirmCall", {
    peer: global.InputPhoneCall             // InputPhoneCall
    g_a: BufferSource                       // bytes
    key_fingerprint: bigint                 // long
    protocol: global.PhoneCallProtocol      // PhoneCallProtocol
  }, PhoneCall>
  export const receivedCall: TLApiMethod<"phone.receivedCall", {
    peer: global.InputPhoneCall             // InputPhoneCall
  }, boolean>
  export const discardCall: TLApiMethod<"phone.discardCall", {
    video?: true                            // flags.0?true
    peer: global.InputPhoneCall             // InputPhoneCall
    duration: number                        // int
    reason: global.PhoneCallDiscardReason   // PhoneCallDiscardReason
    connection_id: bigint                   // long
  }, global.Updates>
  export const setCallRating: TLApiMethod<"phone.setCallRating", {
    user_initiative?: true                  // flags.0?true
    peer: global.InputPhoneCall             // InputPhoneCall
    rating: number                          // int
    comment: string                         // string
  }, global.Updates>
  export const saveCallDebug: TLApiMethod<"phone.saveCallDebug", {
    peer: global.InputPhoneCall             // InputPhoneCall
    debug: global.DataJSON                  // DataJSON
  }, boolean>
  export const sendSignalingData: TLApiMethod<"phone.sendSignalingData", {
    peer: global.InputPhoneCall             // InputPhoneCall
    data: BufferSource                      // bytes
  }, boolean>
  export const createGroupCall: TLApiMethod<"phone.createGroupCall", {
    rtmp_stream?: true                      // flags.2?true
    peer: global.InputPeer                  // InputPeer
    random_id: number                       // int
    title?: string                          // flags.0?string
    schedule_date?: number                  // flags.1?int
  }, global.Updates>
  export const joinGroupCall: TLApiMethod<"phone.joinGroupCall", {
    muted?: true                            // flags.0?true
    video_stopped?: true                    // flags.2?true
    call: global.InputGroupCall             // InputGroupCall
    join_as: global.InputPeer               // InputPeer
    invite_hash?: string                    // flags.1?string
    params: global.DataJSON                 // DataJSON
  }, global.Updates>
  export const leaveGroupCall: TLApiMethod<"phone.leaveGroupCall", {
    call: global.InputGroupCall             // InputGroupCall
    source: number                          // int
  }, global.Updates>
  export const inviteToGroupCall: TLApiMethod<"phone.inviteToGroupCall", {
    call: global.InputGroupCall             // InputGroupCall
    users: global.InputUser[]               // Vector<InputUser>
  }, global.Updates>
  export const discardGroupCall: TLApiMethod<"phone.discardGroupCall", {
    call: global.InputGroupCall             // InputGroupCall
  }, global.Updates>
  export const toggleGroupCallSettings: TLApiMethod<"phone.toggleGroupCallSettings", {
    reset_invite_hash?: true                // flags.1?true
    call: global.InputGroupCall             // InputGroupCall
    join_muted?: boolean                    // flags.0?Bool
  }, global.Updates>
  export const getGroupCall: TLApiMethod<"phone.getGroupCall", {
    call: global.InputGroupCall             // InputGroupCall
    limit: number                           // int
  }, GroupCall>
  export const getGroupParticipants: TLApiMethod<"phone.getGroupParticipants", {
    call: global.InputGroupCall             // InputGroupCall
    ids: global.InputPeer[]                 // Vector<InputPeer>
    sources: number[]                       // Vector<int>
    offset: string                          // string
    limit: number                           // int
  }, GroupParticipants>
  export const checkGroupCall: TLApiMethod<"phone.checkGroupCall", {
    call: global.InputGroupCall             // InputGroupCall
    sources: number[]                       // Vector<int>
  }, number[]>
  export const toggleGroupCallRecord: TLApiMethod<"phone.toggleGroupCallRecord", {
    start?: true                            // flags.0?true
    video?: true                            // flags.2?true
    call: global.InputGroupCall             // InputGroupCall
    title?: string                          // flags.1?string
    video_portrait?: boolean                // flags.2?Bool
  }, global.Updates>
  export const editGroupCallParticipant: TLApiMethod<"phone.editGroupCallParticipant", {
    call: global.InputGroupCall             // InputGroupCall
    participant: global.InputPeer           // InputPeer
    muted?: boolean                         // flags.0?Bool
    volume?: number                         // flags.1?int
    raise_hand?: boolean                    // flags.2?Bool
    video_stopped?: boolean                 // flags.3?Bool
    video_paused?: boolean                  // flags.4?Bool
    presentation_paused?: boolean           // flags.5?Bool
  }, global.Updates>
  export const editGroupCallTitle: TLApiMethod<"phone.editGroupCallTitle", {
    call: global.InputGroupCall             // InputGroupCall
    title: string                           // string
  }, global.Updates>
  export const getGroupCallJoinAs: TLApiMethod<"phone.getGroupCallJoinAs", {
    peer: global.InputPeer                  // InputPeer
  }, JoinAsPeers>
  export const exportGroupCallInvite: TLApiMethod<"phone.exportGroupCallInvite", {
    can_self_unmute?: true                  // flags.0?true
    call: global.InputGroupCall             // InputGroupCall
  }, ExportedGroupCallInvite>
  export const toggleGroupCallStartSubscription: TLApiMethod<"phone.toggleGroupCallStartSubscription", {
    call: global.InputGroupCall             // InputGroupCall
    subscribed: boolean                     // Bool
  }, global.Updates>
  export const startScheduledGroupCall: TLApiMethod<"phone.startScheduledGroupCall", {
    call: global.InputGroupCall             // InputGroupCall
  }, global.Updates>
  export const saveDefaultGroupCallJoinAs: TLApiMethod<"phone.saveDefaultGroupCallJoinAs", {
    peer: global.InputPeer                  // InputPeer
    join_as: global.InputPeer               // InputPeer
  }, boolean>
  export const joinGroupCallPresentation: TLApiMethod<"phone.joinGroupCallPresentation", {
    call: global.InputGroupCall             // InputGroupCall
    params: global.DataJSON                 // DataJSON
  }, global.Updates>
  export const leaveGroupCallPresentation: TLApiMethod<"phone.leaveGroupCallPresentation", {
    call: global.InputGroupCall             // InputGroupCall
  }, global.Updates>
  export const getGroupCallStreamChannels: TLApiMethod<"phone.getGroupCallStreamChannels", {
    call: global.InputGroupCall             // InputGroupCall
  }, GroupCallStreamChannels>
  export const getGroupCallStreamRtmpUrl: TLApiMethod<"phone.getGroupCallStreamRtmpUrl", {
    peer: global.InputPeer                  // InputPeer
    revoke: boolean                         // Bool
  }, GroupCallStreamRtmpUrl>
}

export namespace langpack {
  export const getLangPack: TLApiMethod<"langpack.getLangPack", {
    lang_pack: string                       // string
    lang_code: string                       // string
  }, global.LangPackDifference>
  export const getStrings: TLApiMethod<"langpack.getStrings", {
    lang_pack: string                       // string
    lang_code: string                       // string
    keys: string[]                          // Vector<string>
  }, global.LangPackString[]>
  export const getDifference: TLApiMethod<"langpack.getDifference", {
    lang_pack: string                       // string
    lang_code: string                       // string
    from_version: number                    // int
  }, global.LangPackDifference>
  export const getLanguages: TLApiMethod<"langpack.getLanguages", {
    lang_pack: string                       // string
  }, global.LangPackLanguage[]>
  export const getLanguage: TLApiMethod<"langpack.getLanguage", {
    lang_pack: string                       // string
    lang_code: string                       // string
  }, global.LangPackLanguage>
}

export namespace folders {
  export const editPeerFolders: TLApiMethod<"folders.editPeerFolders", {
    folder_peers: global.InputFolderPeer[]  // Vector<InputFolderPeer>
  }, global.Updates>
  export const deleteFolder: TLApiMethod<"folders.deleteFolder", {
    folder_id: number                       // int
  }, global.Updates>
}

export namespace stats {
  export const getBroadcastStats: TLApiMethod<"stats.getBroadcastStats", {
    dark?: true                             // flags.0?true
    channel: global.InputChannel            // InputChannel
  }, BroadcastStats>
  export const loadAsyncGraph: TLApiMethod<"stats.loadAsyncGraph", {
    token: string                           // string
    x?: bigint                              // flags.0?long
  }, global.StatsGraph>
  export const getMegagroupStats: TLApiMethod<"stats.getMegagroupStats", {
    dark?: true                             // flags.0?true
    channel: global.InputChannel            // InputChannel
  }, MegagroupStats>
  export const getMessagePublicForwards: TLApiMethod<"stats.getMessagePublicForwards", {
    channel: global.InputChannel            // InputChannel
    msg_id: number                          // int
    offset_rate: number                     // int
    offset_peer: global.InputPeer           // InputPeer
    offset_id: number                       // int
    limit: number                           // int
  }, messages.Messages>
  export const getMessageStats: TLApiMethod<"stats.getMessageStats", {
    dark?: true                             // flags.0?true
    channel: global.InputChannel            // InputChannel
    msg_id: number                          // int
  }, MessageStats>
}

// #endregion "method"
